{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts", "../../../lib/remark-code-title.ts", "../../../lib/remark-toc-headings.ts"],
  "sourcesContent": ["import { ComputedFields, defineDocumentType, makeSource } from 'contentlayer/source-files';\r\nimport readingTime from 'reading-time';\r\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings';\r\nimport rehypePrismPlus from 'rehype-prism-plus';\r\nimport rehypeSlug from 'rehype-slug';\r\nimport remarkCodeTitles from './lib/remark-code-title';\r\nimport { extractTocHeadings } from './lib/remark-toc-headings';\r\n\r\nconst computedFields: ComputedFields = {\r\n  readingTime: { type: 'json', resolve: (doc) => readingTime(doc.body.raw) },\r\n  slug: {\r\n    type: 'string',\r\n    resolve: (doc) => doc._raw.flattenedPath.replace(/^.+?(\\/)/, ''),\r\n  },\r\n  toc: { type: 'string', resolve: (doc) => extractTocHeadings(doc.body.raw) },\r\n};\r\n\r\nexport const Blog = defineDocumentType(() => ({\r\n  name: 'Blog',\r\n  filePathPattern: 'blog/**/*.mdx',\r\n  contentType: 'mdx',\r\n  fields: {\r\n    title: { type: 'string', required: true },\r\n    date: { type: 'date', required: true },\r\n    tags: { type: 'list', of: { type: 'string' } },\r\n    lastmod: { type: 'date' },\r\n    draft: { type: 'boolean' },\r\n    summary: { type: 'string' },\r\n    images: { type: 'list', of: { type: 'string' } },\r\n    author: { type: 'string', required: true },\r\n    layout: { type: 'string' },\r\n    bibliography: { type: 'string' },\r\n    canonicalUrl: { type: 'string' },\r\n  },\r\n  computedFields,\r\n}));\r\n\r\nexport const Authors = defineDocumentType(() => ({\r\n  name: 'Authors',\r\n  filePathPattern: 'authors/**/*.mdx',\r\n  contentType: 'mdx',\r\n  fields: {\r\n    name: { type: 'string', required: true },\r\n    avatar: { type: 'string' },\r\n    occupation: { type: 'string' },\r\n    company: { type: 'string' },\r\n    email: { type: 'string' },\r\n    twitter: { type: 'string' },\r\n    linkedin: { type: 'string' },\r\n    github: { type: 'string' },\r\n    layout: { type: 'string' },\r\n  },\r\n  computedFields,\r\n}));\r\n\r\nexport default makeSource({\r\n  contentDirPath: 'content',\r\n  documentTypes: [Blog, Authors],\r\n  mdx: {\r\n    cwd: process.cwd(),\r\n    remarkPlugins: [remarkCodeTitles],\r\n    rehypePlugins: [rehypeSlug, rehypeAutolinkHeadings, [rehypePrismPlus, { ignoreMissing: true }]],\r\n  },\r\n});\r\n", "import { Parent } from 'unist';\r\nimport { visit } from 'unist-util-visit';\r\n\r\nexport default function remarkCodeTitles() {\r\n  return (tree: Parent & { lang?: string }) =>\r\n    visit(tree, 'code', (node: Parent & { lang?: string }, index, parent: Parent) => {\r\n      const nodeLang = node.lang || '';\r\n      let language = '';\r\n      let title = '';\r\n\r\n      if (nodeLang.includes(':')) {\r\n        language = nodeLang.slice(0, nodeLang.search(':'));\r\n        title = nodeLang.slice(nodeLang.search(':') + 1, nodeLang.length);\r\n      }\r\n\r\n      if (!title) {\r\n        return;\r\n      }\r\n\r\n      const className = 'remark-code-title';\r\n\r\n      const titleNode = {\r\n        type: 'mdxJsxFlowElement',\r\n        name: 'div',\r\n        attributes: [{ type: 'mdxJsxAttribute', name: 'className', value: className }],\r\n        children: [{ type: 'text', value: title }],\r\n        data: { _xdmExplicitJsx: true },\r\n      };\r\n\r\n      parent.children.splice(index, 0, titleNode);\r\n      node.lang = language;\r\n    });\r\n}\r\n", "import slugger from 'github-slugger';\r\nimport { Heading } from 'mdast';\r\nimport { toString } from 'mdast-util-to-string';\r\nimport { remark } from 'remark';\r\nimport { Toc } from 'types/Toc';\r\nimport { Parent } from 'unist';\r\nimport { visit } from 'unist-util-visit';\r\nimport { VFile } from 'vfile';\r\n\r\nexport function remarkTocHeadings() {\r\n  return (tree: Parent, file: VFile) => {\r\n    const toc: Toc = [];\r\n    visit(tree, 'heading', (node: Heading) => {\r\n      const textContent = toString(node);\r\n      toc.push({\r\n        value: textContent,\r\n        url: '#' + slugger.slug(textContent),\r\n        depth: node.depth,\r\n      });\r\n    });\r\n    file.data.toc = toc;\r\n  };\r\n}\r\n\r\nexport async function extractTocHeadings(markdown: string) {\r\n  const vfile = await remark().use(remarkTocHeadings).process(markdown);\r\n  return vfile.data.toc;\r\n}\r\n"],
  "mappings": "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",
  "names": ["visit"]
}
