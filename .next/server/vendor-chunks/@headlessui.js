/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@headlessui";
exports.ids = ["vendor-chunks/@headlessui"];
exports.modules = {

/***/ "(ssr)/./node_modules/@headlessui/react/dist/headlessui.dev.cjs":
/*!****************************************************************!*\
  !*** ./node_modules/@headlessui/react/dist/headlessui.dev.cjs ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target, mod));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  Combobox: () => Combobox,\n  Dialog: () => Dialog2,\n  Disclosure: () => Disclosure2,\n  FocusTrap: () => FocusTrap,\n  Listbox: () => Listbox2,\n  Menu: () => Menu2,\n  Popover: () => Popover2,\n  Portal: () => Portal2,\n  RadioGroup: () => RadioGroup2,\n  Switch: () => Switch2,\n  Tab: () => Tab2,\n  Transition: () => Transition2\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/components/combobox/combobox.tsx\nvar import_react17 = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"), 1);\n\n// src/hooks/use-computed.ts\nvar import_react3 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n// src/hooks/use-iso-morphic-effect.ts\nvar import_react = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n// src/utils/ssr.ts\nvar isServer = typeof window === \"undefined\" || typeof document === \"undefined\";\n\n// src/hooks/use-iso-morphic-effect.ts\nvar useIsoMorphicEffect = isServer ? import_react.useEffect : import_react.useLayoutEffect;\n\n// src/hooks/use-latest-value.ts\nvar import_react2 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nfunction useLatestValue(value) {\n  let cache = (0, import_react2.useRef)(value);\n  useIsoMorphicEffect(() => {\n    cache.current = value;\n  }, [value]);\n  return cache;\n}\n\n// src/hooks/use-computed.ts\nfunction useComputed(cb, dependencies) {\n  let [value, setValue] = (0, import_react3.useState)(cb);\n  let cbRef = useLatestValue(cb);\n  useIsoMorphicEffect(() => setValue(cbRef.current), [cbRef, setValue, ...dependencies]);\n  return value;\n}\n\n// src/hooks/use-disposables.ts\nvar import_react4 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n// src/utils/micro-task.ts\nfunction microTask(cb) {\n  if (typeof queueMicrotask === \"function\") {\n    queueMicrotask(cb);\n  } else {\n    Promise.resolve().then(cb).catch((e) => setTimeout(() => {\n      throw e;\n    }));\n  }\n}\n\n// src/utils/disposables.ts\nfunction disposables() {\n  let disposables2 = [];\n  let queue = [];\n  let api = {\n    enqueue(fn) {\n      queue.push(fn);\n    },\n    addEventListener(element, name, listener, options) {\n      element.addEventListener(name, listener, options);\n      return api.add(() => element.removeEventListener(name, listener, options));\n    },\n    requestAnimationFrame(...args) {\n      let raf = requestAnimationFrame(...args);\n      return api.add(() => cancelAnimationFrame(raf));\n    },\n    nextFrame(...args) {\n      return api.requestAnimationFrame(() => {\n        return api.requestAnimationFrame(...args);\n      });\n    },\n    setTimeout(...args) {\n      let timer = setTimeout(...args);\n      return api.add(() => clearTimeout(timer));\n    },\n    microTask(...args) {\n      let task = { current: true };\n      microTask(() => {\n        if (task.current) {\n          args[0]();\n        }\n      });\n      return api.add(() => {\n        task.current = false;\n      });\n    },\n    add(cb) {\n      disposables2.push(cb);\n      return () => {\n        let idx = disposables2.indexOf(cb);\n        if (idx >= 0) {\n          let [dispose] = disposables2.splice(idx, 1);\n          dispose();\n        }\n      };\n    },\n    dispose() {\n      for (let dispose of disposables2.splice(0)) {\n        dispose();\n      }\n    },\n    async workQueue() {\n      for (let handle of queue.splice(0)) {\n        await handle();\n      }\n    }\n  };\n  return api;\n}\n\n// src/hooks/use-disposables.ts\nfunction useDisposables() {\n  let [d] = (0, import_react4.useState)(disposables);\n  (0, import_react4.useEffect)(() => () => d.dispose(), [d]);\n  return d;\n}\n\n// src/hooks/use-event.ts\nvar import_react5 = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"), 1);\nvar useEvent = function useEvent2(cb) {\n  let cache = useLatestValue(cb);\n  return import_react5.default.useCallback((...args) => cache.current(...args), [cache]);\n};\n\n// src/hooks/use-id.ts\nvar import_react7 = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"), 1);\n\n// src/hooks/use-server-handoff-complete.ts\nvar import_react6 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar state = { serverHandoffComplete: false };\nfunction useServerHandoffComplete() {\n  let [serverHandoffComplete, setServerHandoffComplete] = (0, import_react6.useState)(state.serverHandoffComplete);\n  (0, import_react6.useEffect)(() => {\n    if (serverHandoffComplete === true)\n      return;\n    setServerHandoffComplete(true);\n  }, [serverHandoffComplete]);\n  (0, import_react6.useEffect)(() => {\n    if (state.serverHandoffComplete === false)\n      state.serverHandoffComplete = true;\n  }, []);\n  return serverHandoffComplete;\n}\n\n// src/hooks/use-id.ts\nvar id = 0;\nfunction generateId() {\n  return ++id;\n}\nvar _a;\nvar useId = (_a = import_react7.default.useId) != null ? _a : function useId2() {\n  let ready = useServerHandoffComplete();\n  let [id2, setId] = import_react7.default.useState(ready ? generateId : null);\n  useIsoMorphicEffect(() => {\n    if (id2 === null)\n      setId(generateId());\n  }, [id2]);\n  return id2 != null ? \"\" + id2 : void 0;\n};\n\n// src/hooks/use-outside-click.ts\nvar import_react9 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n// src/utils/match.ts\nfunction match(value, lookup, ...args) {\n  if (value in lookup) {\n    let returnValue = lookup[value];\n    return typeof returnValue === \"function\" ? returnValue(...args) : returnValue;\n  }\n  let error = new Error(`Tried to handle \"${value}\" but there is no handler defined. Only defined handlers are: ${Object.keys(lookup).map((key) => `\"${key}\"`).join(\", \")}.`);\n  if (Error.captureStackTrace)\n    Error.captureStackTrace(error, match);\n  throw error;\n}\n\n// src/utils/owner.ts\nfunction getOwnerDocument(element) {\n  if (isServer)\n    return null;\n  if (element instanceof Node)\n    return element.ownerDocument;\n  if (element == null ? void 0 : element.hasOwnProperty(\"current\")) {\n    if (element.current instanceof Node)\n      return element.current.ownerDocument;\n  }\n  return document;\n}\n\n// src/utils/focus-management.ts\nvar focusableSelector = [\n  \"[contentEditable=true]\",\n  \"[tabindex]\",\n  \"a[href]\",\n  \"area[href]\",\n  \"button:not([disabled])\",\n  \"iframe\",\n  \"input:not([disabled])\",\n  \"select:not([disabled])\",\n  \"textarea:not([disabled])\"\n].map( false ? 0 : (selector) => `${selector}:not([tabindex='-1'])`).join(\",\");\nfunction getFocusableElements(container = document.body) {\n  if (container == null)\n    return [];\n  return Array.from(container.querySelectorAll(focusableSelector));\n}\nfunction isFocusableElement(element, mode = 0 /* Strict */) {\n  var _a2;\n  if (element === ((_a2 = getOwnerDocument(element)) == null ? void 0 : _a2.body))\n    return false;\n  return match(mode, {\n    [0 /* Strict */]() {\n      return element.matches(focusableSelector);\n    },\n    [1 /* Loose */]() {\n      let next = element;\n      while (next !== null) {\n        if (next.matches(focusableSelector))\n          return true;\n        next = next.parentElement;\n      }\n      return false;\n    }\n  });\n}\nfunction restoreFocusIfNecessary(element) {\n  let ownerDocument = getOwnerDocument(element);\n  disposables().nextFrame(() => {\n    if (ownerDocument && !isFocusableElement(ownerDocument.activeElement, 0 /* Strict */)) {\n      focusElement(element);\n    }\n  });\n}\nfunction focusElement(element) {\n  element == null ? void 0 : element.focus({ preventScroll: true });\n}\nvar selectableSelector = [\"textarea\", \"input\"].join(\",\");\nfunction isSelectableElement(element) {\n  var _a2, _b;\n  return (_b = (_a2 = element == null ? void 0 : element.matches) == null ? void 0 : _a2.call(element, selectableSelector)) != null ? _b : false;\n}\nfunction sortByDomNode(nodes, resolveKey = (i) => i) {\n  return nodes.slice().sort((aItem, zItem) => {\n    let a = resolveKey(aItem);\n    let z = resolveKey(zItem);\n    if (a === null || z === null)\n      return 0;\n    let position = a.compareDocumentPosition(z);\n    if (position & Node.DOCUMENT_POSITION_FOLLOWING)\n      return -1;\n    if (position & Node.DOCUMENT_POSITION_PRECEDING)\n      return 1;\n    return 0;\n  });\n}\nfunction focusFrom(current, focus) {\n  return focusIn(getFocusableElements(), focus, true, current);\n}\nfunction focusIn(container, focus, sorted = true, active = null) {\n  let ownerDocument = Array.isArray(container) ? container.length > 0 ? container[0].ownerDocument : document : container.ownerDocument;\n  let elements = Array.isArray(container) ? sorted ? sortByDomNode(container) : container : getFocusableElements(container);\n  active = active != null ? active : ownerDocument.activeElement;\n  let direction = (() => {\n    if (focus & (1 /* First */ | 4 /* Next */))\n      return 1 /* Next */;\n    if (focus & (2 /* Previous */ | 8 /* Last */))\n      return -1 /* Previous */;\n    throw new Error(\"Missing Focus.First, Focus.Previous, Focus.Next or Focus.Last\");\n  })();\n  let startIndex = (() => {\n    if (focus & 1 /* First */)\n      return 0;\n    if (focus & 2 /* Previous */)\n      return Math.max(0, elements.indexOf(active)) - 1;\n    if (focus & 4 /* Next */)\n      return Math.max(0, elements.indexOf(active)) + 1;\n    if (focus & 8 /* Last */)\n      return elements.length - 1;\n    throw new Error(\"Missing Focus.First, Focus.Previous, Focus.Next or Focus.Last\");\n  })();\n  let focusOptions = focus & 32 /* NoScroll */ ? { preventScroll: true } : {};\n  let offset = 0;\n  let total = elements.length;\n  let next = void 0;\n  do {\n    if (offset >= total || offset + total <= 0)\n      return 0 /* Error */;\n    let nextIdx = startIndex + offset;\n    if (focus & 16 /* WrapAround */) {\n      nextIdx = (nextIdx + total) % total;\n    } else {\n      if (nextIdx < 0)\n        return 3 /* Underflow */;\n      if (nextIdx >= total)\n        return 1 /* Overflow */;\n    }\n    next = elements[nextIdx];\n    next == null ? void 0 : next.focus(focusOptions);\n    offset += direction;\n  } while (next !== ownerDocument.activeElement);\n  if (focus & (4 /* Next */ | 2 /* Previous */) && isSelectableElement(next)) {\n    next.select();\n  }\n  if (!next.hasAttribute(\"tabindex\"))\n    next.setAttribute(\"tabindex\", \"0\");\n  return 2 /* Success */;\n}\n\n// src/hooks/use-document-event.ts\nvar import_react8 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nfunction useDocumentEvent(type, listener, options) {\n  let listenerRef = useLatestValue(listener);\n  (0, import_react8.useEffect)(() => {\n    function handler(event) {\n      listenerRef.current(event);\n    }\n    document.addEventListener(type, handler, options);\n    return () => document.removeEventListener(type, handler, options);\n  }, [type, options]);\n}\n\n// src/hooks/use-outside-click.ts\nfunction useOutsideClick(containers, cb, enabled = true) {\n  let enabledRef = (0, import_react9.useRef)(false);\n  (0, import_react9.useEffect)( false ? 0 : () => {\n    requestAnimationFrame(() => {\n      enabledRef.current = enabled;\n    });\n  }, [enabled]);\n  function handleOutsideClick(event, resolveTarget) {\n    if (!enabledRef.current)\n      return;\n    if (event.defaultPrevented)\n      return;\n    let _containers = function resolve(containers2) {\n      if (typeof containers2 === \"function\") {\n        return resolve(containers2());\n      }\n      if (Array.isArray(containers2)) {\n        return containers2;\n      }\n      if (containers2 instanceof Set) {\n        return containers2;\n      }\n      return [containers2];\n    }(containers);\n    let target = resolveTarget(event);\n    if (target === null) {\n      return;\n    }\n    if (!target.ownerDocument.documentElement.contains(target))\n      return;\n    for (let container of _containers) {\n      if (container === null)\n        continue;\n      let domNode = container instanceof HTMLElement ? container : container.current;\n      if (domNode == null ? void 0 : domNode.contains(target)) {\n        return;\n      }\n    }\n    if (!isFocusableElement(target, 1 /* Loose */) && target.tabIndex !== -1) {\n      event.preventDefault();\n    }\n    return cb(event, target);\n  }\n  let initialClickTarget = (0, import_react9.useRef)(null);\n  useDocumentEvent(\"mousedown\", (event) => {\n    if (enabledRef.current) {\n      initialClickTarget.current = event.target;\n    }\n  }, true);\n  useDocumentEvent(\"click\", (event) => {\n    if (!initialClickTarget.current) {\n      return;\n    }\n    handleOutsideClick(event, () => {\n      return initialClickTarget.current;\n    });\n    initialClickTarget.current = null;\n  }, true);\n  useDocumentEvent(\"blur\", (event) => handleOutsideClick(event, () => window.document.activeElement instanceof HTMLIFrameElement ? window.document.activeElement : null), true);\n}\n\n// src/hooks/use-resolve-button-type.ts\nvar import_react10 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nfunction resolveType(props) {\n  var _a2;\n  if (props.type)\n    return props.type;\n  let tag = (_a2 = props.as) != null ? _a2 : \"button\";\n  if (typeof tag === \"string\" && tag.toLowerCase() === \"button\")\n    return \"button\";\n  return void 0;\n}\nfunction useResolveButtonType(props, ref) {\n  let [type, setType] = (0, import_react10.useState)(() => resolveType(props));\n  useIsoMorphicEffect(() => {\n    setType(resolveType(props));\n  }, [props.type, props.as]);\n  useIsoMorphicEffect(() => {\n    if (type)\n      return;\n    if (!ref.current)\n      return;\n    if (ref.current instanceof HTMLButtonElement && !ref.current.hasAttribute(\"type\")) {\n      setType(\"button\");\n    }\n  }, [type, ref]);\n  return type;\n}\n\n// src/hooks/use-sync-refs.ts\nvar import_react11 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar Optional = Symbol();\nfunction optionalRef(cb, isOptional = true) {\n  return Object.assign(cb, { [Optional]: isOptional });\n}\nfunction useSyncRefs(...refs) {\n  let cache = (0, import_react11.useRef)(refs);\n  (0, import_react11.useEffect)(() => {\n    cache.current = refs;\n  }, [refs]);\n  let syncRefs = useEvent((value) => {\n    for (let ref of cache.current) {\n      if (ref == null)\n        continue;\n      if (typeof ref === \"function\")\n        ref(value);\n      else\n        ref.current = value;\n    }\n  });\n  return refs.every((ref) => ref == null || (ref == null ? void 0 : ref[Optional])) ? void 0 : syncRefs;\n}\n\n// src/hooks/use-tree-walker.ts\nvar import_react12 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nfunction useTreeWalker({\n  container,\n  accept,\n  walk,\n  enabled = true\n}) {\n  let acceptRef = (0, import_react12.useRef)(accept);\n  let walkRef = (0, import_react12.useRef)(walk);\n  (0, import_react12.useEffect)(() => {\n    acceptRef.current = accept;\n    walkRef.current = walk;\n  }, [accept, walk]);\n  useIsoMorphicEffect(() => {\n    if (!container)\n      return;\n    if (!enabled)\n      return;\n    let ownerDocument = getOwnerDocument(container);\n    if (!ownerDocument)\n      return;\n    let accept2 = acceptRef.current;\n    let walk2 = walkRef.current;\n    let acceptNode = Object.assign((node) => accept2(node), { acceptNode: accept2 });\n    let walker = ownerDocument.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, acceptNode, false);\n    while (walker.nextNode())\n      walk2(walker.currentNode);\n  }, [container, enabled, acceptRef, walkRef]);\n}\n\n// src/utils/calculate-active-index.ts\nfunction assertNever(x) {\n  throw new Error(\"Unexpected object: \" + x);\n}\nfunction calculateActiveIndex(action, resolvers) {\n  let items = resolvers.resolveItems();\n  if (items.length <= 0)\n    return null;\n  let currentActiveIndex = resolvers.resolveActiveIndex();\n  let activeIndex = currentActiveIndex != null ? currentActiveIndex : -1;\n  let nextActiveIndex = (() => {\n    switch (action.focus) {\n      case 0 /* First */:\n        return items.findIndex((item) => !resolvers.resolveDisabled(item));\n      case 1 /* Previous */: {\n        let idx = items.slice().reverse().findIndex((item, idx2, all) => {\n          if (activeIndex !== -1 && all.length - idx2 - 1 >= activeIndex)\n            return false;\n          return !resolvers.resolveDisabled(item);\n        });\n        if (idx === -1)\n          return idx;\n        return items.length - 1 - idx;\n      }\n      case 2 /* Next */:\n        return items.findIndex((item, idx) => {\n          if (idx <= activeIndex)\n            return false;\n          return !resolvers.resolveDisabled(item);\n        });\n      case 3 /* Last */: {\n        let idx = items.slice().reverse().findIndex((item) => !resolvers.resolveDisabled(item));\n        if (idx === -1)\n          return idx;\n        return items.length - 1 - idx;\n      }\n      case 4 /* Specific */:\n        return items.findIndex((item) => resolvers.resolveId(item) === action.id);\n      case 5 /* Nothing */:\n        return null;\n      default:\n        assertNever(action);\n    }\n  })();\n  return nextActiveIndex === -1 ? currentActiveIndex : nextActiveIndex;\n}\n\n// src/utils/render.ts\nvar import_react13 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nfunction render({\n  ourProps,\n  theirProps,\n  slot,\n  defaultTag,\n  features,\n  visible = true,\n  name\n}) {\n  let props = mergeProps(theirProps, ourProps);\n  if (visible)\n    return _render(props, slot, defaultTag, name);\n  let featureFlags = features != null ? features : 0 /* None */;\n  if (featureFlags & 2 /* Static */) {\n    let { static: isStatic = false, ...rest } = props;\n    if (isStatic)\n      return _render(rest, slot, defaultTag, name);\n  }\n  if (featureFlags & 1 /* RenderStrategy */) {\n    let { unmount = true, ...rest } = props;\n    let strategy = unmount ? 0 /* Unmount */ : 1 /* Hidden */;\n    return match(strategy, {\n      [0 /* Unmount */]() {\n        return null;\n      },\n      [1 /* Hidden */]() {\n        return _render({ ...rest, ...{ hidden: true, style: { display: \"none\" } } }, slot, defaultTag, name);\n      }\n    });\n  }\n  return _render(props, slot, defaultTag, name);\n}\nfunction _render(props, slot = {}, tag, name) {\n  let {\n    as: Component = tag,\n    children,\n    refName = \"ref\",\n    ...rest\n  } = omit(props, [\"unmount\", \"static\"]);\n  let refRelatedProps = props.ref !== void 0 ? { [refName]: props.ref } : {};\n  let resolvedChildren = typeof children === \"function\" ? children(slot) : children;\n  if (rest.className && typeof rest.className === \"function\") {\n    ;\n    rest.className = rest.className(slot);\n  }\n  let dataAttributes = {};\n  if (slot) {\n    let exposeState = false;\n    let states = [];\n    for (let [k, v] of Object.entries(slot)) {\n      if (typeof v === \"boolean\") {\n        exposeState = true;\n      }\n      if (v === true) {\n        states.push(k);\n      }\n    }\n    if (exposeState)\n      dataAttributes[`data-headlessui-state`] = states.join(\" \");\n  }\n  if (Component === import_react13.Fragment) {\n    if (Object.keys(compact(rest)).length > 0) {\n      if (!(0, import_react13.isValidElement)(resolvedChildren) || Array.isArray(resolvedChildren) && resolvedChildren.length > 1) {\n        throw new Error([\n          'Passing props on \"Fragment\"!',\n          \"\",\n          `The current component <${name} /> is rendering a \"Fragment\".`,\n          `However we need to passthrough the following props:`,\n          Object.keys(rest).map((line) => `  - ${line}`).join(\"\\n\"),\n          \"\",\n          \"You can apply a few solutions:\",\n          [\n            'Add an `as=\"...\"` prop, to ensure that we render an actual element instead of a \"Fragment\".',\n            \"Render a single element as the child so that we can forward the props onto that element.\"\n          ].map((line) => `  - ${line}`).join(\"\\n\")\n        ].join(\"\\n\"));\n      }\n      return (0, import_react13.cloneElement)(resolvedChildren, Object.assign({}, mergeProps(resolvedChildren.props, compact(omit(rest, [\"ref\"]))), dataAttributes, refRelatedProps, mergeRefs(resolvedChildren.ref, refRelatedProps.ref)));\n    }\n  }\n  return (0, import_react13.createElement)(Component, Object.assign({}, omit(rest, [\"ref\"]), Component !== import_react13.Fragment && refRelatedProps, Component !== import_react13.Fragment && dataAttributes), resolvedChildren);\n}\nfunction mergeRefs(...refs) {\n  return {\n    ref: refs.every((ref) => ref == null) ? void 0 : (value) => {\n      for (let ref of refs) {\n        if (ref == null)\n          continue;\n        if (typeof ref === \"function\")\n          ref(value);\n        else\n          ref.current = value;\n      }\n    }\n  };\n}\nfunction mergeProps(...listOfProps) {\n  var _a2;\n  if (listOfProps.length === 0)\n    return {};\n  if (listOfProps.length === 1)\n    return listOfProps[0];\n  let target = {};\n  let eventHandlers = {};\n  for (let props of listOfProps) {\n    for (let prop in props) {\n      if (prop.startsWith(\"on\") && typeof props[prop] === \"function\") {\n        (_a2 = eventHandlers[prop]) != null ? _a2 : eventHandlers[prop] = [];\n        eventHandlers[prop].push(props[prop]);\n      } else {\n        target[prop] = props[prop];\n      }\n    }\n  }\n  if (target.disabled || target[\"aria-disabled\"]) {\n    return Object.assign(target, Object.fromEntries(Object.keys(eventHandlers).map((eventName) => [eventName, void 0])));\n  }\n  for (let eventName in eventHandlers) {\n    Object.assign(target, {\n      [eventName](event, ...args) {\n        let handlers = eventHandlers[eventName];\n        for (let handler of handlers) {\n          if ((event instanceof Event || (event == null ? void 0 : event.nativeEvent) instanceof Event) && event.defaultPrevented) {\n            return;\n          }\n          handler(event, ...args);\n        }\n      }\n    });\n  }\n  return target;\n}\nfunction forwardRefWithAs(component) {\n  var _a2;\n  return Object.assign((0, import_react13.forwardRef)(component), {\n    displayName: (_a2 = component.displayName) != null ? _a2 : component.name\n  });\n}\nfunction compact(object) {\n  let clone = Object.assign({}, object);\n  for (let key in clone) {\n    if (clone[key] === void 0)\n      delete clone[key];\n  }\n  return clone;\n}\nfunction omit(object, keysToOmit = []) {\n  let clone = Object.assign({}, object);\n  for (let key of keysToOmit) {\n    if (key in clone)\n      delete clone[key];\n  }\n  return clone;\n}\n\n// src/utils/bugs.ts\nfunction isDisabledReactIssue7711(element) {\n  let parent = element.parentElement;\n  let legend = null;\n  while (parent && !(parent instanceof HTMLFieldSetElement)) {\n    if (parent instanceof HTMLLegendElement)\n      legend = parent;\n    parent = parent.parentElement;\n  }\n  let isParentDisabled = (parent == null ? void 0 : parent.getAttribute(\"disabled\")) === \"\";\n  if (isParentDisabled && isFirstLegend(legend))\n    return false;\n  return isParentDisabled;\n}\nfunction isFirstLegend(element) {\n  if (!element)\n    return false;\n  let previous = element.previousElementSibling;\n  while (previous !== null) {\n    if (previous instanceof HTMLLegendElement)\n      return false;\n    previous = previous.previousElementSibling;\n  }\n  return true;\n}\n\n// src/utils/form.ts\nfunction objectToFormEntries(source = {}, parentKey = null, entries = []) {\n  for (let [key, value] of Object.entries(source)) {\n    append(entries, composeKey(parentKey, key), value);\n  }\n  return entries;\n}\nfunction composeKey(parent, key) {\n  return parent ? parent + \"[\" + key + \"]\" : key;\n}\nfunction append(entries, key, value) {\n  if (Array.isArray(value)) {\n    for (let [subkey, subvalue] of value.entries()) {\n      append(entries, composeKey(key, subkey.toString()), subvalue);\n    }\n  } else if (value instanceof Date) {\n    entries.push([key, value.toISOString()]);\n  } else if (typeof value === \"boolean\") {\n    entries.push([key, value ? \"1\" : \"0\"]);\n  } else if (typeof value === \"string\") {\n    entries.push([key, value]);\n  } else if (typeof value === \"number\") {\n    entries.push([key, `${value}`]);\n  } else if (value === null || value === void 0) {\n    entries.push([key, \"\"]);\n  } else {\n    objectToFormEntries(value, key, entries);\n  }\n}\nfunction attemptSubmit(element) {\n  var _a2;\n  let form = (_a2 = element == null ? void 0 : element.form) != null ? _a2 : element.closest(\"form\");\n  if (!form)\n    return;\n  for (let element2 of form.elements) {\n    if (element2.tagName === \"INPUT\" && element2.type === \"submit\" || element2.tagName === \"BUTTON\" && element2.type === \"submit\" || element2.nodeName === \"INPUT\" && element2.type === \"image\") {\n      element2.click();\n      return;\n    }\n  }\n}\n\n// src/internal/hidden.tsx\nvar DEFAULT_VISUALLY_HIDDEN_TAG = \"div\";\nvar Hidden = forwardRefWithAs(function VisuallyHidden(props, ref) {\n  let { features = 1 /* None */, ...theirProps } = props;\n  let ourProps = {\n    ref,\n    \"aria-hidden\": (features & 2 /* Focusable */) === 2 /* Focusable */ ? true : void 0,\n    style: {\n      position: \"fixed\",\n      top: 1,\n      left: 1,\n      width: 1,\n      height: 0,\n      padding: 0,\n      margin: -1,\n      overflow: \"hidden\",\n      clip: \"rect(0, 0, 0, 0)\",\n      whiteSpace: \"nowrap\",\n      borderWidth: \"0\",\n      ...(features & 4 /* Hidden */) === 4 /* Hidden */ && !((features & 2 /* Focusable */) === 2 /* Focusable */) && { display: \"none\" }\n    }\n  };\n  return render({\n    ourProps,\n    theirProps,\n    slot: {},\n    defaultTag: DEFAULT_VISUALLY_HIDDEN_TAG,\n    name: \"Hidden\"\n  });\n});\n\n// src/internal/open-closed.tsx\nvar import_react14 = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"), 1);\nvar Context = (0, import_react14.createContext)(null);\nContext.displayName = \"OpenClosedContext\";\nfunction useOpenClosed() {\n  return (0, import_react14.useContext)(Context);\n}\nfunction OpenClosedProvider({ value, children }) {\n  return /* @__PURE__ */ import_react14.default.createElement(Context.Provider, {\n    value\n  }, children);\n}\n\n// src/hooks/use-controllable.ts\nvar import_react15 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nfunction useControllable(controlledValue, onChange, defaultValue) {\n  let [internalValue, setInternalValue] = (0, import_react15.useState)(defaultValue);\n  let isControlled = controlledValue !== void 0;\n  return [\n    isControlled ? controlledValue : internalValue,\n    useEvent((value) => {\n      if (isControlled) {\n        return onChange == null ? void 0 : onChange(value);\n      } else {\n        setInternalValue(value);\n        return onChange == null ? void 0 : onChange(value);\n      }\n    })\n  ];\n}\n\n// src/hooks/use-watch.ts\nvar import_react16 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nfunction useWatch(cb, dependencies) {\n  let track = (0, import_react16.useRef)([]);\n  let action = useEvent(cb);\n  (0, import_react16.useEffect)(() => {\n    let oldValues = [...track.current];\n    for (let [idx, value] of dependencies.entries()) {\n      if (track.current[idx] !== value) {\n        let returnValue = action(dependencies, oldValues);\n        track.current = dependencies;\n        return returnValue;\n      }\n    }\n  }, [action, ...dependencies]);\n}\n\n// src/components/combobox/combobox.tsx\nfunction adjustOrderedState(state2, adjustment = (i) => i) {\n  let currentActiveOption = state2.activeOptionIndex !== null ? state2.options[state2.activeOptionIndex] : null;\n  let sortedOptions = sortByDomNode(adjustment(state2.options.slice()), (option) => option.dataRef.current.domRef.current);\n  let adjustedActiveOptionIndex = currentActiveOption ? sortedOptions.indexOf(currentActiveOption) : null;\n  if (adjustedActiveOptionIndex === -1) {\n    adjustedActiveOptionIndex = null;\n  }\n  return {\n    options: sortedOptions,\n    activeOptionIndex: adjustedActiveOptionIndex\n  };\n}\nvar reducers = {\n  [1 /* CloseCombobox */](state2) {\n    if (state2.dataRef.current.disabled)\n      return state2;\n    if (state2.comboboxState === 1 /* Closed */)\n      return state2;\n    return { ...state2, activeOptionIndex: null, comboboxState: 1 /* Closed */ };\n  },\n  [0 /* OpenCombobox */](state2) {\n    if (state2.dataRef.current.disabled)\n      return state2;\n    if (state2.comboboxState === 0 /* Open */)\n      return state2;\n    let activeOptionIndex = state2.activeOptionIndex;\n    let { isSelected } = state2.dataRef.current;\n    let optionIdx = state2.options.findIndex((option) => isSelected(option.dataRef.current.value));\n    if (optionIdx !== -1) {\n      activeOptionIndex = optionIdx;\n    }\n    return { ...state2, comboboxState: 0 /* Open */, activeOptionIndex };\n  },\n  [2 /* GoToOption */](state2, action) {\n    var _a2;\n    if (state2.dataRef.current.disabled)\n      return state2;\n    if (state2.dataRef.current.optionsRef.current && !state2.dataRef.current.optionsPropsRef.current.static && state2.comboboxState === 1 /* Closed */) {\n      return state2;\n    }\n    let adjustedState = adjustOrderedState(state2);\n    if (adjustedState.activeOptionIndex === null) {\n      let localActiveOptionIndex = adjustedState.options.findIndex((option) => !option.dataRef.current.disabled);\n      if (localActiveOptionIndex !== -1) {\n        adjustedState.activeOptionIndex = localActiveOptionIndex;\n      }\n    }\n    let activeOptionIndex = calculateActiveIndex(action, {\n      resolveItems: () => adjustedState.options,\n      resolveActiveIndex: () => adjustedState.activeOptionIndex,\n      resolveId: (item) => item.id,\n      resolveDisabled: (item) => item.dataRef.current.disabled\n    });\n    return {\n      ...state2,\n      ...adjustedState,\n      activeOptionIndex,\n      activationTrigger: (_a2 = action.trigger) != null ? _a2 : 1 /* Other */\n    };\n  },\n  [3 /* RegisterOption */]: (state2, action) => {\n    let option = { id: action.id, dataRef: action.dataRef };\n    let adjustedState = adjustOrderedState(state2, (options) => [...options, option]);\n    if (state2.activeOptionIndex === null) {\n      if (state2.dataRef.current.isSelected(action.dataRef.current.value)) {\n        adjustedState.activeOptionIndex = adjustedState.options.indexOf(option);\n      }\n    }\n    let nextState = {\n      ...state2,\n      ...adjustedState,\n      activationTrigger: 1 /* Other */\n    };\n    if (state2.dataRef.current.__demoMode && state2.dataRef.current.value === void 0) {\n      nextState.activeOptionIndex = 0;\n    }\n    return nextState;\n  },\n  [4 /* UnregisterOption */]: (state2, action) => {\n    let adjustedState = adjustOrderedState(state2, (options) => {\n      let idx = options.findIndex((a) => a.id === action.id);\n      if (idx !== -1)\n        options.splice(idx, 1);\n      return options;\n    });\n    return {\n      ...state2,\n      ...adjustedState,\n      activationTrigger: 1 /* Other */\n    };\n  },\n  [5 /* RegisterLabel */]: (state2, action) => {\n    return {\n      ...state2,\n      labelId: action.id\n    };\n  }\n};\nvar ComboboxActionsContext = (0, import_react17.createContext)(null);\nComboboxActionsContext.displayName = \"ComboboxActionsContext\";\nfunction useActions(component) {\n  let context = (0, import_react17.useContext)(ComboboxActionsContext);\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <Combobox /> component.`);\n    if (Error.captureStackTrace)\n      Error.captureStackTrace(err, useActions);\n    throw err;\n  }\n  return context;\n}\nvar ComboboxDataContext = (0, import_react17.createContext)(null);\nComboboxDataContext.displayName = \"ComboboxDataContext\";\nfunction useData(component) {\n  let context = (0, import_react17.useContext)(ComboboxDataContext);\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <Combobox /> component.`);\n    if (Error.captureStackTrace)\n      Error.captureStackTrace(err, useData);\n    throw err;\n  }\n  return context;\n}\nfunction stateReducer(state2, action) {\n  return match(action.type, reducers, state2, action);\n}\nvar DEFAULT_COMBOBOX_TAG = import_react17.Fragment;\nfunction ComboboxFn(props, ref) {\n  let {\n    value: controlledValue,\n    defaultValue,\n    onChange: controlledOnChange,\n    name,\n    by = (a, z) => a === z,\n    disabled = false,\n    __demoMode = false,\n    nullable = false,\n    multiple = false,\n    ...theirProps\n  } = props;\n  let [value, theirOnChange] = useControllable(controlledValue, controlledOnChange, defaultValue);\n  let [state2, dispatch] = (0, import_react17.useReducer)(stateReducer, {\n    dataRef: (0, import_react17.createRef)(),\n    comboboxState: __demoMode ? 0 /* Open */ : 1 /* Closed */,\n    options: [],\n    activeOptionIndex: null,\n    activationTrigger: 1 /* Other */,\n    labelId: null\n  });\n  let defaultToFirstOption = (0, import_react17.useRef)(false);\n  let optionsPropsRef = (0, import_react17.useRef)({ static: false, hold: false });\n  let labelRef = (0, import_react17.useRef)(null);\n  let inputRef = (0, import_react17.useRef)(null);\n  let buttonRef = (0, import_react17.useRef)(null);\n  let optionsRef = (0, import_react17.useRef)(null);\n  let compare = useEvent(typeof by === \"string\" ? (a, z) => {\n    let property = by;\n    return (a == null ? void 0 : a[property]) === (z == null ? void 0 : z[property]);\n  } : by);\n  let isSelected = (0, import_react17.useCallback)((compareValue) => match(data.mode, {\n    [1 /* Multi */]: () => value.some((option) => compare(option, compareValue)),\n    [0 /* Single */]: () => compare(value, compareValue)\n  }), [value]);\n  let data = (0, import_react17.useMemo)(() => ({\n    ...state2,\n    optionsPropsRef,\n    labelRef,\n    inputRef,\n    buttonRef,\n    optionsRef,\n    value,\n    disabled,\n    mode: multiple ? 1 /* Multi */ : 0 /* Single */,\n    get activeOptionIndex() {\n      if (defaultToFirstOption.current && state2.activeOptionIndex === null && state2.options.length > 0) {\n        let localActiveOptionIndex = state2.options.findIndex((option) => !option.dataRef.current.disabled);\n        if (localActiveOptionIndex !== -1) {\n          return localActiveOptionIndex;\n        }\n      }\n      return state2.activeOptionIndex;\n    },\n    compare,\n    isSelected,\n    nullable,\n    __demoMode\n  }), [value, disabled, multiple, nullable, __demoMode, state2]);\n  useIsoMorphicEffect(() => {\n    state2.dataRef.current = data;\n  }, [data]);\n  useOutsideClick([data.buttonRef, data.inputRef, data.optionsRef], () => dispatch({ type: 1 /* CloseCombobox */ }), data.comboboxState === 0 /* Open */);\n  let slot = (0, import_react17.useMemo)(() => ({\n    open: data.comboboxState === 0 /* Open */,\n    disabled,\n    activeIndex: data.activeOptionIndex,\n    activeOption: data.activeOptionIndex === null ? null : data.options[data.activeOptionIndex].dataRef.current.value,\n    value\n  }), [data, disabled, value]);\n  let selectOption = useEvent((id2) => {\n    let option = data.options.find((item) => item.id === id2);\n    if (!option)\n      return;\n    onChange(option.dataRef.current.value);\n  });\n  let selectActiveOption = useEvent(() => {\n    if (data.activeOptionIndex !== null) {\n      let { dataRef, id: id2 } = data.options[data.activeOptionIndex];\n      onChange(dataRef.current.value);\n      dispatch({ type: 2 /* GoToOption */, focus: 4 /* Specific */, id: id2 });\n    }\n  });\n  let openCombobox = useEvent(() => {\n    dispatch({ type: 0 /* OpenCombobox */ });\n    defaultToFirstOption.current = true;\n  });\n  let closeCombobox = useEvent(() => {\n    dispatch({ type: 1 /* CloseCombobox */ });\n    defaultToFirstOption.current = false;\n  });\n  let goToOption = useEvent((focus, id2, trigger) => {\n    defaultToFirstOption.current = false;\n    if (focus === 4 /* Specific */) {\n      return dispatch({ type: 2 /* GoToOption */, focus: 4 /* Specific */, id: id2, trigger });\n    }\n    return dispatch({ type: 2 /* GoToOption */, focus, trigger });\n  });\n  let registerOption = useEvent((id2, dataRef) => {\n    dispatch({ type: 3 /* RegisterOption */, id: id2, dataRef });\n    return () => dispatch({ type: 4 /* UnregisterOption */, id: id2 });\n  });\n  let registerLabel = useEvent((id2) => {\n    dispatch({ type: 5 /* RegisterLabel */, id: id2 });\n    return () => dispatch({ type: 5 /* RegisterLabel */, id: null });\n  });\n  let onChange = useEvent((value2) => {\n    return match(data.mode, {\n      [0 /* Single */]() {\n        return theirOnChange == null ? void 0 : theirOnChange(value2);\n      },\n      [1 /* Multi */]() {\n        let copy = data.value.slice();\n        let idx = copy.findIndex((item) => compare(item, value2));\n        if (idx === -1) {\n          copy.push(value2);\n        } else {\n          copy.splice(idx, 1);\n        }\n        return theirOnChange == null ? void 0 : theirOnChange(copy);\n      }\n    });\n  });\n  let actions = (0, import_react17.useMemo)(() => ({\n    onChange,\n    registerOption,\n    registerLabel,\n    goToOption,\n    closeCombobox,\n    openCombobox,\n    selectActiveOption,\n    selectOption\n  }), []);\n  let ourProps = ref === null ? {} : { ref };\n  return /* @__PURE__ */ import_react17.default.createElement(ComboboxActionsContext.Provider, {\n    value: actions\n  }, /* @__PURE__ */ import_react17.default.createElement(ComboboxDataContext.Provider, {\n    value: data\n  }, /* @__PURE__ */ import_react17.default.createElement(OpenClosedProvider, {\n    value: match(data.comboboxState, {\n      [0 /* Open */]: 0 /* Open */,\n      [1 /* Closed */]: 1 /* Closed */\n    })\n  }, name != null && value != null && objectToFormEntries({ [name]: value }).map(([name2, value2]) => /* @__PURE__ */ import_react17.default.createElement(Hidden, {\n    features: 4 /* Hidden */,\n    ...compact({\n      key: name2,\n      as: \"input\",\n      type: \"hidden\",\n      hidden: true,\n      readOnly: true,\n      name: name2,\n      value: value2\n    })\n  })), render({\n    ourProps,\n    theirProps,\n    slot,\n    defaultTag: DEFAULT_COMBOBOX_TAG,\n    name: \"Combobox\"\n  }))));\n}\nvar ComboboxRoot = forwardRefWithAs(ComboboxFn);\nvar DEFAULT_INPUT_TAG = \"input\";\nvar Input = forwardRefWithAs(function Input2(props, ref) {\n  var _a2, _b;\n  let { value, onChange, displayValue, type = \"text\", ...theirProps } = props;\n  let data = useData(\"Combobox.Input\");\n  let actions = useActions(\"Combobox.Input\");\n  let inputRef = useSyncRefs(data.inputRef, ref);\n  let id2 = `headlessui-combobox-input-${useId()}`;\n  let d = useDisposables();\n  let currentValue = (0, import_react17.useMemo)(() => {\n    var _a3;\n    if (typeof displayValue === \"function\") {\n      return (_a3 = displayValue(data.value)) != null ? _a3 : \"\";\n    } else if (typeof data.value === \"string\") {\n      return data.value;\n    } else {\n      return \"\";\n    }\n  }, [data.value]);\n  useWatch(([currentValue2, state2], [oldCurrentValue, oldState]) => {\n    if (!data.inputRef.current)\n      return;\n    if (oldState === 0 /* Open */ && state2 === 1 /* Closed */) {\n      data.inputRef.current.value = currentValue2;\n    } else if (currentValue2 !== oldCurrentValue) {\n      data.inputRef.current.value = currentValue2;\n    }\n  }, [currentValue, data.comboboxState]);\n  let handleKeyDown = useEvent((event) => {\n    switch (event.key) {\n      case \"Backspace\" /* Backspace */:\n      case \"Delete\" /* Delete */:\n        if (data.mode !== 0 /* Single */)\n          return;\n        if (!data.nullable)\n          return;\n        let input = event.currentTarget;\n        d.requestAnimationFrame(() => {\n          if (input.value === \"\") {\n            actions.onChange(null);\n            if (data.optionsRef.current) {\n              data.optionsRef.current.scrollTop = 0;\n            }\n            actions.goToOption(5 /* Nothing */);\n          }\n        });\n        break;\n      case \"Enter\" /* Enter */:\n        if (data.comboboxState !== 0 /* Open */)\n          return;\n        if (event.nativeEvent.isComposing)\n          return;\n        event.preventDefault();\n        event.stopPropagation();\n        if (data.activeOptionIndex === null) {\n          actions.closeCombobox();\n          return;\n        }\n        actions.selectActiveOption();\n        if (data.mode === 0 /* Single */) {\n          actions.closeCombobox();\n        }\n        break;\n      case \"ArrowDown\" /* ArrowDown */:\n        event.preventDefault();\n        event.stopPropagation();\n        return match(data.comboboxState, {\n          [0 /* Open */]: () => {\n            actions.goToOption(2 /* Next */);\n          },\n          [1 /* Closed */]: () => {\n            actions.openCombobox();\n          }\n        });\n      case \"ArrowUp\" /* ArrowUp */:\n        event.preventDefault();\n        event.stopPropagation();\n        return match(data.comboboxState, {\n          [0 /* Open */]: () => {\n            actions.goToOption(1 /* Previous */);\n          },\n          [1 /* Closed */]: () => {\n            actions.openCombobox();\n            d.nextFrame(() => {\n              if (!data.value) {\n                actions.goToOption(3 /* Last */);\n              }\n            });\n          }\n        });\n      case \"Home\" /* Home */:\n      case \"PageUp\" /* PageUp */:\n        event.preventDefault();\n        event.stopPropagation();\n        return actions.goToOption(0 /* First */);\n      case \"End\" /* End */:\n      case \"PageDown\" /* PageDown */:\n        event.preventDefault();\n        event.stopPropagation();\n        return actions.goToOption(3 /* Last */);\n      case \"Escape\" /* Escape */:\n        if (data.comboboxState !== 0 /* Open */)\n          return;\n        event.preventDefault();\n        if (data.optionsRef.current && !data.optionsPropsRef.current.static) {\n          event.stopPropagation();\n        }\n        return actions.closeCombobox();\n      case \"Tab\" /* Tab */:\n        if (data.comboboxState !== 0 /* Open */)\n          return;\n        if (data.mode === 0 /* Single */)\n          actions.selectActiveOption();\n        actions.closeCombobox();\n        break;\n    }\n  });\n  let handleChange = useEvent((event) => {\n    actions.openCombobox();\n    onChange == null ? void 0 : onChange(event);\n  });\n  let labelledby = useComputed(() => {\n    if (!data.labelId)\n      return void 0;\n    return [data.labelId].join(\" \");\n  }, [data.labelId]);\n  let slot = (0, import_react17.useMemo)(() => ({ open: data.comboboxState === 0 /* Open */, disabled: data.disabled }), [data]);\n  let ourProps = {\n    ref: inputRef,\n    id: id2,\n    role: \"combobox\",\n    type,\n    \"aria-controls\": (_a2 = data.optionsRef.current) == null ? void 0 : _a2.id,\n    \"aria-expanded\": data.disabled ? void 0 : data.comboboxState === 0 /* Open */,\n    \"aria-activedescendant\": data.activeOptionIndex === null ? void 0 : (_b = data.options[data.activeOptionIndex]) == null ? void 0 : _b.id,\n    \"aria-multiselectable\": data.mode === 1 /* Multi */ ? true : void 0,\n    \"aria-labelledby\": labelledby,\n    disabled: data.disabled,\n    onKeyDown: handleKeyDown,\n    onChange: handleChange\n  };\n  return render({\n    ourProps,\n    theirProps,\n    slot,\n    defaultTag: DEFAULT_INPUT_TAG,\n    name: \"Combobox.Input\"\n  });\n});\nvar DEFAULT_BUTTON_TAG = \"button\";\nvar Button = forwardRefWithAs(function Button2(props, ref) {\n  var _a2;\n  let data = useData(\"Combobox.Button\");\n  let actions = useActions(\"Combobox.Button\");\n  let buttonRef = useSyncRefs(data.buttonRef, ref);\n  let id2 = `headlessui-combobox-button-${useId()}`;\n  let d = useDisposables();\n  let handleKeyDown = useEvent((event) => {\n    switch (event.key) {\n      case \"ArrowDown\" /* ArrowDown */:\n        event.preventDefault();\n        event.stopPropagation();\n        if (data.comboboxState === 1 /* Closed */) {\n          actions.openCombobox();\n        }\n        return d.nextFrame(() => {\n          var _a3;\n          return (_a3 = data.inputRef.current) == null ? void 0 : _a3.focus({ preventScroll: true });\n        });\n      case \"ArrowUp\" /* ArrowUp */:\n        event.preventDefault();\n        event.stopPropagation();\n        if (data.comboboxState === 1 /* Closed */) {\n          actions.openCombobox();\n          d.nextFrame(() => {\n            if (!data.value) {\n              actions.goToOption(3 /* Last */);\n            }\n          });\n        }\n        return d.nextFrame(() => {\n          var _a3;\n          return (_a3 = data.inputRef.current) == null ? void 0 : _a3.focus({ preventScroll: true });\n        });\n      case \"Escape\" /* Escape */:\n        if (data.comboboxState !== 0 /* Open */)\n          return;\n        event.preventDefault();\n        if (data.optionsRef.current && !data.optionsPropsRef.current.static) {\n          event.stopPropagation();\n        }\n        actions.closeCombobox();\n        return d.nextFrame(() => {\n          var _a3;\n          return (_a3 = data.inputRef.current) == null ? void 0 : _a3.focus({ preventScroll: true });\n        });\n      default:\n        return;\n    }\n  });\n  let handleClick = useEvent((event) => {\n    if (isDisabledReactIssue7711(event.currentTarget))\n      return event.preventDefault();\n    if (data.comboboxState === 0 /* Open */) {\n      actions.closeCombobox();\n    } else {\n      event.preventDefault();\n      actions.openCombobox();\n    }\n    d.nextFrame(() => {\n      var _a3;\n      return (_a3 = data.inputRef.current) == null ? void 0 : _a3.focus({ preventScroll: true });\n    });\n  });\n  let labelledby = useComputed(() => {\n    if (!data.labelId)\n      return void 0;\n    return [data.labelId, id2].join(\" \");\n  }, [data.labelId, id2]);\n  let slot = (0, import_react17.useMemo)(() => ({\n    open: data.comboboxState === 0 /* Open */,\n    disabled: data.disabled,\n    value: data.value\n  }), [data]);\n  let theirProps = props;\n  let ourProps = {\n    ref: buttonRef,\n    id: id2,\n    type: useResolveButtonType(props, data.buttonRef),\n    tabIndex: -1,\n    \"aria-haspopup\": true,\n    \"aria-controls\": (_a2 = data.optionsRef.current) == null ? void 0 : _a2.id,\n    \"aria-expanded\": data.disabled ? void 0 : data.comboboxState === 0 /* Open */,\n    \"aria-labelledby\": labelledby,\n    disabled: data.disabled,\n    onClick: handleClick,\n    onKeyDown: handleKeyDown\n  };\n  return render({\n    ourProps,\n    theirProps,\n    slot,\n    defaultTag: DEFAULT_BUTTON_TAG,\n    name: \"Combobox.Button\"\n  });\n});\nvar DEFAULT_LABEL_TAG = \"label\";\nvar Label = forwardRefWithAs(function Label2(props, ref) {\n  let data = useData(\"Combobox.Label\");\n  let id2 = `headlessui-combobox-label-${useId()}`;\n  let actions = useActions(\"Combobox.Label\");\n  let labelRef = useSyncRefs(data.labelRef, ref);\n  useIsoMorphicEffect(() => actions.registerLabel(id2), [id2]);\n  let handleClick = useEvent(() => {\n    var _a2;\n    return (_a2 = data.inputRef.current) == null ? void 0 : _a2.focus({ preventScroll: true });\n  });\n  let slot = (0, import_react17.useMemo)(() => ({ open: data.comboboxState === 0 /* Open */, disabled: data.disabled }), [data]);\n  let theirProps = props;\n  let ourProps = { ref: labelRef, id: id2, onClick: handleClick };\n  return render({\n    ourProps,\n    theirProps,\n    slot,\n    defaultTag: DEFAULT_LABEL_TAG,\n    name: \"Combobox.Label\"\n  });\n});\nvar DEFAULT_OPTIONS_TAG = \"ul\";\nvar OptionsRenderFeatures = 1 /* RenderStrategy */ | 2 /* Static */;\nvar Options = forwardRefWithAs(function Options2(props, ref) {\n  var _a2;\n  let { hold = false, ...theirProps } = props;\n  let data = useData(\"Combobox.Options\");\n  let optionsRef = useSyncRefs(data.optionsRef, ref);\n  let id2 = `headlessui-combobox-options-${useId()}`;\n  let usesOpenClosedState = useOpenClosed();\n  let visible = (() => {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === 0 /* Open */;\n    }\n    return data.comboboxState === 0 /* Open */;\n  })();\n  useIsoMorphicEffect(() => {\n    var _a3;\n    data.optionsPropsRef.current.static = (_a3 = props.static) != null ? _a3 : false;\n  }, [data.optionsPropsRef, props.static]);\n  useIsoMorphicEffect(() => {\n    data.optionsPropsRef.current.hold = hold;\n  }, [data.optionsPropsRef, hold]);\n  useTreeWalker({\n    container: data.optionsRef.current,\n    enabled: data.comboboxState === 0 /* Open */,\n    accept(node) {\n      if (node.getAttribute(\"role\") === \"option\")\n        return NodeFilter.FILTER_REJECT;\n      if (node.hasAttribute(\"role\"))\n        return NodeFilter.FILTER_SKIP;\n      return NodeFilter.FILTER_ACCEPT;\n    },\n    walk(node) {\n      node.setAttribute(\"role\", \"none\");\n    }\n  });\n  let labelledby = useComputed(() => {\n    var _a3, _b;\n    return (_b = data.labelId) != null ? _b : (_a3 = data.buttonRef.current) == null ? void 0 : _a3.id;\n  }, [data.labelId, data.buttonRef.current]);\n  let slot = (0, import_react17.useMemo)(() => ({ open: data.comboboxState === 0 /* Open */ }), [data]);\n  let ourProps = {\n    \"aria-activedescendant\": data.activeOptionIndex === null ? void 0 : (_a2 = data.options[data.activeOptionIndex]) == null ? void 0 : _a2.id,\n    \"aria-labelledby\": labelledby,\n    role: \"listbox\",\n    id: id2,\n    ref: optionsRef\n  };\n  return render({\n    ourProps,\n    theirProps,\n    slot,\n    defaultTag: DEFAULT_OPTIONS_TAG,\n    features: OptionsRenderFeatures,\n    visible,\n    name: \"Combobox.Options\"\n  });\n});\nvar DEFAULT_OPTION_TAG = \"li\";\nvar Option = forwardRefWithAs(function Option2(props, ref) {\n  var _a2, _b;\n  let { disabled = false, value, ...theirProps } = props;\n  let data = useData(\"Combobox.Option\");\n  let actions = useActions(\"Combobox.Option\");\n  let id2 = `headlessui-combobox-option-${useId()}`;\n  let active = data.activeOptionIndex !== null ? data.options[data.activeOptionIndex].id === id2 : false;\n  let selected = data.isSelected(value);\n  let internalOptionRef = (0, import_react17.useRef)(null);\n  let bag = useLatestValue({\n    disabled,\n    value,\n    domRef: internalOptionRef,\n    textValue: (_b = (_a2 = internalOptionRef.current) == null ? void 0 : _a2.textContent) == null ? void 0 : _b.toLowerCase()\n  });\n  let optionRef = useSyncRefs(ref, internalOptionRef);\n  let select = useEvent(() => actions.selectOption(id2));\n  useIsoMorphicEffect(() => actions.registerOption(id2, bag), [bag, id2]);\n  let enableScrollIntoView = (0, import_react17.useRef)(data.__demoMode ? false : true);\n  useIsoMorphicEffect(() => {\n    if (!data.__demoMode)\n      return;\n    let d = disposables();\n    d.requestAnimationFrame(() => {\n      enableScrollIntoView.current = true;\n    });\n    return d.dispose;\n  }, []);\n  useIsoMorphicEffect(() => {\n    if (data.comboboxState !== 0 /* Open */)\n      return;\n    if (!active)\n      return;\n    if (!enableScrollIntoView.current)\n      return;\n    if (data.activationTrigger === 0 /* Pointer */)\n      return;\n    let d = disposables();\n    d.requestAnimationFrame(() => {\n      var _a3, _b2;\n      (_b2 = (_a3 = internalOptionRef.current) == null ? void 0 : _a3.scrollIntoView) == null ? void 0 : _b2.call(_a3, { block: \"nearest\" });\n    });\n    return d.dispose;\n  }, [internalOptionRef, active, data.comboboxState, data.activationTrigger, data.activeOptionIndex]);\n  let handleClick = useEvent((event) => {\n    if (disabled)\n      return event.preventDefault();\n    select();\n    if (data.mode === 0 /* Single */) {\n      actions.closeCombobox();\n    }\n  });\n  let handleFocus = useEvent(() => {\n    if (disabled)\n      return actions.goToOption(5 /* Nothing */);\n    actions.goToOption(4 /* Specific */, id2);\n  });\n  let handleMove = useEvent(() => {\n    if (disabled)\n      return;\n    if (active)\n      return;\n    actions.goToOption(4 /* Specific */, id2, 0 /* Pointer */);\n  });\n  let handleLeave = useEvent(() => {\n    if (disabled)\n      return;\n    if (!active)\n      return;\n    if (data.optionsPropsRef.current.hold)\n      return;\n    actions.goToOption(5 /* Nothing */);\n  });\n  let slot = (0, import_react17.useMemo)(() => ({ active, selected, disabled }), [active, selected, disabled]);\n  let ourProps = {\n    id: id2,\n    ref: optionRef,\n    role: \"option\",\n    tabIndex: disabled === true ? void 0 : -1,\n    \"aria-disabled\": disabled === true ? true : void 0,\n    \"aria-selected\": selected,\n    disabled: void 0,\n    onClick: handleClick,\n    onFocus: handleFocus,\n    onPointerMove: handleMove,\n    onMouseMove: handleMove,\n    onPointerLeave: handleLeave,\n    onMouseLeave: handleLeave\n  };\n  return render({\n    ourProps,\n    theirProps,\n    slot,\n    defaultTag: DEFAULT_OPTION_TAG,\n    name: \"Combobox.Option\"\n  });\n});\nvar Combobox = Object.assign(ComboboxRoot, { Input, Button, Label, Options, Option });\n\n// src/components/dialog/dialog.tsx\nvar import_react28 = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"), 1);\n\n// src/components/focus-trap/focus-trap.tsx\nvar import_react23 = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"), 1);\n\n// src/hooks/use-tab-direction.ts\nvar import_react19 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n// src/hooks/use-window-event.ts\nvar import_react18 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nfunction useWindowEvent(type, listener, options) {\n  let listenerRef = useLatestValue(listener);\n  (0, import_react18.useEffect)(() => {\n    function handler(event) {\n      listenerRef.current(event);\n    }\n    window.addEventListener(type, handler, options);\n    return () => window.removeEventListener(type, handler, options);\n  }, [type, options]);\n}\n\n// src/hooks/use-tab-direction.ts\nfunction useTabDirection() {\n  let direction = (0, import_react19.useRef)(0 /* Forwards */);\n  useWindowEvent(\"keydown\", (event) => {\n    if (event.key === \"Tab\") {\n      direction.current = event.shiftKey ? 1 /* Backwards */ : 0 /* Forwards */;\n    }\n  }, true);\n  return direction;\n}\n\n// src/hooks/use-is-mounted.ts\nvar import_react20 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nfunction useIsMounted() {\n  let mounted = (0, import_react20.useRef)(false);\n  useIsoMorphicEffect(() => {\n    mounted.current = true;\n    return () => {\n      mounted.current = false;\n    };\n  }, []);\n  return mounted;\n}\n\n// src/hooks/use-owner.ts\nvar import_react21 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nfunction useOwnerDocument(...args) {\n  return (0, import_react21.useMemo)(() => getOwnerDocument(...args), [...args]);\n}\n\n// src/hooks/use-event-listener.ts\nvar import_react22 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nfunction useEventListener(element, type, listener, options) {\n  let listenerRef = useLatestValue(listener);\n  (0, import_react22.useEffect)(() => {\n    element = element != null ? element : window;\n    function handler(event) {\n      listenerRef.current(event);\n    }\n    element.addEventListener(type, handler, options);\n    return () => element.removeEventListener(type, handler, options);\n  }, [element, type, options]);\n}\n\n// src/components/focus-trap/focus-trap.tsx\nvar DEFAULT_FOCUS_TRAP_TAG = \"div\";\nvar Features3 = /* @__PURE__ */ ((Features4) => {\n  Features4[Features4[\"None\"] = 1] = \"None\";\n  Features4[Features4[\"InitialFocus\"] = 2] = \"InitialFocus\";\n  Features4[Features4[\"TabLock\"] = 4] = \"TabLock\";\n  Features4[Features4[\"FocusLock\"] = 8] = \"FocusLock\";\n  Features4[Features4[\"RestoreFocus\"] = 16] = \"RestoreFocus\";\n  Features4[Features4[\"All\"] = 30] = \"All\";\n  return Features4;\n})(Features3 || {});\nvar FocusTrap = Object.assign(forwardRefWithAs(function FocusTrap2(props, ref) {\n  let container = (0, import_react23.useRef)(null);\n  let focusTrapRef = useSyncRefs(container, ref);\n  let { initialFocus, containers, features = 30 /* All */, ...theirProps } = props;\n  if (!useServerHandoffComplete()) {\n    features = 1 /* None */;\n  }\n  let ownerDocument = useOwnerDocument(container);\n  useRestoreFocus({ ownerDocument }, Boolean(features & 16 /* RestoreFocus */));\n  let previousActiveElement = useInitialFocus({ ownerDocument, container, initialFocus }, Boolean(features & 2 /* InitialFocus */));\n  useFocusLock({ ownerDocument, container, containers, previousActiveElement }, Boolean(features & 8 /* FocusLock */));\n  let direction = useTabDirection();\n  let handleFocus = useEvent(() => {\n    let el = container.current;\n    if (!el)\n      return;\n    if (false) {} else {\n      match(direction.current, {\n        [0 /* Forwards */]: () => focusIn(el, 1 /* First */),\n        [1 /* Backwards */]: () => focusIn(el, 8 /* Last */)\n      });\n    }\n  });\n  let ourProps = { ref: focusTrapRef };\n  return /* @__PURE__ */ import_react23.default.createElement(import_react23.default.Fragment, null, Boolean(features & 4 /* TabLock */) && /* @__PURE__ */ import_react23.default.createElement(Hidden, {\n    as: \"button\",\n    type: \"button\",\n    onFocus: handleFocus,\n    features: 2 /* Focusable */\n  }), render({\n    ourProps,\n    theirProps,\n    defaultTag: DEFAULT_FOCUS_TRAP_TAG,\n    name: \"FocusTrap\"\n  }), Boolean(features & 4 /* TabLock */) && /* @__PURE__ */ import_react23.default.createElement(Hidden, {\n    as: \"button\",\n    type: \"button\",\n    onFocus: handleFocus,\n    features: 2 /* Focusable */\n  }));\n}), { features: Features3 });\nfunction useRestoreFocus({ ownerDocument }, enabled) {\n  let restoreElement = (0, import_react23.useRef)(null);\n  useEventListener(ownerDocument == null ? void 0 : ownerDocument.defaultView, \"focusout\", (event) => {\n    if (!enabled)\n      return;\n    if (restoreElement.current)\n      return;\n    restoreElement.current = event.target;\n  }, true);\n  useWatch(() => {\n    if (enabled)\n      return;\n    if ((ownerDocument == null ? void 0 : ownerDocument.activeElement) === (ownerDocument == null ? void 0 : ownerDocument.body)) {\n      focusElement(restoreElement.current);\n    }\n    restoreElement.current = null;\n  }, [enabled]);\n  let trulyUnmounted = (0, import_react23.useRef)(false);\n  (0, import_react23.useEffect)(() => {\n    trulyUnmounted.current = false;\n    return () => {\n      trulyUnmounted.current = true;\n      microTask(() => {\n        if (!trulyUnmounted.current)\n          return;\n        focusElement(restoreElement.current);\n        restoreElement.current = null;\n      });\n    };\n  }, []);\n}\nfunction useInitialFocus({\n  ownerDocument,\n  container,\n  initialFocus\n}, enabled) {\n  let previousActiveElement = (0, import_react23.useRef)(null);\n  let mounted = useIsMounted();\n  useWatch(() => {\n    if (!enabled)\n      return;\n    let containerElement = container.current;\n    if (!containerElement)\n      return;\n    microTask(() => {\n      if (!mounted.current) {\n        return;\n      }\n      let activeElement = ownerDocument == null ? void 0 : ownerDocument.activeElement;\n      if (initialFocus == null ? void 0 : initialFocus.current) {\n        if ((initialFocus == null ? void 0 : initialFocus.current) === activeElement) {\n          previousActiveElement.current = activeElement;\n          return;\n        }\n      } else if (containerElement.contains(activeElement)) {\n        previousActiveElement.current = activeElement;\n        return;\n      }\n      if (initialFocus == null ? void 0 : initialFocus.current) {\n        focusElement(initialFocus.current);\n      } else {\n        if (focusIn(containerElement, 1 /* First */) === 0 /* Error */) {\n          console.warn(\"There are no focusable elements inside the <FocusTrap />\");\n        }\n      }\n      previousActiveElement.current = ownerDocument == null ? void 0 : ownerDocument.activeElement;\n    });\n  }, [enabled]);\n  return previousActiveElement;\n}\nfunction useFocusLock({\n  ownerDocument,\n  container,\n  containers,\n  previousActiveElement\n}, enabled) {\n  let mounted = useIsMounted();\n  useEventListener(ownerDocument == null ? void 0 : ownerDocument.defaultView, \"focus\", (event) => {\n    if (!enabled)\n      return;\n    if (!mounted.current)\n      return;\n    let allContainers = new Set(containers == null ? void 0 : containers.current);\n    allContainers.add(container);\n    let previous = previousActiveElement.current;\n    if (!previous)\n      return;\n    let toElement = event.target;\n    if (toElement && toElement instanceof HTMLElement) {\n      if (!contains(allContainers, toElement)) {\n        event.preventDefault();\n        event.stopPropagation();\n        focusElement(previous);\n      } else {\n        previousActiveElement.current = toElement;\n        focusElement(toElement);\n      }\n    } else {\n      focusElement(previousActiveElement.current);\n    }\n  }, true);\n}\nfunction contains(containers, element) {\n  var _a2;\n  for (let container of containers) {\n    if ((_a2 = container.current) == null ? void 0 : _a2.contains(element))\n      return true;\n  }\n  return false;\n}\n\n// src/hooks/use-inert-others.ts\nvar interactables = /* @__PURE__ */ new Set();\nvar originals = /* @__PURE__ */ new Map();\nfunction inert(element) {\n  element.setAttribute(\"aria-hidden\", \"true\");\n  element.inert = true;\n}\nfunction restore(element) {\n  let original = originals.get(element);\n  if (!original)\n    return;\n  if (original[\"aria-hidden\"] === null)\n    element.removeAttribute(\"aria-hidden\");\n  else\n    element.setAttribute(\"aria-hidden\", original[\"aria-hidden\"]);\n  element.inert = original.inert;\n}\nfunction useInertOthers(container, enabled = true) {\n  useIsoMorphicEffect(() => {\n    if (!enabled)\n      return;\n    if (!container.current)\n      return;\n    let element = container.current;\n    let ownerDocument = getOwnerDocument(element);\n    if (!ownerDocument)\n      return;\n    interactables.add(element);\n    for (let original of originals.keys()) {\n      if (original.contains(element)) {\n        restore(original);\n        originals.delete(original);\n      }\n    }\n    ownerDocument.querySelectorAll(\"body > *\").forEach((child) => {\n      if (!(child instanceof HTMLElement))\n        return;\n      for (let interactable of interactables) {\n        if (child.contains(interactable))\n          return;\n      }\n      if (interactables.size === 1) {\n        originals.set(child, {\n          \"aria-hidden\": child.getAttribute(\"aria-hidden\"),\n          inert: child.inert\n        });\n        inert(child);\n      }\n    });\n    return () => {\n      interactables.delete(element);\n      if (interactables.size > 0) {\n        ownerDocument.querySelectorAll(\"body > *\").forEach((child) => {\n          if (!(child instanceof HTMLElement))\n            return;\n          if (originals.has(child))\n            return;\n          for (let interactable of interactables) {\n            if (child.contains(interactable))\n              return;\n          }\n          originals.set(child, {\n            \"aria-hidden\": child.getAttribute(\"aria-hidden\"),\n            inert: child.inert\n          });\n          inert(child);\n        });\n      } else {\n        for (let element2 of originals.keys()) {\n          restore(element2);\n          originals.delete(element2);\n        }\n      }\n    };\n  }, [enabled]);\n}\n\n// src/components/portal/portal.tsx\nvar import_react25 = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"), 1);\nvar import_react_dom = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n\n// src/internal/portal-force-root.tsx\nvar import_react24 = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"), 1);\nvar ForcePortalRootContext = (0, import_react24.createContext)(false);\nfunction usePortalRoot() {\n  return (0, import_react24.useContext)(ForcePortalRootContext);\n}\nfunction ForcePortalRoot(props) {\n  return /* @__PURE__ */ import_react24.default.createElement(ForcePortalRootContext.Provider, {\n    value: props.force\n  }, props.children);\n}\n\n// src/components/portal/portal.tsx\nfunction usePortalTarget(ref) {\n  let forceInRoot = usePortalRoot();\n  let groupTarget = (0, import_react25.useContext)(PortalGroupContext);\n  let ownerDocument = useOwnerDocument(ref);\n  let [target, setTarget] = (0, import_react25.useState)(() => {\n    if (!forceInRoot && groupTarget !== null)\n      return null;\n    if (isServer)\n      return null;\n    let existingRoot = ownerDocument == null ? void 0 : ownerDocument.getElementById(\"headlessui-portal-root\");\n    if (existingRoot)\n      return existingRoot;\n    if (ownerDocument === null)\n      return null;\n    let root = ownerDocument.createElement(\"div\");\n    root.setAttribute(\"id\", \"headlessui-portal-root\");\n    return ownerDocument.body.appendChild(root);\n  });\n  (0, import_react25.useEffect)(() => {\n    if (target === null)\n      return;\n    if (!(ownerDocument == null ? void 0 : ownerDocument.body.contains(target))) {\n      ownerDocument == null ? void 0 : ownerDocument.body.appendChild(target);\n    }\n  }, [target, ownerDocument]);\n  (0, import_react25.useEffect)(() => {\n    if (forceInRoot)\n      return;\n    if (groupTarget === null)\n      return;\n    setTarget(groupTarget.current);\n  }, [groupTarget, setTarget, forceInRoot]);\n  return target;\n}\nvar DEFAULT_PORTAL_TAG = import_react25.Fragment;\nvar PortalRoot = forwardRefWithAs(function Portal(props, ref) {\n  let theirProps = props;\n  let internalPortalRootRef = (0, import_react25.useRef)(null);\n  let portalRef = useSyncRefs(optionalRef((ref2) => {\n    internalPortalRootRef.current = ref2;\n  }), ref);\n  let ownerDocument = useOwnerDocument(internalPortalRootRef);\n  let target = usePortalTarget(internalPortalRootRef);\n  let [element] = (0, import_react25.useState)(() => {\n    var _a2;\n    return isServer ? null : (_a2 = ownerDocument == null ? void 0 : ownerDocument.createElement(\"div\")) != null ? _a2 : null;\n  });\n  let ready = useServerHandoffComplete();\n  let trulyUnmounted = (0, import_react25.useRef)(false);\n  useIsoMorphicEffect(() => {\n    trulyUnmounted.current = false;\n    if (!target || !element)\n      return;\n    if (!target.contains(element)) {\n      element.setAttribute(\"data-headlessui-portal\", \"\");\n      target.appendChild(element);\n    }\n    return () => {\n      trulyUnmounted.current = true;\n      microTask(() => {\n        var _a2;\n        if (!trulyUnmounted.current)\n          return;\n        if (!target || !element)\n          return;\n        target.removeChild(element);\n        if (target.childNodes.length <= 0) {\n          (_a2 = target.parentElement) == null ? void 0 : _a2.removeChild(target);\n        }\n      });\n    };\n  }, [target, element]);\n  if (!ready)\n    return null;\n  let ourProps = { ref: portalRef };\n  return !target || !element ? null : (0, import_react_dom.createPortal)(render({\n    ourProps,\n    theirProps,\n    defaultTag: DEFAULT_PORTAL_TAG,\n    name: \"Portal\"\n  }), element);\n});\nvar DEFAULT_GROUP_TAG = import_react25.Fragment;\nvar PortalGroupContext = (0, import_react25.createContext)(null);\nvar Group = forwardRefWithAs(function Group2(props, ref) {\n  let { target, ...theirProps } = props;\n  let groupRef = useSyncRefs(ref);\n  let ourProps = { ref: groupRef };\n  return /* @__PURE__ */ import_react25.default.createElement(PortalGroupContext.Provider, {\n    value: target\n  }, render({\n    ourProps,\n    theirProps,\n    defaultTag: DEFAULT_GROUP_TAG,\n    name: \"Popover.Group\"\n  }));\n});\nvar Portal2 = Object.assign(PortalRoot, { Group });\n\n// src/components/description/description.tsx\nvar import_react26 = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"), 1);\nvar DescriptionContext = (0, import_react26.createContext)(null);\nfunction useDescriptionContext() {\n  let context = (0, import_react26.useContext)(DescriptionContext);\n  if (context === null) {\n    let err = new Error(\"You used a <Description /> component, but it is not inside a relevant parent.\");\n    if (Error.captureStackTrace)\n      Error.captureStackTrace(err, useDescriptionContext);\n    throw err;\n  }\n  return context;\n}\nfunction useDescriptions() {\n  let [descriptionIds, setDescriptionIds] = (0, import_react26.useState)([]);\n  return [\n    descriptionIds.length > 0 ? descriptionIds.join(\" \") : void 0,\n    (0, import_react26.useMemo)(() => {\n      return function DescriptionProvider(props) {\n        let register = useEvent((value) => {\n          setDescriptionIds((existing) => [...existing, value]);\n          return () => setDescriptionIds((existing) => {\n            let clone = existing.slice();\n            let idx = clone.indexOf(value);\n            if (idx !== -1)\n              clone.splice(idx, 1);\n            return clone;\n          });\n        });\n        let contextBag = (0, import_react26.useMemo)(() => ({ register, slot: props.slot, name: props.name, props: props.props }), [register, props.slot, props.name, props.props]);\n        return /* @__PURE__ */ import_react26.default.createElement(DescriptionContext.Provider, {\n          value: contextBag\n        }, props.children);\n      };\n    }, [setDescriptionIds])\n  ];\n}\nvar DEFAULT_DESCRIPTION_TAG = \"p\";\nvar Description = forwardRefWithAs(function Description2(props, ref) {\n  let context = useDescriptionContext();\n  let id2 = `headlessui-description-${useId()}`;\n  let descriptionRef = useSyncRefs(ref);\n  useIsoMorphicEffect(() => context.register(id2), [id2, context.register]);\n  let theirProps = props;\n  let ourProps = { ref: descriptionRef, ...context.props, id: id2 };\n  return render({\n    ourProps,\n    theirProps,\n    slot: context.slot || {},\n    defaultTag: DEFAULT_DESCRIPTION_TAG,\n    name: context.name || \"Description\"\n  });\n});\n\n// src/internal/stack-context.tsx\nvar import_react27 = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"), 1);\nvar StackContext = (0, import_react27.createContext)(() => {\n});\nStackContext.displayName = \"StackContext\";\nfunction useStackContext() {\n  return (0, import_react27.useContext)(StackContext);\n}\nfunction StackProvider({\n  children,\n  onUpdate,\n  type,\n  element,\n  enabled\n}) {\n  let parentUpdate = useStackContext();\n  let notify = useEvent((...args) => {\n    onUpdate == null ? void 0 : onUpdate(...args);\n    parentUpdate(...args);\n  });\n  useIsoMorphicEffect(() => {\n    let shouldNotify = enabled === void 0 || enabled === true;\n    shouldNotify && notify(0 /* Add */, type, element);\n    return () => {\n      shouldNotify && notify(1 /* Remove */, type, element);\n    };\n  }, [notify, type, element, enabled]);\n  return /* @__PURE__ */ import_react27.default.createElement(StackContext.Provider, {\n    value: notify\n  }, children);\n}\n\n// src/utils/platform.ts\nfunction isIOS() {\n  return /iPhone/gi.test(window.navigator.platform) || /Mac/gi.test(window.navigator.platform) && window.navigator.maxTouchPoints > 0;\n}\n\n// src/components/dialog/dialog.tsx\nvar reducers2 = {\n  [0 /* SetTitleId */](state2, action) {\n    if (state2.titleId === action.id)\n      return state2;\n    return { ...state2, titleId: action.id };\n  }\n};\nvar DialogContext = (0, import_react28.createContext)(null);\nDialogContext.displayName = \"DialogContext\";\nfunction useDialogContext(component) {\n  let context = (0, import_react28.useContext)(DialogContext);\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <Dialog /> component.`);\n    if (Error.captureStackTrace)\n      Error.captureStackTrace(err, useDialogContext);\n    throw err;\n  }\n  return context;\n}\nfunction useScrollLock(ownerDocument, enabled) {\n  (0, import_react28.useEffect)(() => {\n    var _a2;\n    if (!enabled)\n      return;\n    if (!ownerDocument)\n      return;\n    let d = disposables();\n    function style(node, property, value) {\n      let previous = node.style.getPropertyValue(property);\n      Object.assign(node.style, { [property]: value });\n      return d.add(() => {\n        Object.assign(node.style, { [property]: previous });\n      });\n    }\n    let documentElement = ownerDocument.documentElement;\n    let ownerWindow = (_a2 = ownerDocument.defaultView) != null ? _a2 : window;\n    let scrollbarWidthBefore = ownerWindow.innerWidth - documentElement.clientWidth;\n    style(documentElement, \"overflow\", \"hidden\");\n    if (scrollbarWidthBefore > 0) {\n      let scrollbarWidthAfter = documentElement.clientWidth - documentElement.offsetWidth;\n      let scrollbarWidth = scrollbarWidthBefore - scrollbarWidthAfter;\n      style(documentElement, \"paddingRight\", `${scrollbarWidth}px`);\n    }\n    if (isIOS()) {\n      let scrollPosition = window.pageYOffset;\n      style(documentElement, \"position\", \"fixed\");\n      style(documentElement, \"marginTop\", `-${scrollPosition}px`);\n      style(documentElement, \"width\", `100%`);\n      d.add(() => window.scrollTo(0, scrollPosition));\n    }\n    return d.dispose;\n  }, [ownerDocument, enabled]);\n}\nfunction stateReducer2(state2, action) {\n  return match(action.type, reducers2, state2, action);\n}\nvar DEFAULT_DIALOG_TAG = \"div\";\nvar DialogRenderFeatures = 1 /* RenderStrategy */ | 2 /* Static */;\nvar DialogRoot = forwardRefWithAs(function Dialog(props, ref) {\n  let { open, onClose, initialFocus, __demoMode = false, ...theirProps } = props;\n  let [nestedDialogCount, setNestedDialogCount] = (0, import_react28.useState)(0);\n  let usesOpenClosedState = useOpenClosed();\n  if (open === void 0 && usesOpenClosedState !== null) {\n    open = match(usesOpenClosedState, {\n      [0 /* Open */]: true,\n      [1 /* Closed */]: false\n    });\n  }\n  let containers = (0, import_react28.useRef)(/* @__PURE__ */ new Set());\n  let internalDialogRef = (0, import_react28.useRef)(null);\n  let dialogRef = useSyncRefs(internalDialogRef, ref);\n  let mainTreeNode = (0, import_react28.useRef)(null);\n  let ownerDocument = useOwnerDocument(internalDialogRef);\n  let hasOpen = props.hasOwnProperty(\"open\") || usesOpenClosedState !== null;\n  let hasOnClose = props.hasOwnProperty(\"onClose\");\n  if (!hasOpen && !hasOnClose) {\n    throw new Error(`You have to provide an \\`open\\` and an \\`onClose\\` prop to the \\`Dialog\\` component.`);\n  }\n  if (!hasOpen) {\n    throw new Error(`You provided an \\`onClose\\` prop to the \\`Dialog\\`, but forgot an \\`open\\` prop.`);\n  }\n  if (!hasOnClose) {\n    throw new Error(`You provided an \\`open\\` prop to the \\`Dialog\\`, but forgot an \\`onClose\\` prop.`);\n  }\n  if (typeof open !== \"boolean\") {\n    throw new Error(`You provided an \\`open\\` prop to the \\`Dialog\\`, but the value is not a boolean. Received: ${open}`);\n  }\n  if (typeof onClose !== \"function\") {\n    throw new Error(`You provided an \\`onClose\\` prop to the \\`Dialog\\`, but the value is not a function. Received: ${onClose}`);\n  }\n  let dialogState = open ? 0 /* Open */ : 1 /* Closed */;\n  let [state2, dispatch] = (0, import_react28.useReducer)(stateReducer2, {\n    titleId: null,\n    descriptionId: null,\n    panelRef: (0, import_react28.createRef)()\n  });\n  let close = useEvent(() => onClose(false));\n  let setTitleId = useEvent((id3) => dispatch({ type: 0 /* SetTitleId */, id: id3 }));\n  let ready = useServerHandoffComplete();\n  let enabled = ready ? __demoMode ? false : dialogState === 0 /* Open */ : false;\n  let hasNestedDialogs = nestedDialogCount > 1;\n  let hasParentDialog = (0, import_react28.useContext)(DialogContext) !== null;\n  let position = !hasNestedDialogs ? \"leaf\" : \"parent\";\n  useInertOthers(internalDialogRef, hasNestedDialogs ? enabled : false);\n  useOutsideClick(() => {\n    var _a2, _b;\n    let rootContainers = Array.from((_a2 = ownerDocument == null ? void 0 : ownerDocument.querySelectorAll(\"body > *, [data-headlessui-portal]\")) != null ? _a2 : []).filter((container) => {\n      if (!(container instanceof HTMLElement))\n        return false;\n      if (container.contains(mainTreeNode.current))\n        return false;\n      if (state2.panelRef.current && container.contains(state2.panelRef.current))\n        return false;\n      return true;\n    });\n    return [\n      ...rootContainers,\n      (_b = state2.panelRef.current) != null ? _b : internalDialogRef.current\n    ];\n  }, close, enabled && !hasNestedDialogs);\n  useEventListener(ownerDocument == null ? void 0 : ownerDocument.defaultView, \"keydown\", (event) => {\n    if (event.defaultPrevented)\n      return;\n    if (event.key !== \"Escape\" /* Escape */)\n      return;\n    if (dialogState !== 0 /* Open */)\n      return;\n    if (hasNestedDialogs)\n      return;\n    event.preventDefault();\n    event.stopPropagation();\n    close();\n  });\n  useScrollLock(ownerDocument, dialogState === 0 /* Open */ && !hasParentDialog);\n  (0, import_react28.useEffect)(() => {\n    if (dialogState !== 0 /* Open */)\n      return;\n    if (!internalDialogRef.current)\n      return;\n    let observer = new IntersectionObserver((entries) => {\n      for (let entry of entries) {\n        if (entry.boundingClientRect.x === 0 && entry.boundingClientRect.y === 0 && entry.boundingClientRect.width === 0 && entry.boundingClientRect.height === 0) {\n          close();\n        }\n      }\n    });\n    observer.observe(internalDialogRef.current);\n    return () => observer.disconnect();\n  }, [dialogState, internalDialogRef, close]);\n  let [describedby, DescriptionProvider] = useDescriptions();\n  let id2 = `headlessui-dialog-${useId()}`;\n  let contextBag = (0, import_react28.useMemo)(() => [{ dialogState, close, setTitleId }, state2], [dialogState, state2, close, setTitleId]);\n  let slot = (0, import_react28.useMemo)(() => ({ open: dialogState === 0 /* Open */ }), [dialogState]);\n  let ourProps = {\n    ref: dialogRef,\n    id: id2,\n    role: \"dialog\",\n    \"aria-modal\": dialogState === 0 /* Open */ ? true : void 0,\n    \"aria-labelledby\": state2.titleId,\n    \"aria-describedby\": describedby\n  };\n  return /* @__PURE__ */ import_react28.default.createElement(StackProvider, {\n    type: \"Dialog\",\n    enabled: dialogState === 0 /* Open */,\n    element: internalDialogRef,\n    onUpdate: useEvent((message, type, element) => {\n      if (type !== \"Dialog\")\n        return;\n      match(message, {\n        [0 /* Add */]() {\n          containers.current.add(element);\n          setNestedDialogCount((count) => count + 1);\n        },\n        [1 /* Remove */]() {\n          containers.current.add(element);\n          setNestedDialogCount((count) => count - 1);\n        }\n      });\n    })\n  }, /* @__PURE__ */ import_react28.default.createElement(ForcePortalRoot, {\n    force: true\n  }, /* @__PURE__ */ import_react28.default.createElement(Portal2, null, /* @__PURE__ */ import_react28.default.createElement(DialogContext.Provider, {\n    value: contextBag\n  }, /* @__PURE__ */ import_react28.default.createElement(Portal2.Group, {\n    target: internalDialogRef\n  }, /* @__PURE__ */ import_react28.default.createElement(ForcePortalRoot, {\n    force: false\n  }, /* @__PURE__ */ import_react28.default.createElement(DescriptionProvider, {\n    slot,\n    name: \"Dialog.Description\"\n  }, /* @__PURE__ */ import_react28.default.createElement(FocusTrap, {\n    initialFocus,\n    containers,\n    features: enabled ? match(position, {\n      parent: FocusTrap.features.RestoreFocus,\n      leaf: FocusTrap.features.All & ~FocusTrap.features.FocusLock\n    }) : FocusTrap.features.None\n  }, render({\n    ourProps,\n    theirProps,\n    slot,\n    defaultTag: DEFAULT_DIALOG_TAG,\n    features: DialogRenderFeatures,\n    visible: dialogState === 0 /* Open */,\n    name: \"Dialog\"\n  })))))))), /* @__PURE__ */ import_react28.default.createElement(Hidden, {\n    features: 4 /* Hidden */,\n    ref: mainTreeNode\n  }));\n});\nvar DEFAULT_OVERLAY_TAG = \"div\";\nvar Overlay = forwardRefWithAs(function Overlay2(props, ref) {\n  let [{ dialogState, close }] = useDialogContext(\"Dialog.Overlay\");\n  let overlayRef = useSyncRefs(ref);\n  let id2 = `headlessui-dialog-overlay-${useId()}`;\n  let handleClick = useEvent((event) => {\n    if (event.target !== event.currentTarget)\n      return;\n    if (isDisabledReactIssue7711(event.currentTarget))\n      return event.preventDefault();\n    event.preventDefault();\n    event.stopPropagation();\n    close();\n  });\n  let slot = (0, import_react28.useMemo)(() => ({ open: dialogState === 0 /* Open */ }), [dialogState]);\n  let theirProps = props;\n  let ourProps = {\n    ref: overlayRef,\n    id: id2,\n    \"aria-hidden\": true,\n    onClick: handleClick\n  };\n  return render({\n    ourProps,\n    theirProps,\n    slot,\n    defaultTag: DEFAULT_OVERLAY_TAG,\n    name: \"Dialog.Overlay\"\n  });\n});\nvar DEFAULT_BACKDROP_TAG = \"div\";\nvar Backdrop = forwardRefWithAs(function Backdrop2(props, ref) {\n  let [{ dialogState }, state2] = useDialogContext(\"Dialog.Backdrop\");\n  let backdropRef = useSyncRefs(ref);\n  let id2 = `headlessui-dialog-backdrop-${useId()}`;\n  (0, import_react28.useEffect)(() => {\n    if (state2.panelRef.current === null) {\n      throw new Error(`A <Dialog.Backdrop /> component is being used, but a <Dialog.Panel /> component is missing.`);\n    }\n  }, [state2.panelRef]);\n  let slot = (0, import_react28.useMemo)(() => ({ open: dialogState === 0 /* Open */ }), [dialogState]);\n  let theirProps = props;\n  let ourProps = {\n    ref: backdropRef,\n    id: id2,\n    \"aria-hidden\": true\n  };\n  return /* @__PURE__ */ import_react28.default.createElement(ForcePortalRoot, {\n    force: true\n  }, /* @__PURE__ */ import_react28.default.createElement(Portal2, null, render({\n    ourProps,\n    theirProps,\n    slot,\n    defaultTag: DEFAULT_BACKDROP_TAG,\n    name: \"Dialog.Backdrop\"\n  })));\n});\nvar DEFAULT_PANEL_TAG = \"div\";\nvar Panel = forwardRefWithAs(function Panel2(props, ref) {\n  let [{ dialogState }, state2] = useDialogContext(\"Dialog.Panel\");\n  let panelRef = useSyncRefs(ref, state2.panelRef);\n  let id2 = `headlessui-dialog-panel-${useId()}`;\n  let slot = (0, import_react28.useMemo)(() => ({ open: dialogState === 0 /* Open */ }), [dialogState]);\n  let handleClick = useEvent((event) => {\n    event.stopPropagation();\n  });\n  let theirProps = props;\n  let ourProps = {\n    ref: panelRef,\n    id: id2,\n    onClick: handleClick\n  };\n  return render({\n    ourProps,\n    theirProps,\n    slot,\n    defaultTag: DEFAULT_PANEL_TAG,\n    name: \"Dialog.Panel\"\n  });\n});\nvar DEFAULT_TITLE_TAG = \"h2\";\nvar Title = forwardRefWithAs(function Title2(props, ref) {\n  let [{ dialogState, setTitleId }] = useDialogContext(\"Dialog.Title\");\n  let id2 = `headlessui-dialog-title-${useId()}`;\n  let titleRef = useSyncRefs(ref);\n  (0, import_react28.useEffect)(() => {\n    setTitleId(id2);\n    return () => setTitleId(null);\n  }, [id2, setTitleId]);\n  let slot = (0, import_react28.useMemo)(() => ({ open: dialogState === 0 /* Open */ }), [dialogState]);\n  let theirProps = props;\n  let ourProps = { ref: titleRef, id: id2 };\n  return render({\n    ourProps,\n    theirProps,\n    slot,\n    defaultTag: DEFAULT_TITLE_TAG,\n    name: \"Dialog.Title\"\n  });\n});\nvar Dialog2 = Object.assign(DialogRoot, { Backdrop, Panel, Overlay, Title, Description });\n\n// src/components/disclosure/disclosure.tsx\nvar import_react29 = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"), 1);\nvar reducers3 = {\n  [0 /* ToggleDisclosure */]: (state2) => ({\n    ...state2,\n    disclosureState: match(state2.disclosureState, {\n      [0 /* Open */]: 1 /* Closed */,\n      [1 /* Closed */]: 0 /* Open */\n    })\n  }),\n  [1 /* CloseDisclosure */]: (state2) => {\n    if (state2.disclosureState === 1 /* Closed */)\n      return state2;\n    return { ...state2, disclosureState: 1 /* Closed */ };\n  },\n  [4 /* LinkPanel */](state2) {\n    if (state2.linkedPanel === true)\n      return state2;\n    return { ...state2, linkedPanel: true };\n  },\n  [5 /* UnlinkPanel */](state2) {\n    if (state2.linkedPanel === false)\n      return state2;\n    return { ...state2, linkedPanel: false };\n  },\n  [2 /* SetButtonId */](state2, action) {\n    if (state2.buttonId === action.buttonId)\n      return state2;\n    return { ...state2, buttonId: action.buttonId };\n  },\n  [3 /* SetPanelId */](state2, action) {\n    if (state2.panelId === action.panelId)\n      return state2;\n    return { ...state2, panelId: action.panelId };\n  }\n};\nvar DisclosureContext = (0, import_react29.createContext)(null);\nDisclosureContext.displayName = \"DisclosureContext\";\nfunction useDisclosureContext(component) {\n  let context = (0, import_react29.useContext)(DisclosureContext);\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <Disclosure /> component.`);\n    if (Error.captureStackTrace)\n      Error.captureStackTrace(err, useDisclosureContext);\n    throw err;\n  }\n  return context;\n}\nvar DisclosureAPIContext = (0, import_react29.createContext)(null);\nDisclosureAPIContext.displayName = \"DisclosureAPIContext\";\nfunction useDisclosureAPIContext(component) {\n  let context = (0, import_react29.useContext)(DisclosureAPIContext);\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <Disclosure /> component.`);\n    if (Error.captureStackTrace)\n      Error.captureStackTrace(err, useDisclosureAPIContext);\n    throw err;\n  }\n  return context;\n}\nvar DisclosurePanelContext = (0, import_react29.createContext)(null);\nDisclosurePanelContext.displayName = \"DisclosurePanelContext\";\nfunction useDisclosurePanelContext() {\n  return (0, import_react29.useContext)(DisclosurePanelContext);\n}\nfunction stateReducer3(state2, action) {\n  return match(action.type, reducers3, state2, action);\n}\nvar DEFAULT_DISCLOSURE_TAG = import_react29.Fragment;\nvar DisclosureRoot = forwardRefWithAs(function Disclosure(props, ref) {\n  let { defaultOpen = false, ...theirProps } = props;\n  let buttonId = `headlessui-disclosure-button-${useId()}`;\n  let panelId = `headlessui-disclosure-panel-${useId()}`;\n  let internalDisclosureRef = (0, import_react29.useRef)(null);\n  let disclosureRef = useSyncRefs(ref, optionalRef((ref2) => {\n    internalDisclosureRef.current = ref2;\n  }, props.as === void 0 || props.as === import_react29.Fragment));\n  let panelRef = (0, import_react29.useRef)(null);\n  let buttonRef = (0, import_react29.useRef)(null);\n  let reducerBag = (0, import_react29.useReducer)(stateReducer3, {\n    disclosureState: defaultOpen ? 0 /* Open */ : 1 /* Closed */,\n    linkedPanel: false,\n    buttonRef,\n    panelRef,\n    buttonId,\n    panelId\n  });\n  let [{ disclosureState }, dispatch] = reducerBag;\n  (0, import_react29.useEffect)(() => dispatch({ type: 2 /* SetButtonId */, buttonId }), [buttonId, dispatch]);\n  (0, import_react29.useEffect)(() => dispatch({ type: 3 /* SetPanelId */, panelId }), [panelId, dispatch]);\n  let close = useEvent((focusableElement) => {\n    dispatch({ type: 1 /* CloseDisclosure */ });\n    let ownerDocument = getOwnerDocument(internalDisclosureRef);\n    if (!ownerDocument)\n      return;\n    let restoreElement = (() => {\n      if (!focusableElement)\n        return ownerDocument.getElementById(buttonId);\n      if (focusableElement instanceof HTMLElement)\n        return focusableElement;\n      if (focusableElement.current instanceof HTMLElement)\n        return focusableElement.current;\n      return ownerDocument.getElementById(buttonId);\n    })();\n    restoreElement == null ? void 0 : restoreElement.focus();\n  });\n  let api = (0, import_react29.useMemo)(() => ({ close }), [close]);\n  let slot = (0, import_react29.useMemo)(() => ({ open: disclosureState === 0 /* Open */, close }), [disclosureState, close]);\n  let ourProps = {\n    ref: disclosureRef\n  };\n  return /* @__PURE__ */ import_react29.default.createElement(DisclosureContext.Provider, {\n    value: reducerBag\n  }, /* @__PURE__ */ import_react29.default.createElement(DisclosureAPIContext.Provider, {\n    value: api\n  }, /* @__PURE__ */ import_react29.default.createElement(OpenClosedProvider, {\n    value: match(disclosureState, {\n      [0 /* Open */]: 0 /* Open */,\n      [1 /* Closed */]: 1 /* Closed */\n    })\n  }, render({\n    ourProps,\n    theirProps,\n    slot,\n    defaultTag: DEFAULT_DISCLOSURE_TAG,\n    name: \"Disclosure\"\n  }))));\n});\nvar DEFAULT_BUTTON_TAG2 = \"button\";\nvar Button3 = forwardRefWithAs(function Button4(props, ref) {\n  let [state2, dispatch] = useDisclosureContext(\"Disclosure.Button\");\n  let panelContext = useDisclosurePanelContext();\n  let isWithinPanel = panelContext === null ? false : panelContext === state2.panelId;\n  let internalButtonRef = (0, import_react29.useRef)(null);\n  let buttonRef = useSyncRefs(internalButtonRef, ref, !isWithinPanel ? state2.buttonRef : null);\n  let handleKeyDown = useEvent((event) => {\n    var _a2;\n    if (isWithinPanel) {\n      if (state2.disclosureState === 1 /* Closed */)\n        return;\n      switch (event.key) {\n        case \" \" /* Space */:\n        case \"Enter\" /* Enter */:\n          event.preventDefault();\n          event.stopPropagation();\n          dispatch({ type: 0 /* ToggleDisclosure */ });\n          (_a2 = state2.buttonRef.current) == null ? void 0 : _a2.focus();\n          break;\n      }\n    } else {\n      switch (event.key) {\n        case \" \" /* Space */:\n        case \"Enter\" /* Enter */:\n          event.preventDefault();\n          event.stopPropagation();\n          dispatch({ type: 0 /* ToggleDisclosure */ });\n          break;\n      }\n    }\n  });\n  let handleKeyUp = useEvent((event) => {\n    switch (event.key) {\n      case \" \" /* Space */:\n        event.preventDefault();\n        break;\n    }\n  });\n  let handleClick = useEvent((event) => {\n    var _a2;\n    if (isDisabledReactIssue7711(event.currentTarget))\n      return;\n    if (props.disabled)\n      return;\n    if (isWithinPanel) {\n      dispatch({ type: 0 /* ToggleDisclosure */ });\n      (_a2 = state2.buttonRef.current) == null ? void 0 : _a2.focus();\n    } else {\n      dispatch({ type: 0 /* ToggleDisclosure */ });\n    }\n  });\n  let slot = (0, import_react29.useMemo)(() => ({ open: state2.disclosureState === 0 /* Open */ }), [state2]);\n  let type = useResolveButtonType(props, internalButtonRef);\n  let theirProps = props;\n  let ourProps = isWithinPanel ? { ref: buttonRef, type, onKeyDown: handleKeyDown, onClick: handleClick } : {\n    ref: buttonRef,\n    id: state2.buttonId,\n    type,\n    \"aria-expanded\": props.disabled ? void 0 : state2.disclosureState === 0 /* Open */,\n    \"aria-controls\": state2.linkedPanel ? state2.panelId : void 0,\n    onKeyDown: handleKeyDown,\n    onKeyUp: handleKeyUp,\n    onClick: handleClick\n  };\n  return render({\n    ourProps,\n    theirProps,\n    slot,\n    defaultTag: DEFAULT_BUTTON_TAG2,\n    name: \"Disclosure.Button\"\n  });\n});\nvar DEFAULT_PANEL_TAG2 = \"div\";\nvar PanelRenderFeatures = 1 /* RenderStrategy */ | 2 /* Static */;\nvar Panel3 = forwardRefWithAs(function Panel4(props, ref) {\n  let [state2, dispatch] = useDisclosureContext(\"Disclosure.Panel\");\n  let { close } = useDisclosureAPIContext(\"Disclosure.Panel\");\n  let panelRef = useSyncRefs(ref, state2.panelRef, (el) => {\n    dispatch({ type: el ? 4 /* LinkPanel */ : 5 /* UnlinkPanel */ });\n  });\n  let usesOpenClosedState = useOpenClosed();\n  let visible = (() => {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === 0 /* Open */;\n    }\n    return state2.disclosureState === 0 /* Open */;\n  })();\n  let slot = (0, import_react29.useMemo)(() => ({ open: state2.disclosureState === 0 /* Open */, close }), [state2, close]);\n  let theirProps = props;\n  let ourProps = {\n    ref: panelRef,\n    id: state2.panelId\n  };\n  return /* @__PURE__ */ import_react29.default.createElement(DisclosurePanelContext.Provider, {\n    value: state2.panelId\n  }, render({\n    ourProps,\n    theirProps,\n    slot,\n    defaultTag: DEFAULT_PANEL_TAG2,\n    features: PanelRenderFeatures,\n    visible,\n    name: \"Disclosure.Panel\"\n  }));\n});\nvar Disclosure2 = Object.assign(DisclosureRoot, { Button: Button3, Panel: Panel3 });\n\n// src/components/listbox/listbox.tsx\nvar import_react30 = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"), 1);\nfunction adjustOrderedState2(state2, adjustment = (i) => i) {\n  let currentActiveOption = state2.activeOptionIndex !== null ? state2.options[state2.activeOptionIndex] : null;\n  let sortedOptions = sortByDomNode(adjustment(state2.options.slice()), (option) => option.dataRef.current.domRef.current);\n  let adjustedActiveOptionIndex = currentActiveOption ? sortedOptions.indexOf(currentActiveOption) : null;\n  if (adjustedActiveOptionIndex === -1) {\n    adjustedActiveOptionIndex = null;\n  }\n  return {\n    options: sortedOptions,\n    activeOptionIndex: adjustedActiveOptionIndex\n  };\n}\nvar reducers4 = {\n  [1 /* CloseListbox */](state2) {\n    if (state2.disabled)\n      return state2;\n    if (state2.listboxState === 1 /* Closed */)\n      return state2;\n    return { ...state2, activeOptionIndex: null, listboxState: 1 /* Closed */ };\n  },\n  [0 /* OpenListbox */](state2) {\n    if (state2.disabled)\n      return state2;\n    if (state2.listboxState === 0 /* Open */)\n      return state2;\n    let activeOptionIndex = state2.activeOptionIndex;\n    let { value, mode, compare } = state2.propsRef.current;\n    let optionIdx = state2.options.findIndex((option) => {\n      let optionValue = option.dataRef.current.value;\n      let selected = match(mode, {\n        [1 /* Multi */]: () => value.some((option2) => compare(option2, optionValue)),\n        [0 /* Single */]: () => compare(value, optionValue)\n      });\n      return selected;\n    });\n    if (optionIdx !== -1) {\n      activeOptionIndex = optionIdx;\n    }\n    return { ...state2, listboxState: 0 /* Open */, activeOptionIndex };\n  },\n  [2 /* SetDisabled */](state2, action) {\n    if (state2.disabled === action.disabled)\n      return state2;\n    return { ...state2, disabled: action.disabled };\n  },\n  [3 /* SetOrientation */](state2, action) {\n    if (state2.orientation === action.orientation)\n      return state2;\n    return { ...state2, orientation: action.orientation };\n  },\n  [4 /* GoToOption */](state2, action) {\n    var _a2;\n    if (state2.disabled)\n      return state2;\n    if (state2.listboxState === 1 /* Closed */)\n      return state2;\n    let adjustedState = adjustOrderedState2(state2);\n    let activeOptionIndex = calculateActiveIndex(action, {\n      resolveItems: () => adjustedState.options,\n      resolveActiveIndex: () => adjustedState.activeOptionIndex,\n      resolveId: (option) => option.id,\n      resolveDisabled: (option) => option.dataRef.current.disabled\n    });\n    return {\n      ...state2,\n      ...adjustedState,\n      searchQuery: \"\",\n      activeOptionIndex,\n      activationTrigger: (_a2 = action.trigger) != null ? _a2 : 1 /* Other */\n    };\n  },\n  [5 /* Search */]: (state2, action) => {\n    if (state2.disabled)\n      return state2;\n    if (state2.listboxState === 1 /* Closed */)\n      return state2;\n    let wasAlreadySearching = state2.searchQuery !== \"\";\n    let offset = wasAlreadySearching ? 0 : 1;\n    let searchQuery = state2.searchQuery + action.value.toLowerCase();\n    let reOrderedOptions = state2.activeOptionIndex !== null ? state2.options.slice(state2.activeOptionIndex + offset).concat(state2.options.slice(0, state2.activeOptionIndex + offset)) : state2.options;\n    let matchingOption = reOrderedOptions.find((option) => {\n      var _a2;\n      return !option.dataRef.current.disabled && ((_a2 = option.dataRef.current.textValue) == null ? void 0 : _a2.startsWith(searchQuery));\n    });\n    let matchIdx = matchingOption ? state2.options.indexOf(matchingOption) : -1;\n    if (matchIdx === -1 || matchIdx === state2.activeOptionIndex)\n      return { ...state2, searchQuery };\n    return {\n      ...state2,\n      searchQuery,\n      activeOptionIndex: matchIdx,\n      activationTrigger: 1 /* Other */\n    };\n  },\n  [6 /* ClearSearch */](state2) {\n    if (state2.disabled)\n      return state2;\n    if (state2.listboxState === 1 /* Closed */)\n      return state2;\n    if (state2.searchQuery === \"\")\n      return state2;\n    return { ...state2, searchQuery: \"\" };\n  },\n  [7 /* RegisterOption */]: (state2, action) => {\n    let option = { id: action.id, dataRef: action.dataRef };\n    let adjustedState = adjustOrderedState2(state2, (options) => [...options, option]);\n    if (state2.activeOptionIndex === null) {\n      let { value, mode, compare } = state2.propsRef.current;\n      let optionValue = action.dataRef.current.value;\n      let selected = match(mode, {\n        [1 /* Multi */]: () => value.some((option2) => compare(option2, optionValue)),\n        [0 /* Single */]: () => compare(value, optionValue)\n      });\n      if (selected) {\n        adjustedState.activeOptionIndex = adjustedState.options.indexOf(option);\n      }\n    }\n    return { ...state2, ...adjustedState };\n  },\n  [8 /* UnregisterOption */]: (state2, action) => {\n    let adjustedState = adjustOrderedState2(state2, (options) => {\n      let idx = options.findIndex((a) => a.id === action.id);\n      if (idx !== -1)\n        options.splice(idx, 1);\n      return options;\n    });\n    return {\n      ...state2,\n      ...adjustedState,\n      activationTrigger: 1 /* Other */\n    };\n  }\n};\nvar ListboxContext = (0, import_react30.createContext)(null);\nListboxContext.displayName = \"ListboxContext\";\nfunction useListboxContext(component) {\n  let context = (0, import_react30.useContext)(ListboxContext);\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <Listbox /> component.`);\n    if (Error.captureStackTrace)\n      Error.captureStackTrace(err, useListboxContext);\n    throw err;\n  }\n  return context;\n}\nfunction stateReducer4(state2, action) {\n  return match(action.type, reducers4, state2, action);\n}\nvar DEFAULT_LISTBOX_TAG = import_react30.Fragment;\nvar ListboxRoot = forwardRefWithAs(function Listbox(props, ref) {\n  let {\n    value: controlledValue,\n    defaultValue,\n    name,\n    onChange: controlledOnChange,\n    by = (a, z) => a === z,\n    disabled = false,\n    horizontal = false,\n    multiple = false,\n    ...theirProps\n  } = props;\n  const orientation = horizontal ? \"horizontal\" : \"vertical\";\n  let listboxRef = useSyncRefs(ref);\n  let [value, onChange] = useControllable(controlledValue, controlledOnChange, defaultValue);\n  let reducerBag = (0, import_react30.useReducer)(stateReducer4, {\n    listboxState: 1 /* Closed */,\n    propsRef: {\n      current: {\n        value,\n        onChange,\n        mode: multiple ? 1 /* Multi */ : 0 /* Single */,\n        compare: useEvent(typeof by === \"string\" ? (a, z) => {\n          let property = by;\n          return (a == null ? void 0 : a[property]) === (z == null ? void 0 : z[property]);\n        } : by)\n      }\n    },\n    labelRef: (0, import_react30.createRef)(),\n    buttonRef: (0, import_react30.createRef)(),\n    optionsRef: (0, import_react30.createRef)(),\n    disabled,\n    orientation,\n    options: [],\n    searchQuery: \"\",\n    activeOptionIndex: null,\n    activationTrigger: 1 /* Other */\n  });\n  let [{ listboxState, propsRef, optionsRef, buttonRef }, dispatch] = reducerBag;\n  propsRef.current.value = value;\n  propsRef.current.mode = multiple ? 1 /* Multi */ : 0 /* Single */;\n  useIsoMorphicEffect(() => {\n    propsRef.current.onChange = (value2) => {\n      return match(propsRef.current.mode, {\n        [0 /* Single */]() {\n          return onChange(value2);\n        },\n        [1 /* Multi */]() {\n          let copy = propsRef.current.value.slice();\n          let { compare } = propsRef.current;\n          let idx = copy.findIndex((item) => compare(item, value2));\n          if (idx === -1) {\n            copy.push(value2);\n          } else {\n            copy.splice(idx, 1);\n          }\n          return onChange(copy);\n        }\n      });\n    };\n  }, [onChange, propsRef]);\n  useIsoMorphicEffect(() => dispatch({ type: 2 /* SetDisabled */, disabled }), [disabled]);\n  useIsoMorphicEffect(() => dispatch({ type: 3 /* SetOrientation */, orientation }), [orientation]);\n  useOutsideClick([buttonRef, optionsRef], (event, target) => {\n    var _a2;\n    dispatch({ type: 1 /* CloseListbox */ });\n    if (!isFocusableElement(target, 1 /* Loose */)) {\n      event.preventDefault();\n      (_a2 = buttonRef.current) == null ? void 0 : _a2.focus();\n    }\n  }, listboxState === 0 /* Open */);\n  let slot = (0, import_react30.useMemo)(() => ({ open: listboxState === 0 /* Open */, disabled, value }), [listboxState, disabled, value]);\n  let ourProps = { ref: listboxRef };\n  return /* @__PURE__ */ import_react30.default.createElement(ListboxContext.Provider, {\n    value: reducerBag\n  }, /* @__PURE__ */ import_react30.default.createElement(OpenClosedProvider, {\n    value: match(listboxState, {\n      [0 /* Open */]: 0 /* Open */,\n      [1 /* Closed */]: 1 /* Closed */\n    })\n  }, name != null && value != null && objectToFormEntries({ [name]: value }).map(([name2, value2]) => /* @__PURE__ */ import_react30.default.createElement(Hidden, {\n    features: 4 /* Hidden */,\n    ...compact({\n      key: name2,\n      as: \"input\",\n      type: \"hidden\",\n      hidden: true,\n      readOnly: true,\n      name: name2,\n      value: value2\n    })\n  })), render({ ourProps, theirProps, slot, defaultTag: DEFAULT_LISTBOX_TAG, name: \"Listbox\" })));\n});\nvar DEFAULT_BUTTON_TAG3 = \"button\";\nvar Button5 = forwardRefWithAs(function Button6(props, ref) {\n  var _a2;\n  let [state2, dispatch] = useListboxContext(\"Listbox.Button\");\n  let buttonRef = useSyncRefs(state2.buttonRef, ref);\n  let id2 = `headlessui-listbox-button-${useId()}`;\n  let d = useDisposables();\n  let handleKeyDown = useEvent((event) => {\n    switch (event.key) {\n      case \" \" /* Space */:\n      case \"Enter\" /* Enter */:\n      case \"ArrowDown\" /* ArrowDown */:\n        event.preventDefault();\n        dispatch({ type: 0 /* OpenListbox */ });\n        d.nextFrame(() => {\n          if (!state2.propsRef.current.value)\n            dispatch({ type: 4 /* GoToOption */, focus: 0 /* First */ });\n        });\n        break;\n      case \"ArrowUp\" /* ArrowUp */:\n        event.preventDefault();\n        dispatch({ type: 0 /* OpenListbox */ });\n        d.nextFrame(() => {\n          if (!state2.propsRef.current.value)\n            dispatch({ type: 4 /* GoToOption */, focus: 3 /* Last */ });\n        });\n        break;\n    }\n  });\n  let handleKeyUp = useEvent((event) => {\n    switch (event.key) {\n      case \" \" /* Space */:\n        event.preventDefault();\n        break;\n    }\n  });\n  let handleClick = useEvent((event) => {\n    if (isDisabledReactIssue7711(event.currentTarget))\n      return event.preventDefault();\n    if (state2.listboxState === 0 /* Open */) {\n      dispatch({ type: 1 /* CloseListbox */ });\n      d.nextFrame(() => {\n        var _a3;\n        return (_a3 = state2.buttonRef.current) == null ? void 0 : _a3.focus({ preventScroll: true });\n      });\n    } else {\n      event.preventDefault();\n      dispatch({ type: 0 /* OpenListbox */ });\n    }\n  });\n  let labelledby = useComputed(() => {\n    if (!state2.labelRef.current)\n      return void 0;\n    return [state2.labelRef.current.id, id2].join(\" \");\n  }, [state2.labelRef.current, id2]);\n  let slot = (0, import_react30.useMemo)(() => ({\n    open: state2.listboxState === 0 /* Open */,\n    disabled: state2.disabled,\n    value: state2.propsRef.current.value\n  }), [state2]);\n  let theirProps = props;\n  let ourProps = {\n    ref: buttonRef,\n    id: id2,\n    type: useResolveButtonType(props, state2.buttonRef),\n    \"aria-haspopup\": true,\n    \"aria-controls\": (_a2 = state2.optionsRef.current) == null ? void 0 : _a2.id,\n    \"aria-expanded\": state2.disabled ? void 0 : state2.listboxState === 0 /* Open */,\n    \"aria-labelledby\": labelledby,\n    disabled: state2.disabled,\n    onKeyDown: handleKeyDown,\n    onKeyUp: handleKeyUp,\n    onClick: handleClick\n  };\n  return render({\n    ourProps,\n    theirProps,\n    slot,\n    defaultTag: DEFAULT_BUTTON_TAG3,\n    name: \"Listbox.Button\"\n  });\n});\nvar DEFAULT_LABEL_TAG2 = \"label\";\nvar Label3 = forwardRefWithAs(function Label4(props, ref) {\n  let [state2] = useListboxContext(\"Listbox.Label\");\n  let id2 = `headlessui-listbox-label-${useId()}`;\n  let labelRef = useSyncRefs(state2.labelRef, ref);\n  let handleClick = useEvent(() => {\n    var _a2;\n    return (_a2 = state2.buttonRef.current) == null ? void 0 : _a2.focus({ preventScroll: true });\n  });\n  let slot = (0, import_react30.useMemo)(() => ({ open: state2.listboxState === 0 /* Open */, disabled: state2.disabled }), [state2]);\n  let theirProps = props;\n  let ourProps = { ref: labelRef, id: id2, onClick: handleClick };\n  return render({\n    ourProps,\n    theirProps,\n    slot,\n    defaultTag: DEFAULT_LABEL_TAG2,\n    name: \"Listbox.Label\"\n  });\n});\nvar DEFAULT_OPTIONS_TAG2 = \"ul\";\nvar OptionsRenderFeatures2 = 1 /* RenderStrategy */ | 2 /* Static */;\nvar Options3 = forwardRefWithAs(function Options4(props, ref) {\n  var _a2;\n  let [state2, dispatch] = useListboxContext(\"Listbox.Options\");\n  let optionsRef = useSyncRefs(state2.optionsRef, ref);\n  let id2 = `headlessui-listbox-options-${useId()}`;\n  let d = useDisposables();\n  let searchDisposables = useDisposables();\n  let usesOpenClosedState = useOpenClosed();\n  let visible = (() => {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === 0 /* Open */;\n    }\n    return state2.listboxState === 0 /* Open */;\n  })();\n  (0, import_react30.useEffect)(() => {\n    var _a3;\n    let container = state2.optionsRef.current;\n    if (!container)\n      return;\n    if (state2.listboxState !== 0 /* Open */)\n      return;\n    if (container === ((_a3 = getOwnerDocument(container)) == null ? void 0 : _a3.activeElement))\n      return;\n    container.focus({ preventScroll: true });\n  }, [state2.listboxState, state2.optionsRef]);\n  let handleKeyDown = useEvent((event) => {\n    searchDisposables.dispose();\n    switch (event.key) {\n      case \" \" /* Space */:\n        if (state2.searchQuery !== \"\") {\n          event.preventDefault();\n          event.stopPropagation();\n          return dispatch({ type: 5 /* Search */, value: event.key });\n        }\n      case \"Enter\" /* Enter */:\n        event.preventDefault();\n        event.stopPropagation();\n        if (state2.activeOptionIndex !== null) {\n          let { dataRef } = state2.options[state2.activeOptionIndex];\n          state2.propsRef.current.onChange(dataRef.current.value);\n        }\n        if (state2.propsRef.current.mode === 0 /* Single */) {\n          dispatch({ type: 1 /* CloseListbox */ });\n          disposables().nextFrame(() => {\n            var _a3;\n            return (_a3 = state2.buttonRef.current) == null ? void 0 : _a3.focus({ preventScroll: true });\n          });\n        }\n        break;\n      case match(state2.orientation, { vertical: \"ArrowDown\" /* ArrowDown */, horizontal: \"ArrowRight\" /* ArrowRight */ }):\n        event.preventDefault();\n        event.stopPropagation();\n        return dispatch({ type: 4 /* GoToOption */, focus: 2 /* Next */ });\n      case match(state2.orientation, { vertical: \"ArrowUp\" /* ArrowUp */, horizontal: \"ArrowLeft\" /* ArrowLeft */ }):\n        event.preventDefault();\n        event.stopPropagation();\n        return dispatch({ type: 4 /* GoToOption */, focus: 1 /* Previous */ });\n      case \"Home\" /* Home */:\n      case \"PageUp\" /* PageUp */:\n        event.preventDefault();\n        event.stopPropagation();\n        return dispatch({ type: 4 /* GoToOption */, focus: 0 /* First */ });\n      case \"End\" /* End */:\n      case \"PageDown\" /* PageDown */:\n        event.preventDefault();\n        event.stopPropagation();\n        return dispatch({ type: 4 /* GoToOption */, focus: 3 /* Last */ });\n      case \"Escape\" /* Escape */:\n        event.preventDefault();\n        event.stopPropagation();\n        dispatch({ type: 1 /* CloseListbox */ });\n        return d.nextFrame(() => {\n          var _a3;\n          return (_a3 = state2.buttonRef.current) == null ? void 0 : _a3.focus({ preventScroll: true });\n        });\n      case \"Tab\" /* Tab */:\n        event.preventDefault();\n        event.stopPropagation();\n        break;\n      default:\n        if (event.key.length === 1) {\n          dispatch({ type: 5 /* Search */, value: event.key });\n          searchDisposables.setTimeout(() => dispatch({ type: 6 /* ClearSearch */ }), 350);\n        }\n        break;\n    }\n  });\n  let labelledby = useComputed(() => {\n    var _a3, _b, _c;\n    return (_c = (_a3 = state2.labelRef.current) == null ? void 0 : _a3.id) != null ? _c : (_b = state2.buttonRef.current) == null ? void 0 : _b.id;\n  }, [state2.labelRef.current, state2.buttonRef.current]);\n  let slot = (0, import_react30.useMemo)(() => ({ open: state2.listboxState === 0 /* Open */ }), [state2]);\n  let theirProps = props;\n  let ourProps = {\n    \"aria-activedescendant\": state2.activeOptionIndex === null ? void 0 : (_a2 = state2.options[state2.activeOptionIndex]) == null ? void 0 : _a2.id,\n    \"aria-multiselectable\": state2.propsRef.current.mode === 1 /* Multi */ ? true : void 0,\n    \"aria-labelledby\": labelledby,\n    \"aria-orientation\": state2.orientation,\n    id: id2,\n    onKeyDown: handleKeyDown,\n    role: \"listbox\",\n    tabIndex: 0,\n    ref: optionsRef\n  };\n  return render({\n    ourProps,\n    theirProps,\n    slot,\n    defaultTag: DEFAULT_OPTIONS_TAG2,\n    features: OptionsRenderFeatures2,\n    visible,\n    name: \"Listbox.Options\"\n  });\n});\nvar DEFAULT_OPTION_TAG2 = \"li\";\nvar Option3 = forwardRefWithAs(function Option4(props, ref) {\n  let { disabled = false, value, ...theirProps } = props;\n  let [state2, dispatch] = useListboxContext(\"Listbox.Option\");\n  let id2 = `headlessui-listbox-option-${useId()}`;\n  let active = state2.activeOptionIndex !== null ? state2.options[state2.activeOptionIndex].id === id2 : false;\n  let { value: optionValue, compare } = state2.propsRef.current;\n  let selected = match(state2.propsRef.current.mode, {\n    [1 /* Multi */]: () => optionValue.some((option) => compare(option, value)),\n    [0 /* Single */]: () => compare(optionValue, value)\n  });\n  let internalOptionRef = (0, import_react30.useRef)(null);\n  let optionRef = useSyncRefs(ref, internalOptionRef);\n  useIsoMorphicEffect(() => {\n    if (state2.listboxState !== 0 /* Open */)\n      return;\n    if (!active)\n      return;\n    if (state2.activationTrigger === 0 /* Pointer */)\n      return;\n    let d = disposables();\n    d.requestAnimationFrame(() => {\n      var _a2, _b;\n      (_b = (_a2 = internalOptionRef.current) == null ? void 0 : _a2.scrollIntoView) == null ? void 0 : _b.call(_a2, { block: \"nearest\" });\n    });\n    return d.dispose;\n  }, [internalOptionRef, active, state2.listboxState, state2.activationTrigger, state2.activeOptionIndex]);\n  let bag = (0, import_react30.useRef)({ disabled, value, domRef: internalOptionRef });\n  useIsoMorphicEffect(() => {\n    bag.current.disabled = disabled;\n  }, [bag, disabled]);\n  useIsoMorphicEffect(() => {\n    bag.current.value = value;\n  }, [bag, value]);\n  useIsoMorphicEffect(() => {\n    var _a2, _b;\n    bag.current.textValue = (_b = (_a2 = internalOptionRef.current) == null ? void 0 : _a2.textContent) == null ? void 0 : _b.toLowerCase();\n  }, [bag, internalOptionRef]);\n  let select = useEvent(() => state2.propsRef.current.onChange(value));\n  useIsoMorphicEffect(() => {\n    dispatch({ type: 7 /* RegisterOption */, id: id2, dataRef: bag });\n    return () => dispatch({ type: 8 /* UnregisterOption */, id: id2 });\n  }, [bag, id2]);\n  let handleClick = useEvent((event) => {\n    if (disabled)\n      return event.preventDefault();\n    select();\n    if (state2.propsRef.current.mode === 0 /* Single */) {\n      dispatch({ type: 1 /* CloseListbox */ });\n      disposables().nextFrame(() => {\n        var _a2;\n        return (_a2 = state2.buttonRef.current) == null ? void 0 : _a2.focus({ preventScroll: true });\n      });\n    }\n  });\n  let handleFocus = useEvent(() => {\n    if (disabled)\n      return dispatch({ type: 4 /* GoToOption */, focus: 5 /* Nothing */ });\n    dispatch({ type: 4 /* GoToOption */, focus: 4 /* Specific */, id: id2 });\n  });\n  let handleMove = useEvent(() => {\n    if (disabled)\n      return;\n    if (active)\n      return;\n    dispatch({\n      type: 4 /* GoToOption */,\n      focus: 4 /* Specific */,\n      id: id2,\n      trigger: 0 /* Pointer */\n    });\n  });\n  let handleLeave = useEvent(() => {\n    if (disabled)\n      return;\n    if (!active)\n      return;\n    dispatch({ type: 4 /* GoToOption */, focus: 5 /* Nothing */ });\n  });\n  let slot = (0, import_react30.useMemo)(() => ({ active, selected, disabled }), [active, selected, disabled]);\n  let ourProps = {\n    id: id2,\n    ref: optionRef,\n    role: \"option\",\n    tabIndex: disabled === true ? void 0 : -1,\n    \"aria-disabled\": disabled === true ? true : void 0,\n    \"aria-selected\": selected,\n    disabled: void 0,\n    onClick: handleClick,\n    onFocus: handleFocus,\n    onPointerMove: handleMove,\n    onMouseMove: handleMove,\n    onPointerLeave: handleLeave,\n    onMouseLeave: handleLeave\n  };\n  return render({\n    ourProps,\n    theirProps,\n    slot,\n    defaultTag: DEFAULT_OPTION_TAG2,\n    name: \"Listbox.Option\"\n  });\n});\nvar Listbox2 = Object.assign(ListboxRoot, { Button: Button5, Label: Label3, Options: Options3, Option: Option3 });\n\n// src/components/menu/menu.tsx\nvar import_react31 = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"), 1);\nfunction adjustOrderedState3(state2, adjustment = (i) => i) {\n  let currentActiveItem = state2.activeItemIndex !== null ? state2.items[state2.activeItemIndex] : null;\n  let sortedItems = sortByDomNode(adjustment(state2.items.slice()), (item) => item.dataRef.current.domRef.current);\n  let adjustedActiveItemIndex = currentActiveItem ? sortedItems.indexOf(currentActiveItem) : null;\n  if (adjustedActiveItemIndex === -1) {\n    adjustedActiveItemIndex = null;\n  }\n  return {\n    items: sortedItems,\n    activeItemIndex: adjustedActiveItemIndex\n  };\n}\nvar reducers5 = {\n  [1 /* CloseMenu */](state2) {\n    if (state2.menuState === 1 /* Closed */)\n      return state2;\n    return { ...state2, activeItemIndex: null, menuState: 1 /* Closed */ };\n  },\n  [0 /* OpenMenu */](state2) {\n    if (state2.menuState === 0 /* Open */)\n      return state2;\n    return { ...state2, menuState: 0 /* Open */ };\n  },\n  [2 /* GoToItem */]: (state2, action) => {\n    var _a2;\n    let adjustedState = adjustOrderedState3(state2);\n    let activeItemIndex = calculateActiveIndex(action, {\n      resolveItems: () => adjustedState.items,\n      resolveActiveIndex: () => adjustedState.activeItemIndex,\n      resolveId: (item) => item.id,\n      resolveDisabled: (item) => item.dataRef.current.disabled\n    });\n    return {\n      ...state2,\n      ...adjustedState,\n      searchQuery: \"\",\n      activeItemIndex,\n      activationTrigger: (_a2 = action.trigger) != null ? _a2 : 1 /* Other */\n    };\n  },\n  [3 /* Search */]: (state2, action) => {\n    let wasAlreadySearching = state2.searchQuery !== \"\";\n    let offset = wasAlreadySearching ? 0 : 1;\n    let searchQuery = state2.searchQuery + action.value.toLowerCase();\n    let reOrderedItems = state2.activeItemIndex !== null ? state2.items.slice(state2.activeItemIndex + offset).concat(state2.items.slice(0, state2.activeItemIndex + offset)) : state2.items;\n    let matchingItem = reOrderedItems.find((item) => {\n      var _a2;\n      return ((_a2 = item.dataRef.current.textValue) == null ? void 0 : _a2.startsWith(searchQuery)) && !item.dataRef.current.disabled;\n    });\n    let matchIdx = matchingItem ? state2.items.indexOf(matchingItem) : -1;\n    if (matchIdx === -1 || matchIdx === state2.activeItemIndex)\n      return { ...state2, searchQuery };\n    return {\n      ...state2,\n      searchQuery,\n      activeItemIndex: matchIdx,\n      activationTrigger: 1 /* Other */\n    };\n  },\n  [4 /* ClearSearch */](state2) {\n    if (state2.searchQuery === \"\")\n      return state2;\n    return { ...state2, searchQuery: \"\", searchActiveItemIndex: null };\n  },\n  [5 /* RegisterItem */]: (state2, action) => {\n    let adjustedState = adjustOrderedState3(state2, (items) => [\n      ...items,\n      { id: action.id, dataRef: action.dataRef }\n    ]);\n    return { ...state2, ...adjustedState };\n  },\n  [6 /* UnregisterItem */]: (state2, action) => {\n    let adjustedState = adjustOrderedState3(state2, (items) => {\n      let idx = items.findIndex((a) => a.id === action.id);\n      if (idx !== -1)\n        items.splice(idx, 1);\n      return items;\n    });\n    return {\n      ...state2,\n      ...adjustedState,\n      activationTrigger: 1 /* Other */\n    };\n  }\n};\nvar MenuContext = (0, import_react31.createContext)(null);\nMenuContext.displayName = \"MenuContext\";\nfunction useMenuContext(component) {\n  let context = (0, import_react31.useContext)(MenuContext);\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <Menu /> component.`);\n    if (Error.captureStackTrace)\n      Error.captureStackTrace(err, useMenuContext);\n    throw err;\n  }\n  return context;\n}\nfunction stateReducer5(state2, action) {\n  return match(action.type, reducers5, state2, action);\n}\nvar DEFAULT_MENU_TAG = import_react31.Fragment;\nvar MenuRoot = forwardRefWithAs(function Menu(props, ref) {\n  let reducerBag = (0, import_react31.useReducer)(stateReducer5, {\n    menuState: 1 /* Closed */,\n    buttonRef: (0, import_react31.createRef)(),\n    itemsRef: (0, import_react31.createRef)(),\n    items: [],\n    searchQuery: \"\",\n    activeItemIndex: null,\n    activationTrigger: 1 /* Other */\n  });\n  let [{ menuState, itemsRef, buttonRef }, dispatch] = reducerBag;\n  let menuRef = useSyncRefs(ref);\n  useOutsideClick([buttonRef, itemsRef], (event, target) => {\n    var _a2;\n    dispatch({ type: 1 /* CloseMenu */ });\n    if (!isFocusableElement(target, 1 /* Loose */)) {\n      event.preventDefault();\n      (_a2 = buttonRef.current) == null ? void 0 : _a2.focus();\n    }\n  }, menuState === 0 /* Open */);\n  let slot = (0, import_react31.useMemo)(() => ({ open: menuState === 0 /* Open */ }), [menuState]);\n  let theirProps = props;\n  let ourProps = { ref: menuRef };\n  return /* @__PURE__ */ import_react31.default.createElement(MenuContext.Provider, {\n    value: reducerBag\n  }, /* @__PURE__ */ import_react31.default.createElement(OpenClosedProvider, {\n    value: match(menuState, {\n      [0 /* Open */]: 0 /* Open */,\n      [1 /* Closed */]: 1 /* Closed */\n    })\n  }, render({\n    ourProps,\n    theirProps,\n    slot,\n    defaultTag: DEFAULT_MENU_TAG,\n    name: \"Menu\"\n  })));\n});\nvar DEFAULT_BUTTON_TAG4 = \"button\";\nvar Button7 = forwardRefWithAs(function Button8(props, ref) {\n  var _a2;\n  let [state2, dispatch] = useMenuContext(\"Menu.Button\");\n  let buttonRef = useSyncRefs(state2.buttonRef, ref);\n  let id2 = `headlessui-menu-button-${useId()}`;\n  let d = useDisposables();\n  let handleKeyDown = useEvent((event) => {\n    switch (event.key) {\n      case \" \" /* Space */:\n      case \"Enter\" /* Enter */:\n      case \"ArrowDown\" /* ArrowDown */:\n        event.preventDefault();\n        event.stopPropagation();\n        dispatch({ type: 0 /* OpenMenu */ });\n        d.nextFrame(() => dispatch({ type: 2 /* GoToItem */, focus: 0 /* First */ }));\n        break;\n      case \"ArrowUp\" /* ArrowUp */:\n        event.preventDefault();\n        event.stopPropagation();\n        dispatch({ type: 0 /* OpenMenu */ });\n        d.nextFrame(() => dispatch({ type: 2 /* GoToItem */, focus: 3 /* Last */ }));\n        break;\n    }\n  });\n  let handleKeyUp = useEvent((event) => {\n    switch (event.key) {\n      case \" \" /* Space */:\n        event.preventDefault();\n        break;\n    }\n  });\n  let handleClick = useEvent((event) => {\n    if (isDisabledReactIssue7711(event.currentTarget))\n      return event.preventDefault();\n    if (props.disabled)\n      return;\n    if (state2.menuState === 0 /* Open */) {\n      dispatch({ type: 1 /* CloseMenu */ });\n      d.nextFrame(() => {\n        var _a3;\n        return (_a3 = state2.buttonRef.current) == null ? void 0 : _a3.focus({ preventScroll: true });\n      });\n    } else {\n      event.preventDefault();\n      dispatch({ type: 0 /* OpenMenu */ });\n    }\n  });\n  let slot = (0, import_react31.useMemo)(() => ({ open: state2.menuState === 0 /* Open */ }), [state2]);\n  let theirProps = props;\n  let ourProps = {\n    ref: buttonRef,\n    id: id2,\n    type: useResolveButtonType(props, state2.buttonRef),\n    \"aria-haspopup\": true,\n    \"aria-controls\": (_a2 = state2.itemsRef.current) == null ? void 0 : _a2.id,\n    \"aria-expanded\": props.disabled ? void 0 : state2.menuState === 0 /* Open */,\n    onKeyDown: handleKeyDown,\n    onKeyUp: handleKeyUp,\n    onClick: handleClick\n  };\n  return render({\n    ourProps,\n    theirProps,\n    slot,\n    defaultTag: DEFAULT_BUTTON_TAG4,\n    name: \"Menu.Button\"\n  });\n});\nvar DEFAULT_ITEMS_TAG = \"div\";\nvar ItemsRenderFeatures = 1 /* RenderStrategy */ | 2 /* Static */;\nvar Items = forwardRefWithAs(function Items2(props, ref) {\n  var _a2, _b;\n  let [state2, dispatch] = useMenuContext(\"Menu.Items\");\n  let itemsRef = useSyncRefs(state2.itemsRef, ref);\n  let ownerDocument = useOwnerDocument(state2.itemsRef);\n  let id2 = `headlessui-menu-items-${useId()}`;\n  let searchDisposables = useDisposables();\n  let usesOpenClosedState = useOpenClosed();\n  let visible = (() => {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === 0 /* Open */;\n    }\n    return state2.menuState === 0 /* Open */;\n  })();\n  (0, import_react31.useEffect)(() => {\n    let container = state2.itemsRef.current;\n    if (!container)\n      return;\n    if (state2.menuState !== 0 /* Open */)\n      return;\n    if (container === (ownerDocument == null ? void 0 : ownerDocument.activeElement))\n      return;\n    container.focus({ preventScroll: true });\n  }, [state2.menuState, state2.itemsRef, ownerDocument]);\n  useTreeWalker({\n    container: state2.itemsRef.current,\n    enabled: state2.menuState === 0 /* Open */,\n    accept(node) {\n      if (node.getAttribute(\"role\") === \"menuitem\")\n        return NodeFilter.FILTER_REJECT;\n      if (node.hasAttribute(\"role\"))\n        return NodeFilter.FILTER_SKIP;\n      return NodeFilter.FILTER_ACCEPT;\n    },\n    walk(node) {\n      node.setAttribute(\"role\", \"none\");\n    }\n  });\n  let handleKeyDown = useEvent((event) => {\n    var _a3, _b2;\n    searchDisposables.dispose();\n    switch (event.key) {\n      case \" \" /* Space */:\n        if (state2.searchQuery !== \"\") {\n          event.preventDefault();\n          event.stopPropagation();\n          return dispatch({ type: 3 /* Search */, value: event.key });\n        }\n      case \"Enter\" /* Enter */:\n        event.preventDefault();\n        event.stopPropagation();\n        dispatch({ type: 1 /* CloseMenu */ });\n        if (state2.activeItemIndex !== null) {\n          let { dataRef } = state2.items[state2.activeItemIndex];\n          (_b2 = (_a3 = dataRef.current) == null ? void 0 : _a3.domRef.current) == null ? void 0 : _b2.click();\n        }\n        restoreFocusIfNecessary(state2.buttonRef.current);\n        break;\n      case \"ArrowDown\" /* ArrowDown */:\n        event.preventDefault();\n        event.stopPropagation();\n        return dispatch({ type: 2 /* GoToItem */, focus: 2 /* Next */ });\n      case \"ArrowUp\" /* ArrowUp */:\n        event.preventDefault();\n        event.stopPropagation();\n        return dispatch({ type: 2 /* GoToItem */, focus: 1 /* Previous */ });\n      case \"Home\" /* Home */:\n      case \"PageUp\" /* PageUp */:\n        event.preventDefault();\n        event.stopPropagation();\n        return dispatch({ type: 2 /* GoToItem */, focus: 0 /* First */ });\n      case \"End\" /* End */:\n      case \"PageDown\" /* PageDown */:\n        event.preventDefault();\n        event.stopPropagation();\n        return dispatch({ type: 2 /* GoToItem */, focus: 3 /* Last */ });\n      case \"Escape\" /* Escape */:\n        event.preventDefault();\n        event.stopPropagation();\n        dispatch({ type: 1 /* CloseMenu */ });\n        disposables().nextFrame(() => {\n          var _a4;\n          return (_a4 = state2.buttonRef.current) == null ? void 0 : _a4.focus({ preventScroll: true });\n        });\n        break;\n      case \"Tab\" /* Tab */:\n        event.preventDefault();\n        event.stopPropagation();\n        dispatch({ type: 1 /* CloseMenu */ });\n        disposables().nextFrame(() => {\n          focusFrom(state2.buttonRef.current, event.shiftKey ? 2 /* Previous */ : 4 /* Next */);\n        });\n        break;\n      default:\n        if (event.key.length === 1) {\n          dispatch({ type: 3 /* Search */, value: event.key });\n          searchDisposables.setTimeout(() => dispatch({ type: 4 /* ClearSearch */ }), 350);\n        }\n        break;\n    }\n  });\n  let handleKeyUp = useEvent((event) => {\n    switch (event.key) {\n      case \" \" /* Space */:\n        event.preventDefault();\n        break;\n    }\n  });\n  let slot = (0, import_react31.useMemo)(() => ({ open: state2.menuState === 0 /* Open */ }), [state2]);\n  let theirProps = props;\n  let ourProps = {\n    \"aria-activedescendant\": state2.activeItemIndex === null ? void 0 : (_a2 = state2.items[state2.activeItemIndex]) == null ? void 0 : _a2.id,\n    \"aria-labelledby\": (_b = state2.buttonRef.current) == null ? void 0 : _b.id,\n    id: id2,\n    onKeyDown: handleKeyDown,\n    onKeyUp: handleKeyUp,\n    role: \"menu\",\n    tabIndex: 0,\n    ref: itemsRef\n  };\n  return render({\n    ourProps,\n    theirProps,\n    slot,\n    defaultTag: DEFAULT_ITEMS_TAG,\n    features: ItemsRenderFeatures,\n    visible,\n    name: \"Menu.Items\"\n  });\n});\nvar DEFAULT_ITEM_TAG = import_react31.Fragment;\nvar Item = forwardRefWithAs(function Item2(props, ref) {\n  let { disabled = false, ...theirProps } = props;\n  let [state2, dispatch] = useMenuContext(\"Menu.Item\");\n  let id2 = `headlessui-menu-item-${useId()}`;\n  let active = state2.activeItemIndex !== null ? state2.items[state2.activeItemIndex].id === id2 : false;\n  let internalItemRef = (0, import_react31.useRef)(null);\n  let itemRef = useSyncRefs(ref, internalItemRef);\n  useIsoMorphicEffect(() => {\n    if (state2.menuState !== 0 /* Open */)\n      return;\n    if (!active)\n      return;\n    if (state2.activationTrigger === 0 /* Pointer */)\n      return;\n    let d = disposables();\n    d.requestAnimationFrame(() => {\n      var _a2, _b;\n      (_b = (_a2 = internalItemRef.current) == null ? void 0 : _a2.scrollIntoView) == null ? void 0 : _b.call(_a2, { block: \"nearest\" });\n    });\n    return d.dispose;\n  }, [internalItemRef, active, state2.menuState, state2.activationTrigger, state2.activeItemIndex]);\n  let bag = (0, import_react31.useRef)({ disabled, domRef: internalItemRef });\n  useIsoMorphicEffect(() => {\n    bag.current.disabled = disabled;\n  }, [bag, disabled]);\n  useIsoMorphicEffect(() => {\n    var _a2, _b;\n    bag.current.textValue = (_b = (_a2 = internalItemRef.current) == null ? void 0 : _a2.textContent) == null ? void 0 : _b.toLowerCase();\n  }, [bag, internalItemRef]);\n  useIsoMorphicEffect(() => {\n    dispatch({ type: 5 /* RegisterItem */, id: id2, dataRef: bag });\n    return () => dispatch({ type: 6 /* UnregisterItem */, id: id2 });\n  }, [bag, id2]);\n  let handleClick = useEvent((event) => {\n    if (disabled)\n      return event.preventDefault();\n    dispatch({ type: 1 /* CloseMenu */ });\n    restoreFocusIfNecessary(state2.buttonRef.current);\n  });\n  let handleFocus = useEvent(() => {\n    if (disabled)\n      return dispatch({ type: 2 /* GoToItem */, focus: 5 /* Nothing */ });\n    dispatch({ type: 2 /* GoToItem */, focus: 4 /* Specific */, id: id2 });\n  });\n  let handleMove = useEvent(() => {\n    if (disabled)\n      return;\n    if (active)\n      return;\n    dispatch({\n      type: 2 /* GoToItem */,\n      focus: 4 /* Specific */,\n      id: id2,\n      trigger: 0 /* Pointer */\n    });\n  });\n  let handleLeave = useEvent(() => {\n    if (disabled)\n      return;\n    if (!active)\n      return;\n    dispatch({ type: 2 /* GoToItem */, focus: 5 /* Nothing */ });\n  });\n  let slot = (0, import_react31.useMemo)(() => ({ active, disabled }), [active, disabled]);\n  let ourProps = {\n    id: id2,\n    ref: itemRef,\n    role: \"menuitem\",\n    tabIndex: disabled === true ? void 0 : -1,\n    \"aria-disabled\": disabled === true ? true : void 0,\n    disabled: void 0,\n    onClick: handleClick,\n    onFocus: handleFocus,\n    onPointerMove: handleMove,\n    onMouseMove: handleMove,\n    onPointerLeave: handleLeave,\n    onMouseLeave: handleLeave\n  };\n  return render({\n    ourProps,\n    theirProps,\n    slot,\n    defaultTag: DEFAULT_ITEM_TAG,\n    name: \"Menu.Item\"\n  });\n});\nvar Menu2 = Object.assign(MenuRoot, { Button: Button7, Items, Item });\n\n// src/components/popover/popover.tsx\nvar import_react32 = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"), 1);\nvar reducers6 = {\n  [0 /* TogglePopover */]: (state2) => ({\n    ...state2,\n    popoverState: match(state2.popoverState, {\n      [0 /* Open */]: 1 /* Closed */,\n      [1 /* Closed */]: 0 /* Open */\n    })\n  }),\n  [1 /* ClosePopover */](state2) {\n    if (state2.popoverState === 1 /* Closed */)\n      return state2;\n    return { ...state2, popoverState: 1 /* Closed */ };\n  },\n  [2 /* SetButton */](state2, action) {\n    if (state2.button === action.button)\n      return state2;\n    return { ...state2, button: action.button };\n  },\n  [3 /* SetButtonId */](state2, action) {\n    if (state2.buttonId === action.buttonId)\n      return state2;\n    return { ...state2, buttonId: action.buttonId };\n  },\n  [4 /* SetPanel */](state2, action) {\n    if (state2.panel === action.panel)\n      return state2;\n    return { ...state2, panel: action.panel };\n  },\n  [5 /* SetPanelId */](state2, action) {\n    if (state2.panelId === action.panelId)\n      return state2;\n    return { ...state2, panelId: action.panelId };\n  }\n};\nvar PopoverContext = (0, import_react32.createContext)(null);\nPopoverContext.displayName = \"PopoverContext\";\nfunction usePopoverContext(component) {\n  let context = (0, import_react32.useContext)(PopoverContext);\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <Popover /> component.`);\n    if (Error.captureStackTrace)\n      Error.captureStackTrace(err, usePopoverContext);\n    throw err;\n  }\n  return context;\n}\nvar PopoverAPIContext = (0, import_react32.createContext)(null);\nPopoverAPIContext.displayName = \"PopoverAPIContext\";\nfunction usePopoverAPIContext(component) {\n  let context = (0, import_react32.useContext)(PopoverAPIContext);\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <Popover /> component.`);\n    if (Error.captureStackTrace)\n      Error.captureStackTrace(err, usePopoverAPIContext);\n    throw err;\n  }\n  return context;\n}\nvar PopoverGroupContext = (0, import_react32.createContext)(null);\nPopoverGroupContext.displayName = \"PopoverGroupContext\";\nfunction usePopoverGroupContext() {\n  return (0, import_react32.useContext)(PopoverGroupContext);\n}\nvar PopoverPanelContext = (0, import_react32.createContext)(null);\nPopoverPanelContext.displayName = \"PopoverPanelContext\";\nfunction usePopoverPanelContext() {\n  return (0, import_react32.useContext)(PopoverPanelContext);\n}\nfunction stateReducer6(state2, action) {\n  return match(action.type, reducers6, state2, action);\n}\nvar DEFAULT_POPOVER_TAG = \"div\";\nvar PopoverRoot = forwardRefWithAs(function Popover(props, ref) {\n  var _a2;\n  let buttonId = `headlessui-popover-button-${useId()}`;\n  let panelId = `headlessui-popover-panel-${useId()}`;\n  let internalPopoverRef = (0, import_react32.useRef)(null);\n  let popoverRef = useSyncRefs(ref, optionalRef((ref2) => {\n    internalPopoverRef.current = ref2;\n  }));\n  let reducerBag = (0, import_react32.useReducer)(stateReducer6, {\n    popoverState: 1 /* Closed */,\n    button: null,\n    buttonId,\n    panel: null,\n    panelId,\n    beforePanelSentinel: (0, import_react32.createRef)(),\n    afterPanelSentinel: (0, import_react32.createRef)()\n  });\n  let [{ popoverState, button, panel, beforePanelSentinel, afterPanelSentinel }, dispatch] = reducerBag;\n  let ownerDocument = useOwnerDocument((_a2 = internalPopoverRef.current) != null ? _a2 : button);\n  (0, import_react32.useEffect)(() => dispatch({ type: 3 /* SetButtonId */, buttonId }), [buttonId, dispatch]);\n  (0, import_react32.useEffect)(() => dispatch({ type: 5 /* SetPanelId */, panelId }), [panelId, dispatch]);\n  let isPortalled = (0, import_react32.useMemo)(() => {\n    if (!button)\n      return false;\n    if (!panel)\n      return false;\n    for (let root of document.querySelectorAll(\"body > *\")) {\n      if (Number(root == null ? void 0 : root.contains(button)) ^ Number(root == null ? void 0 : root.contains(panel))) {\n        return true;\n      }\n    }\n    return false;\n  }, [button, panel]);\n  let registerBag = (0, import_react32.useMemo)(() => ({ buttonId, panelId, close: () => dispatch({ type: 1 /* ClosePopover */ }) }), [buttonId, panelId, dispatch]);\n  let groupContext = usePopoverGroupContext();\n  let registerPopover = groupContext == null ? void 0 : groupContext.registerPopover;\n  let isFocusWithinPopoverGroup = useEvent(() => {\n    var _a3;\n    return (_a3 = groupContext == null ? void 0 : groupContext.isFocusWithinPopoverGroup()) != null ? _a3 : (ownerDocument == null ? void 0 : ownerDocument.activeElement) && ((button == null ? void 0 : button.contains(ownerDocument.activeElement)) || (panel == null ? void 0 : panel.contains(ownerDocument.activeElement)));\n  });\n  (0, import_react32.useEffect)(() => registerPopover == null ? void 0 : registerPopover(registerBag), [registerPopover, registerBag]);\n  useEventListener(ownerDocument == null ? void 0 : ownerDocument.defaultView, \"focus\", (event) => {\n    var _a3, _b, _c, _d;\n    if (popoverState !== 0 /* Open */)\n      return;\n    if (isFocusWithinPopoverGroup())\n      return;\n    if (!button)\n      return;\n    if (!panel)\n      return;\n    if ((_b = (_a3 = beforePanelSentinel.current) == null ? void 0 : _a3.contains) == null ? void 0 : _b.call(_a3, event.target))\n      return;\n    if ((_d = (_c = afterPanelSentinel.current) == null ? void 0 : _c.contains) == null ? void 0 : _d.call(_c, event.target))\n      return;\n    dispatch({ type: 1 /* ClosePopover */ });\n  }, true);\n  useOutsideClick([button, panel], (event, target) => {\n    dispatch({ type: 1 /* ClosePopover */ });\n    if (!isFocusableElement(target, 1 /* Loose */)) {\n      event.preventDefault();\n      button == null ? void 0 : button.focus();\n    }\n  }, popoverState === 0 /* Open */);\n  let close = useEvent((focusableElement) => {\n    dispatch({ type: 1 /* ClosePopover */ });\n    let restoreElement = (() => {\n      if (!focusableElement)\n        return button;\n      if (focusableElement instanceof HTMLElement)\n        return focusableElement;\n      if (\"current\" in focusableElement && focusableElement.current instanceof HTMLElement)\n        return focusableElement.current;\n      return button;\n    })();\n    restoreElement == null ? void 0 : restoreElement.focus();\n  });\n  let api = (0, import_react32.useMemo)(() => ({ close, isPortalled }), [close, isPortalled]);\n  let slot = (0, import_react32.useMemo)(() => ({ open: popoverState === 0 /* Open */, close }), [popoverState, close]);\n  let theirProps = props;\n  let ourProps = { ref: popoverRef };\n  return /* @__PURE__ */ import_react32.default.createElement(PopoverContext.Provider, {\n    value: reducerBag\n  }, /* @__PURE__ */ import_react32.default.createElement(PopoverAPIContext.Provider, {\n    value: api\n  }, /* @__PURE__ */ import_react32.default.createElement(OpenClosedProvider, {\n    value: match(popoverState, {\n      [0 /* Open */]: 0 /* Open */,\n      [1 /* Closed */]: 1 /* Closed */\n    })\n  }, render({\n    ourProps,\n    theirProps,\n    slot,\n    defaultTag: DEFAULT_POPOVER_TAG,\n    name: \"Popover\"\n  }))));\n});\nvar DEFAULT_BUTTON_TAG5 = \"button\";\nvar Button9 = forwardRefWithAs(function Button10(props, ref) {\n  let [state2, dispatch] = usePopoverContext(\"Popover.Button\");\n  let { isPortalled } = usePopoverAPIContext(\"Popover.Button\");\n  let internalButtonRef = (0, import_react32.useRef)(null);\n  let sentinelId = `headlessui-focus-sentinel-${useId()}`;\n  let groupContext = usePopoverGroupContext();\n  let closeOthers = groupContext == null ? void 0 : groupContext.closeOthers;\n  let panelContext = usePopoverPanelContext();\n  let isWithinPanel = panelContext === null ? false : panelContext === state2.panelId;\n  let buttonRef = useSyncRefs(internalButtonRef, ref, isWithinPanel ? null : (button) => dispatch({ type: 2 /* SetButton */, button }));\n  let withinPanelButtonRef = useSyncRefs(internalButtonRef, ref);\n  let ownerDocument = useOwnerDocument(internalButtonRef);\n  let handleKeyDown = useEvent((event) => {\n    var _a2, _b, _c;\n    if (isWithinPanel) {\n      if (state2.popoverState === 1 /* Closed */)\n        return;\n      switch (event.key) {\n        case \" \" /* Space */:\n        case \"Enter\" /* Enter */:\n          event.preventDefault();\n          (_b = (_a2 = event.target).click) == null ? void 0 : _b.call(_a2);\n          dispatch({ type: 1 /* ClosePopover */ });\n          (_c = state2.button) == null ? void 0 : _c.focus();\n          break;\n      }\n    } else {\n      switch (event.key) {\n        case \" \" /* Space */:\n        case \"Enter\" /* Enter */:\n          event.preventDefault();\n          event.stopPropagation();\n          if (state2.popoverState === 1 /* Closed */)\n            closeOthers == null ? void 0 : closeOthers(state2.buttonId);\n          dispatch({ type: 0 /* TogglePopover */ });\n          break;\n        case \"Escape\" /* Escape */:\n          if (state2.popoverState !== 0 /* Open */)\n            return closeOthers == null ? void 0 : closeOthers(state2.buttonId);\n          if (!internalButtonRef.current)\n            return;\n          if ((ownerDocument == null ? void 0 : ownerDocument.activeElement) && !internalButtonRef.current.contains(ownerDocument.activeElement)) {\n            return;\n          }\n          event.preventDefault();\n          event.stopPropagation();\n          dispatch({ type: 1 /* ClosePopover */ });\n          break;\n      }\n    }\n  });\n  let handleKeyUp = useEvent((event) => {\n    if (isWithinPanel)\n      return;\n    if (event.key === \" \" /* Space */) {\n      event.preventDefault();\n    }\n  });\n  let handleClick = useEvent((event) => {\n    var _a2, _b;\n    if (isDisabledReactIssue7711(event.currentTarget))\n      return;\n    if (props.disabled)\n      return;\n    if (isWithinPanel) {\n      dispatch({ type: 1 /* ClosePopover */ });\n      (_a2 = state2.button) == null ? void 0 : _a2.focus();\n    } else {\n      event.preventDefault();\n      event.stopPropagation();\n      if (state2.popoverState === 1 /* Closed */)\n        closeOthers == null ? void 0 : closeOthers(state2.buttonId);\n      dispatch({ type: 0 /* TogglePopover */ });\n      (_b = state2.button) == null ? void 0 : _b.focus();\n    }\n  });\n  let handleMouseDown = useEvent((event) => {\n    event.preventDefault();\n    event.stopPropagation();\n  });\n  let visible = state2.popoverState === 0 /* Open */;\n  let slot = (0, import_react32.useMemo)(() => ({ open: visible }), [visible]);\n  let type = useResolveButtonType(props, internalButtonRef);\n  let theirProps = props;\n  let ourProps = isWithinPanel ? {\n    ref: withinPanelButtonRef,\n    type,\n    onKeyDown: handleKeyDown,\n    onClick: handleClick\n  } : {\n    ref: buttonRef,\n    id: state2.buttonId,\n    type,\n    \"aria-expanded\": props.disabled ? void 0 : state2.popoverState === 0 /* Open */,\n    \"aria-controls\": state2.panel ? state2.panelId : void 0,\n    onKeyDown: handleKeyDown,\n    onKeyUp: handleKeyUp,\n    onClick: handleClick,\n    onMouseDown: handleMouseDown\n  };\n  let direction = useTabDirection();\n  let handleFocus = useEvent(() => {\n    let el = state2.panel;\n    if (!el)\n      return;\n    function run() {\n      match(direction.current, {\n        [0 /* Forwards */]: () => focusIn(el, 1 /* First */),\n        [1 /* Backwards */]: () => focusIn(el, 8 /* Last */)\n      });\n    }\n    if (false) {} else {\n      run();\n    }\n  });\n  return /* @__PURE__ */ import_react32.default.createElement(import_react32.default.Fragment, null, render({\n    ourProps,\n    theirProps,\n    slot,\n    defaultTag: DEFAULT_BUTTON_TAG5,\n    name: \"Popover.Button\"\n  }), visible && !isWithinPanel && isPortalled && /* @__PURE__ */ import_react32.default.createElement(Hidden, {\n    id: sentinelId,\n    features: 2 /* Focusable */,\n    as: \"button\",\n    type: \"button\",\n    onFocus: handleFocus\n  }));\n});\nvar DEFAULT_OVERLAY_TAG2 = \"div\";\nvar OverlayRenderFeatures = 1 /* RenderStrategy */ | 2 /* Static */;\nvar Overlay3 = forwardRefWithAs(function Overlay4(props, ref) {\n  let [{ popoverState }, dispatch] = usePopoverContext(\"Popover.Overlay\");\n  let overlayRef = useSyncRefs(ref);\n  let id2 = `headlessui-popover-overlay-${useId()}`;\n  let usesOpenClosedState = useOpenClosed();\n  let visible = (() => {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === 0 /* Open */;\n    }\n    return popoverState === 0 /* Open */;\n  })();\n  let handleClick = useEvent((event) => {\n    if (isDisabledReactIssue7711(event.currentTarget))\n      return event.preventDefault();\n    dispatch({ type: 1 /* ClosePopover */ });\n  });\n  let slot = (0, import_react32.useMemo)(() => ({ open: popoverState === 0 /* Open */ }), [popoverState]);\n  let theirProps = props;\n  let ourProps = {\n    ref: overlayRef,\n    id: id2,\n    \"aria-hidden\": true,\n    onClick: handleClick\n  };\n  return render({\n    ourProps,\n    theirProps,\n    slot,\n    defaultTag: DEFAULT_OVERLAY_TAG2,\n    features: OverlayRenderFeatures,\n    visible,\n    name: \"Popover.Overlay\"\n  });\n});\nvar DEFAULT_PANEL_TAG3 = \"div\";\nvar PanelRenderFeatures2 = 1 /* RenderStrategy */ | 2 /* Static */;\nvar Panel5 = forwardRefWithAs(function Panel6(props, ref) {\n  let { focus = false, ...theirProps } = props;\n  let [state2, dispatch] = usePopoverContext(\"Popover.Panel\");\n  let { close, isPortalled } = usePopoverAPIContext(\"Popover.Panel\");\n  let beforePanelSentinelId = `headlessui-focus-sentinel-before-${useId()}`;\n  let afterPanelSentinelId = `headlessui-focus-sentinel-after-${useId()}`;\n  let internalPanelRef = (0, import_react32.useRef)(null);\n  let panelRef = useSyncRefs(internalPanelRef, ref, (panel) => {\n    dispatch({ type: 4 /* SetPanel */, panel });\n  });\n  let ownerDocument = useOwnerDocument(internalPanelRef);\n  let usesOpenClosedState = useOpenClosed();\n  let visible = (() => {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === 0 /* Open */;\n    }\n    return state2.popoverState === 0 /* Open */;\n  })();\n  let handleKeyDown = useEvent((event) => {\n    var _a2;\n    switch (event.key) {\n      case \"Escape\" /* Escape */:\n        if (state2.popoverState !== 0 /* Open */)\n          return;\n        if (!internalPanelRef.current)\n          return;\n        if ((ownerDocument == null ? void 0 : ownerDocument.activeElement) && !internalPanelRef.current.contains(ownerDocument.activeElement)) {\n          return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n        dispatch({ type: 1 /* ClosePopover */ });\n        (_a2 = state2.button) == null ? void 0 : _a2.focus();\n        break;\n    }\n  });\n  (0, import_react32.useEffect)(() => {\n    var _a2;\n    if (props.static)\n      return;\n    if (state2.popoverState === 1 /* Closed */ && ((_a2 = props.unmount) != null ? _a2 : true)) {\n      dispatch({ type: 4 /* SetPanel */, panel: null });\n    }\n  }, [state2.popoverState, props.unmount, props.static, dispatch]);\n  (0, import_react32.useEffect)(() => {\n    if (!focus)\n      return;\n    if (state2.popoverState !== 0 /* Open */)\n      return;\n    if (!internalPanelRef.current)\n      return;\n    let activeElement = ownerDocument == null ? void 0 : ownerDocument.activeElement;\n    if (internalPanelRef.current.contains(activeElement))\n      return;\n    focusIn(internalPanelRef.current, 1 /* First */);\n  }, [focus, internalPanelRef, state2.popoverState]);\n  let slot = (0, import_react32.useMemo)(() => ({ open: state2.popoverState === 0 /* Open */, close }), [state2, close]);\n  let ourProps = {\n    ref: panelRef,\n    id: state2.panelId,\n    onKeyDown: handleKeyDown,\n    onBlur: focus && state2.popoverState === 0 /* Open */ ? (event) => {\n      var _a2, _b, _c, _d, _e;\n      let el = event.relatedTarget;\n      if (!el)\n        return;\n      if (!internalPanelRef.current)\n        return;\n      if ((_a2 = internalPanelRef.current) == null ? void 0 : _a2.contains(el))\n        return;\n      dispatch({ type: 1 /* ClosePopover */ });\n      if (((_c = (_b = state2.beforePanelSentinel.current) == null ? void 0 : _b.contains) == null ? void 0 : _c.call(_b, el)) || ((_e = (_d = state2.afterPanelSentinel.current) == null ? void 0 : _d.contains) == null ? void 0 : _e.call(_d, el))) {\n        el.focus({ preventScroll: true });\n      }\n    } : void 0,\n    tabIndex: -1\n  };\n  let direction = useTabDirection();\n  let handleBeforeFocus = useEvent(() => {\n    let el = internalPanelRef.current;\n    if (!el)\n      return;\n    function run() {\n      match(direction.current, {\n        [0 /* Forwards */]: () => {\n          focusIn(el, 1 /* First */);\n        },\n        [1 /* Backwards */]: () => {\n          var _a2;\n          (_a2 = state2.button) == null ? void 0 : _a2.focus({ preventScroll: true });\n        }\n      });\n    }\n    if (false) {} else {\n      run();\n    }\n  });\n  let handleAfterFocus = useEvent(() => {\n    let el = internalPanelRef.current;\n    if (!el)\n      return;\n    function run() {\n      match(direction.current, {\n        [0 /* Forwards */]: () => {\n          var _a2, _b, _c;\n          if (!state2.button)\n            return;\n          let elements = getFocusableElements();\n          let idx = elements.indexOf(state2.button);\n          let before = elements.slice(0, idx + 1);\n          let after = elements.slice(idx + 1);\n          let combined = [...after, ...before];\n          for (let element of combined.slice()) {\n            if (((_b = (_a2 = element == null ? void 0 : element.id) == null ? void 0 : _a2.startsWith) == null ? void 0 : _b.call(_a2, \"headlessui-focus-sentinel-\")) || ((_c = state2.panel) == null ? void 0 : _c.contains(element))) {\n              let idx2 = combined.indexOf(element);\n              if (idx2 !== -1)\n                combined.splice(idx2, 1);\n            }\n          }\n          focusIn(combined, 1 /* First */, false);\n        },\n        [1 /* Backwards */]: () => focusIn(el, 8 /* Last */)\n      });\n    }\n    if (false) {} else {\n      run();\n    }\n  });\n  return /* @__PURE__ */ import_react32.default.createElement(PopoverPanelContext.Provider, {\n    value: state2.panelId\n  }, visible && isPortalled && /* @__PURE__ */ import_react32.default.createElement(Hidden, {\n    id: beforePanelSentinelId,\n    ref: state2.beforePanelSentinel,\n    features: 2 /* Focusable */,\n    as: \"button\",\n    type: \"button\",\n    onFocus: handleBeforeFocus\n  }), render({\n    ourProps,\n    theirProps,\n    slot,\n    defaultTag: DEFAULT_PANEL_TAG3,\n    features: PanelRenderFeatures2,\n    visible,\n    name: \"Popover.Panel\"\n  }), visible && isPortalled && /* @__PURE__ */ import_react32.default.createElement(Hidden, {\n    id: afterPanelSentinelId,\n    ref: state2.afterPanelSentinel,\n    features: 2 /* Focusable */,\n    as: \"button\",\n    type: \"button\",\n    onFocus: handleAfterFocus\n  }));\n});\nvar DEFAULT_GROUP_TAG2 = \"div\";\nvar Group3 = forwardRefWithAs(function Group4(props, ref) {\n  let internalGroupRef = (0, import_react32.useRef)(null);\n  let groupRef = useSyncRefs(internalGroupRef, ref);\n  let [popovers, setPopovers] = (0, import_react32.useState)([]);\n  let unregisterPopover = useEvent((registerbag) => {\n    setPopovers((existing) => {\n      let idx = existing.indexOf(registerbag);\n      if (idx !== -1) {\n        let clone = existing.slice();\n        clone.splice(idx, 1);\n        return clone;\n      }\n      return existing;\n    });\n  });\n  let registerPopover = useEvent((registerbag) => {\n    setPopovers((existing) => [...existing, registerbag]);\n    return () => unregisterPopover(registerbag);\n  });\n  let isFocusWithinPopoverGroup = useEvent(() => {\n    var _a2;\n    let ownerDocument = getOwnerDocument(internalGroupRef);\n    if (!ownerDocument)\n      return false;\n    let element = ownerDocument.activeElement;\n    if ((_a2 = internalGroupRef.current) == null ? void 0 : _a2.contains(element))\n      return true;\n    return popovers.some((bag) => {\n      var _a3, _b;\n      return ((_a3 = ownerDocument.getElementById(bag.buttonId)) == null ? void 0 : _a3.contains(element)) || ((_b = ownerDocument.getElementById(bag.panelId)) == null ? void 0 : _b.contains(element));\n    });\n  });\n  let closeOthers = useEvent((buttonId) => {\n    for (let popover of popovers) {\n      if (popover.buttonId !== buttonId)\n        popover.close();\n    }\n  });\n  let contextBag = (0, import_react32.useMemo)(() => ({\n    registerPopover,\n    unregisterPopover,\n    isFocusWithinPopoverGroup,\n    closeOthers\n  }), [registerPopover, unregisterPopover, isFocusWithinPopoverGroup, closeOthers]);\n  let slot = (0, import_react32.useMemo)(() => ({}), []);\n  let theirProps = props;\n  let ourProps = { ref: groupRef };\n  return /* @__PURE__ */ import_react32.default.createElement(PopoverGroupContext.Provider, {\n    value: contextBag\n  }, render({\n    ourProps,\n    theirProps,\n    slot,\n    defaultTag: DEFAULT_GROUP_TAG2,\n    name: \"Popover.Group\"\n  }));\n});\nvar Popover2 = Object.assign(PopoverRoot, { Button: Button9, Overlay: Overlay3, Panel: Panel5, Group: Group3 });\n\n// src/components/radio-group/radio-group.tsx\nvar import_react35 = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"), 1);\n\n// src/hooks/use-flags.ts\nvar import_react33 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nfunction useFlags(initialFlags = 0) {\n  let [flags, setFlags] = (0, import_react33.useState)(initialFlags);\n  let addFlag = (0, import_react33.useCallback)((flag) => setFlags((flags2) => flags2 | flag), [flags]);\n  let hasFlag = (0, import_react33.useCallback)((flag) => Boolean(flags & flag), [flags]);\n  let removeFlag = (0, import_react33.useCallback)((flag) => setFlags((flags2) => flags2 & ~flag), [setFlags]);\n  let toggleFlag = (0, import_react33.useCallback)((flag) => setFlags((flags2) => flags2 ^ flag), [setFlags]);\n  return { addFlag, hasFlag, removeFlag, toggleFlag };\n}\n\n// src/components/label/label.tsx\nvar import_react34 = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"), 1);\nvar LabelContext = (0, import_react34.createContext)(null);\nfunction useLabelContext() {\n  let context = (0, import_react34.useContext)(LabelContext);\n  if (context === null) {\n    let err = new Error(\"You used a <Label /> component, but it is not inside a relevant parent.\");\n    if (Error.captureStackTrace)\n      Error.captureStackTrace(err, useLabelContext);\n    throw err;\n  }\n  return context;\n}\nfunction useLabels() {\n  let [labelIds, setLabelIds] = (0, import_react34.useState)([]);\n  return [\n    labelIds.length > 0 ? labelIds.join(\" \") : void 0,\n    (0, import_react34.useMemo)(() => {\n      return function LabelProvider(props) {\n        let register = useEvent((value) => {\n          setLabelIds((existing) => [...existing, value]);\n          return () => setLabelIds((existing) => {\n            let clone = existing.slice();\n            let idx = clone.indexOf(value);\n            if (idx !== -1)\n              clone.splice(idx, 1);\n            return clone;\n          });\n        });\n        let contextBag = (0, import_react34.useMemo)(() => ({ register, slot: props.slot, name: props.name, props: props.props }), [register, props.slot, props.name, props.props]);\n        return /* @__PURE__ */ import_react34.default.createElement(LabelContext.Provider, {\n          value: contextBag\n        }, props.children);\n      };\n    }, [setLabelIds])\n  ];\n}\nvar DEFAULT_LABEL_TAG3 = \"label\";\nvar Label5 = forwardRefWithAs(function Label6(props, ref) {\n  let { passive = false, ...theirProps } = props;\n  let context = useLabelContext();\n  let id2 = `headlessui-label-${useId()}`;\n  let labelRef = useSyncRefs(ref);\n  useIsoMorphicEffect(() => context.register(id2), [id2, context.register]);\n  let ourProps = { ref: labelRef, ...context.props, id: id2 };\n  if (passive) {\n    if (\"onClick\" in ourProps) {\n      delete ourProps[\"onClick\"];\n    }\n    if (\"onClick\" in theirProps) {\n      delete theirProps[\"onClick\"];\n    }\n  }\n  return render({\n    ourProps,\n    theirProps,\n    slot: context.slot || {},\n    defaultTag: DEFAULT_LABEL_TAG3,\n    name: context.name || \"Label\"\n  });\n});\n\n// src/components/radio-group/radio-group.tsx\nvar reducers7 = {\n  [0 /* RegisterOption */](state2, action) {\n    let nextOptions = [\n      ...state2.options,\n      { id: action.id, element: action.element, propsRef: action.propsRef }\n    ];\n    return {\n      ...state2,\n      options: sortByDomNode(nextOptions, (option) => option.element.current)\n    };\n  },\n  [1 /* UnregisterOption */](state2, action) {\n    let options = state2.options.slice();\n    let idx = state2.options.findIndex((radio) => radio.id === action.id);\n    if (idx === -1)\n      return state2;\n    options.splice(idx, 1);\n    return { ...state2, options };\n  }\n};\nvar RadioGroupContext = (0, import_react35.createContext)(null);\nRadioGroupContext.displayName = \"RadioGroupContext\";\nfunction useRadioGroupContext(component) {\n  let context = (0, import_react35.useContext)(RadioGroupContext);\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <RadioGroup /> component.`);\n    if (Error.captureStackTrace)\n      Error.captureStackTrace(err, useRadioGroupContext);\n    throw err;\n  }\n  return context;\n}\nfunction stateReducer7(state2, action) {\n  return match(action.type, reducers7, state2, action);\n}\nvar DEFAULT_RADIO_GROUP_TAG = \"div\";\nvar RadioGroupRoot = forwardRefWithAs(function RadioGroup(props, ref) {\n  let {\n    value: controlledValue,\n    defaultValue,\n    name,\n    onChange: controlledOnChange,\n    by = (a, z) => a === z,\n    disabled = false,\n    ...theirProps\n  } = props;\n  let compare = useEvent(typeof by === \"string\" ? (a, z) => {\n    let property = by;\n    return (a == null ? void 0 : a[property]) === (z == null ? void 0 : z[property]);\n  } : by);\n  let [state2, dispatch] = (0, import_react35.useReducer)(stateReducer7, { options: [] });\n  let options = state2.options;\n  let [labelledby, LabelProvider] = useLabels();\n  let [describedby, DescriptionProvider] = useDescriptions();\n  let id2 = `headlessui-radiogroup-${useId()}`;\n  let internalRadioGroupRef = (0, import_react35.useRef)(null);\n  let radioGroupRef = useSyncRefs(internalRadioGroupRef, ref);\n  let [value, onChange] = useControllable(controlledValue, controlledOnChange, defaultValue);\n  let firstOption = (0, import_react35.useMemo)(() => options.find((option) => {\n    if (option.propsRef.current.disabled)\n      return false;\n    return true;\n  }), [options]);\n  let containsCheckedOption = (0, import_react35.useMemo)(() => options.some((option) => compare(option.propsRef.current.value, value)), [options, value]);\n  let triggerChange = useEvent((nextValue) => {\n    var _a2;\n    if (disabled)\n      return false;\n    if (compare(nextValue, value))\n      return false;\n    let nextOption = (_a2 = options.find((option) => compare(option.propsRef.current.value, nextValue))) == null ? void 0 : _a2.propsRef.current;\n    if (nextOption == null ? void 0 : nextOption.disabled)\n      return false;\n    onChange == null ? void 0 : onChange(nextValue);\n    return true;\n  });\n  useTreeWalker({\n    container: internalRadioGroupRef.current,\n    accept(node) {\n      if (node.getAttribute(\"role\") === \"radio\")\n        return NodeFilter.FILTER_REJECT;\n      if (node.hasAttribute(\"role\"))\n        return NodeFilter.FILTER_SKIP;\n      return NodeFilter.FILTER_ACCEPT;\n    },\n    walk(node) {\n      node.setAttribute(\"role\", \"none\");\n    }\n  });\n  let handleKeyDown = useEvent((event) => {\n    let container = internalRadioGroupRef.current;\n    if (!container)\n      return;\n    let ownerDocument = getOwnerDocument(container);\n    let all = options.filter((option) => option.propsRef.current.disabled === false).map((radio) => radio.element.current);\n    switch (event.key) {\n      case \"Enter\" /* Enter */:\n        attemptSubmit(event.currentTarget);\n        break;\n      case \"ArrowLeft\" /* ArrowLeft */:\n      case \"ArrowUp\" /* ArrowUp */:\n        {\n          event.preventDefault();\n          event.stopPropagation();\n          let result = focusIn(all, 2 /* Previous */ | 16 /* WrapAround */);\n          if (result === 2 /* Success */) {\n            let activeOption = options.find((option) => option.element.current === (ownerDocument == null ? void 0 : ownerDocument.activeElement));\n            if (activeOption)\n              triggerChange(activeOption.propsRef.current.value);\n          }\n        }\n        break;\n      case \"ArrowRight\" /* ArrowRight */:\n      case \"ArrowDown\" /* ArrowDown */:\n        {\n          event.preventDefault();\n          event.stopPropagation();\n          let result = focusIn(all, 4 /* Next */ | 16 /* WrapAround */);\n          if (result === 2 /* Success */) {\n            let activeOption = options.find((option) => option.element.current === (ownerDocument == null ? void 0 : ownerDocument.activeElement));\n            if (activeOption)\n              triggerChange(activeOption.propsRef.current.value);\n          }\n        }\n        break;\n      case \" \" /* Space */:\n        {\n          event.preventDefault();\n          event.stopPropagation();\n          let activeOption = options.find((option) => option.element.current === (ownerDocument == null ? void 0 : ownerDocument.activeElement));\n          if (activeOption)\n            triggerChange(activeOption.propsRef.current.value);\n        }\n        break;\n    }\n  });\n  let registerOption = useEvent((option) => {\n    dispatch({ type: 0 /* RegisterOption */, ...option });\n    return () => dispatch({ type: 1 /* UnregisterOption */, id: option.id });\n  });\n  let api = (0, import_react35.useMemo)(() => ({\n    registerOption,\n    firstOption,\n    containsCheckedOption,\n    change: triggerChange,\n    disabled,\n    value,\n    compare\n  }), [registerOption, firstOption, containsCheckedOption, triggerChange, disabled, value, compare]);\n  let ourProps = {\n    ref: radioGroupRef,\n    id: id2,\n    role: \"radiogroup\",\n    \"aria-labelledby\": labelledby,\n    \"aria-describedby\": describedby,\n    onKeyDown: handleKeyDown\n  };\n  let slot = (0, import_react35.useMemo)(() => ({ value }), [value]);\n  return /* @__PURE__ */ import_react35.default.createElement(DescriptionProvider, {\n    name: \"RadioGroup.Description\"\n  }, /* @__PURE__ */ import_react35.default.createElement(LabelProvider, {\n    name: \"RadioGroup.Label\"\n  }, /* @__PURE__ */ import_react35.default.createElement(RadioGroupContext.Provider, {\n    value: api\n  }, name != null && value != null && objectToFormEntries({ [name]: value }).map(([name2, value2]) => /* @__PURE__ */ import_react35.default.createElement(Hidden, {\n    features: 4 /* Hidden */,\n    ...compact({\n      key: name2,\n      as: \"input\",\n      type: \"radio\",\n      checked: value2 != null,\n      hidden: true,\n      readOnly: true,\n      name: name2,\n      value: value2\n    })\n  })), render({\n    ourProps,\n    theirProps,\n    slot,\n    defaultTag: DEFAULT_RADIO_GROUP_TAG,\n    name: \"RadioGroup\"\n  }))));\n});\nvar DEFAULT_OPTION_TAG3 = \"div\";\nvar Option5 = forwardRefWithAs(function Option6(props, ref) {\n  let internalOptionRef = (0, import_react35.useRef)(null);\n  let optionRef = useSyncRefs(internalOptionRef, ref);\n  let id2 = `headlessui-radiogroup-option-${useId()}`;\n  let [labelledby, LabelProvider] = useLabels();\n  let [describedby, DescriptionProvider] = useDescriptions();\n  let { addFlag, removeFlag, hasFlag } = useFlags(1 /* Empty */);\n  let { value, disabled = false, ...theirProps } = props;\n  let propsRef = (0, import_react35.useRef)({ value, disabled });\n  useIsoMorphicEffect(() => {\n    propsRef.current.value = value;\n  }, [value, propsRef]);\n  useIsoMorphicEffect(() => {\n    propsRef.current.disabled = disabled;\n  }, [disabled, propsRef]);\n  let {\n    registerOption,\n    disabled: radioGroupDisabled,\n    change,\n    firstOption,\n    containsCheckedOption,\n    value: radioGroupValue,\n    compare\n  } = useRadioGroupContext(\"RadioGroup.Option\");\n  useIsoMorphicEffect(() => registerOption({ id: id2, element: internalOptionRef, propsRef }), [id2, registerOption, internalOptionRef, props]);\n  let handleClick = useEvent((event) => {\n    var _a2;\n    if (isDisabledReactIssue7711(event.currentTarget))\n      return event.preventDefault();\n    if (!change(value))\n      return;\n    addFlag(2 /* Active */);\n    (_a2 = internalOptionRef.current) == null ? void 0 : _a2.focus();\n  });\n  let handleFocus = useEvent((event) => {\n    if (isDisabledReactIssue7711(event.currentTarget))\n      return event.preventDefault();\n    addFlag(2 /* Active */);\n  });\n  let handleBlur = useEvent(() => removeFlag(2 /* Active */));\n  let isFirstOption = (firstOption == null ? void 0 : firstOption.id) === id2;\n  let isDisabled = radioGroupDisabled || disabled;\n  let checked = compare(radioGroupValue, value);\n  let ourProps = {\n    ref: optionRef,\n    id: id2,\n    role: \"radio\",\n    \"aria-checked\": checked ? \"true\" : \"false\",\n    \"aria-labelledby\": labelledby,\n    \"aria-describedby\": describedby,\n    \"aria-disabled\": isDisabled ? true : void 0,\n    tabIndex: (() => {\n      if (isDisabled)\n        return -1;\n      if (checked)\n        return 0;\n      if (!containsCheckedOption && isFirstOption)\n        return 0;\n      return -1;\n    })(),\n    onClick: isDisabled ? void 0 : handleClick,\n    onFocus: isDisabled ? void 0 : handleFocus,\n    onBlur: isDisabled ? void 0 : handleBlur\n  };\n  let slot = (0, import_react35.useMemo)(() => ({ checked, disabled: isDisabled, active: hasFlag(2 /* Active */) }), [checked, isDisabled, hasFlag]);\n  return /* @__PURE__ */ import_react35.default.createElement(DescriptionProvider, {\n    name: \"RadioGroup.Description\"\n  }, /* @__PURE__ */ import_react35.default.createElement(LabelProvider, {\n    name: \"RadioGroup.Label\"\n  }, render({\n    ourProps,\n    theirProps,\n    slot,\n    defaultTag: DEFAULT_OPTION_TAG3,\n    name: \"RadioGroup.Option\"\n  })));\n});\nvar RadioGroup2 = Object.assign(RadioGroupRoot, { Option: Option5, Label: Label5, Description });\n\n// src/components/switch/switch.tsx\nvar import_react36 = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"), 1);\nvar GroupContext = (0, import_react36.createContext)(null);\nGroupContext.displayName = \"GroupContext\";\nvar DEFAULT_GROUP_TAG3 = import_react36.Fragment;\nfunction Group5(props) {\n  let [switchElement, setSwitchElement] = (0, import_react36.useState)(null);\n  let [labelledby, LabelProvider] = useLabels();\n  let [describedby, DescriptionProvider] = useDescriptions();\n  let context = (0, import_react36.useMemo)(() => ({ switch: switchElement, setSwitch: setSwitchElement, labelledby, describedby }), [switchElement, setSwitchElement, labelledby, describedby]);\n  let ourProps = {};\n  let theirProps = props;\n  return /* @__PURE__ */ import_react36.default.createElement(DescriptionProvider, {\n    name: \"Switch.Description\"\n  }, /* @__PURE__ */ import_react36.default.createElement(LabelProvider, {\n    name: \"Switch.Label\",\n    props: {\n      onClick() {\n        if (!switchElement)\n          return;\n        switchElement.click();\n        switchElement.focus({ preventScroll: true });\n      }\n    }\n  }, /* @__PURE__ */ import_react36.default.createElement(GroupContext.Provider, {\n    value: context\n  }, render({\n    ourProps,\n    theirProps,\n    defaultTag: DEFAULT_GROUP_TAG3,\n    name: \"Switch.Group\"\n  }))));\n}\nvar DEFAULT_SWITCH_TAG = \"button\";\nvar SwitchRoot = forwardRefWithAs(function Switch(props, ref) {\n  let {\n    checked: controlledChecked,\n    defaultChecked = false,\n    onChange: controlledOnChange,\n    name,\n    value,\n    ...theirProps\n  } = props;\n  let id2 = `headlessui-switch-${useId()}`;\n  let groupContext = (0, import_react36.useContext)(GroupContext);\n  let internalSwitchRef = (0, import_react36.useRef)(null);\n  let switchRef = useSyncRefs(internalSwitchRef, ref, groupContext === null ? null : groupContext.setSwitch);\n  let [checked, onChange] = useControllable(controlledChecked, controlledOnChange, defaultChecked);\n  let toggle = useEvent(() => onChange == null ? void 0 : onChange(!checked));\n  let handleClick = useEvent((event) => {\n    if (isDisabledReactIssue7711(event.currentTarget))\n      return event.preventDefault();\n    event.preventDefault();\n    toggle();\n  });\n  let handleKeyUp = useEvent((event) => {\n    if (event.key === \" \" /* Space */) {\n      event.preventDefault();\n      toggle();\n    } else if (event.key === \"Enter\" /* Enter */) {\n      attemptSubmit(event.currentTarget);\n    }\n  });\n  let handleKeyPress = useEvent((event) => event.preventDefault());\n  let slot = (0, import_react36.useMemo)(() => ({ checked }), [checked]);\n  let ourProps = {\n    id: id2,\n    ref: switchRef,\n    role: \"switch\",\n    type: useResolveButtonType(props, internalSwitchRef),\n    tabIndex: 0,\n    \"aria-checked\": checked,\n    \"aria-labelledby\": groupContext == null ? void 0 : groupContext.labelledby,\n    \"aria-describedby\": groupContext == null ? void 0 : groupContext.describedby,\n    onClick: handleClick,\n    onKeyUp: handleKeyUp,\n    onKeyPress: handleKeyPress\n  };\n  return /* @__PURE__ */ import_react36.default.createElement(import_react36.default.Fragment, null, name != null && checked && /* @__PURE__ */ import_react36.default.createElement(Hidden, {\n    features: 4 /* Hidden */,\n    ...compact({\n      as: \"input\",\n      type: \"checkbox\",\n      hidden: true,\n      readOnly: true,\n      checked,\n      name,\n      value\n    })\n  }), render({ ourProps, theirProps, slot, defaultTag: DEFAULT_SWITCH_TAG, name: \"Switch\" }));\n});\nvar Switch2 = Object.assign(SwitchRoot, { Group: Group5, Label: Label5, Description });\n\n// src/components/tabs/tabs.tsx\nvar import_react38 = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"), 1);\n\n// src/internal/focus-sentinel.tsx\nvar import_react37 = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"), 1);\nfunction FocusSentinel({ onFocus }) {\n  let [enabled, setEnabled] = (0, import_react37.useState)(true);\n  if (!enabled)\n    return null;\n  return /* @__PURE__ */ import_react37.default.createElement(Hidden, {\n    as: \"button\",\n    type: \"button\",\n    features: 2 /* Focusable */,\n    onFocus: (event) => {\n      event.preventDefault();\n      let frame;\n      let tries = 50;\n      function forwardFocus() {\n        if (tries-- <= 0) {\n          if (frame)\n            cancelAnimationFrame(frame);\n          return;\n        }\n        if (onFocus()) {\n          setEnabled(false);\n          cancelAnimationFrame(frame);\n          return;\n        }\n        frame = requestAnimationFrame(forwardFocus);\n      }\n      frame = requestAnimationFrame(forwardFocus);\n    }\n  });\n}\n\n// src/components/tabs/tabs.tsx\nvar reducers8 = {\n  [0 /* SetSelectedIndex */](state2, action) {\n    let focusableTabs = state2.tabs.filter((tab) => {\n      var _a2;\n      return !((_a2 = tab.current) == null ? void 0 : _a2.hasAttribute(\"disabled\"));\n    });\n    if (action.index < 0) {\n      return { ...state2, selectedIndex: state2.tabs.indexOf(focusableTabs[0]) };\n    } else if (action.index > state2.tabs.length) {\n      return {\n        ...state2,\n        selectedIndex: state2.tabs.indexOf(focusableTabs[focusableTabs.length - 1])\n      };\n    }\n    let before = state2.tabs.slice(0, action.index);\n    let after = state2.tabs.slice(action.index);\n    let next = [...after, ...before].find((tab) => focusableTabs.includes(tab));\n    if (!next)\n      return state2;\n    return { ...state2, selectedIndex: state2.tabs.indexOf(next) };\n  },\n  [1 /* RegisterTab */](state2, action) {\n    var _a2;\n    if (state2.tabs.includes(action.tab))\n      return state2;\n    let activeTab = state2.tabs[state2.selectedIndex];\n    let adjustedTabs = sortByDomNode([...state2.tabs, action.tab], (tab) => tab.current);\n    let selectedIndex = (_a2 = adjustedTabs.indexOf(activeTab)) != null ? _a2 : state2.selectedIndex;\n    if (selectedIndex === -1)\n      selectedIndex = state2.selectedIndex;\n    return { ...state2, tabs: adjustedTabs, selectedIndex };\n  },\n  [2 /* UnregisterTab */](state2, action) {\n    return { ...state2, tabs: state2.tabs.filter((tab) => tab !== action.tab) };\n  },\n  [3 /* RegisterPanel */](state2, action) {\n    if (state2.panels.includes(action.panel))\n      return state2;\n    return {\n      ...state2,\n      panels: sortByDomNode([...state2.panels, action.panel], (panel) => panel.current)\n    };\n  },\n  [4 /* UnregisterPanel */](state2, action) {\n    return { ...state2, panels: state2.panels.filter((panel) => panel !== action.panel) };\n  }\n};\nvar TabsSSRContext = (0, import_react38.createContext)(null);\nTabsSSRContext.displayName = \"TabsSSRContext\";\nfunction useSSRTabsCounter(component) {\n  let context = (0, import_react38.useContext)(TabsSSRContext);\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <Tab.Group /> component.`);\n    if (Error.captureStackTrace)\n      Error.captureStackTrace(err, useSSRTabsCounter);\n    throw err;\n  }\n  return context;\n}\nvar TabsDataContext = (0, import_react38.createContext)(null);\nTabsDataContext.displayName = \"TabsDataContext\";\nfunction useData2(component) {\n  let context = (0, import_react38.useContext)(TabsDataContext);\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <Tab.Group /> component.`);\n    if (Error.captureStackTrace)\n      Error.captureStackTrace(err, useData2);\n    throw err;\n  }\n  return context;\n}\nvar TabsActionsContext = (0, import_react38.createContext)(null);\nTabsActionsContext.displayName = \"TabsActionsContext\";\nfunction useActions2(component) {\n  let context = (0, import_react38.useContext)(TabsActionsContext);\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <Tab.Group /> component.`);\n    if (Error.captureStackTrace)\n      Error.captureStackTrace(err, useActions2);\n    throw err;\n  }\n  return context;\n}\nfunction stateReducer8(state2, action) {\n  return match(action.type, reducers8, state2, action);\n}\nvar DEFAULT_TABS_TAG = import_react38.Fragment;\nvar Tabs = forwardRefWithAs(function Tabs2(props, ref) {\n  let {\n    defaultIndex = 0,\n    vertical = false,\n    manual = false,\n    onChange,\n    selectedIndex = null,\n    ...theirProps\n  } = props;\n  const orientation = vertical ? \"vertical\" : \"horizontal\";\n  const activation = manual ? \"manual\" : \"auto\";\n  let isControlled = selectedIndex !== null;\n  let tabsRef = useSyncRefs(ref);\n  let [state2, dispatch] = (0, import_react38.useReducer)(stateReducer8, {\n    selectedIndex: selectedIndex != null ? selectedIndex : defaultIndex,\n    tabs: [],\n    panels: []\n  });\n  let slot = (0, import_react38.useMemo)(() => ({ selectedIndex: state2.selectedIndex }), [state2.selectedIndex]);\n  let onChangeRef = useLatestValue(onChange || (() => {\n  }));\n  let stableTabsRef = useLatestValue(state2.tabs);\n  let tabsData = (0, import_react38.useMemo)(() => ({ orientation, activation, ...state2 }), [orientation, activation, state2]);\n  let realSelectedIndex = useLatestValue(isControlled ? props.selectedIndex : state2.selectedIndex);\n  let tabsActions = (0, import_react38.useMemo)(() => ({\n    registerTab(tab) {\n      dispatch({ type: 1 /* RegisterTab */, tab });\n      return () => dispatch({ type: 2 /* UnregisterTab */, tab });\n    },\n    registerPanel(panel) {\n      dispatch({ type: 3 /* RegisterPanel */, panel });\n      return () => dispatch({ type: 4 /* UnregisterPanel */, panel });\n    },\n    change(index) {\n      if (realSelectedIndex.current !== index) {\n        onChangeRef.current(index);\n      }\n      if (!isControlled) {\n        dispatch({ type: 0 /* SetSelectedIndex */, index });\n      }\n    }\n  }), [dispatch, isControlled]);\n  useIsoMorphicEffect(() => {\n    dispatch({ type: 0 /* SetSelectedIndex */, index: selectedIndex != null ? selectedIndex : defaultIndex });\n  }, [selectedIndex]);\n  let SSRCounter = (0, import_react38.useRef)({ tabs: [], panels: [] });\n  let ourProps = { ref: tabsRef };\n  return /* @__PURE__ */ import_react38.default.createElement(TabsSSRContext.Provider, {\n    value: SSRCounter\n  }, /* @__PURE__ */ import_react38.default.createElement(TabsActionsContext.Provider, {\n    value: tabsActions\n  }, /* @__PURE__ */ import_react38.default.createElement(TabsDataContext.Provider, {\n    value: tabsData\n  }, tabsData.tabs.length <= 0 && /* @__PURE__ */ import_react38.default.createElement(FocusSentinel, {\n    onFocus: () => {\n      var _a2, _b;\n      for (let tab of stableTabsRef.current) {\n        if (((_a2 = tab.current) == null ? void 0 : _a2.tabIndex) === 0) {\n          (_b = tab.current) == null ? void 0 : _b.focus();\n          return true;\n        }\n      }\n      return false;\n    }\n  }), render({\n    ourProps,\n    theirProps,\n    slot,\n    defaultTag: DEFAULT_TABS_TAG,\n    name: \"Tabs\"\n  }))));\n});\nvar DEFAULT_LIST_TAG = \"div\";\nvar List = forwardRefWithAs(function List2(props, ref) {\n  let { orientation, selectedIndex } = useData2(\"Tab.List\");\n  let listRef = useSyncRefs(ref);\n  let slot = { selectedIndex };\n  let theirProps = props;\n  let ourProps = {\n    ref: listRef,\n    role: \"tablist\",\n    \"aria-orientation\": orientation\n  };\n  return render({\n    ourProps,\n    theirProps,\n    slot,\n    defaultTag: DEFAULT_LIST_TAG,\n    name: \"Tabs.List\"\n  });\n});\nvar DEFAULT_TAB_TAG = \"button\";\nvar TabRoot = forwardRefWithAs(function Tab(props, ref) {\n  var _a2, _b;\n  let id2 = `headlessui-tabs-tab-${useId()}`;\n  let { orientation, activation, selectedIndex, tabs, panels } = useData2(\"Tab\");\n  let actions = useActions2(\"Tab\");\n  let SSRContext = useSSRTabsCounter(\"Tab\");\n  let internalTabRef = (0, import_react38.useRef)(null);\n  let tabRef = useSyncRefs(internalTabRef, ref);\n  useIsoMorphicEffect(() => actions.registerTab(internalTabRef), [actions, internalTabRef]);\n  let mySSRIndex = SSRContext.current.tabs.indexOf(id2);\n  if (mySSRIndex === -1)\n    mySSRIndex = SSRContext.current.tabs.push(id2) - 1;\n  let myIndex = tabs.indexOf(internalTabRef);\n  if (myIndex === -1)\n    myIndex = mySSRIndex;\n  let selected = myIndex === selectedIndex;\n  let handleKeyDown = useEvent((event) => {\n    let list = tabs.map((tab) => tab.current).filter(Boolean);\n    if (event.key === \" \" /* Space */ || event.key === \"Enter\" /* Enter */) {\n      event.preventDefault();\n      event.stopPropagation();\n      actions.change(myIndex);\n      return;\n    }\n    switch (event.key) {\n      case \"Home\" /* Home */:\n      case \"PageUp\" /* PageUp */:\n        event.preventDefault();\n        event.stopPropagation();\n        return focusIn(list, 1 /* First */);\n      case \"End\" /* End */:\n      case \"PageDown\" /* PageDown */:\n        event.preventDefault();\n        event.stopPropagation();\n        return focusIn(list, 8 /* Last */);\n    }\n    if (match(orientation, {\n      vertical() {\n        if (event.key === \"ArrowUp\" /* ArrowUp */)\n          return focusIn(list, 2 /* Previous */ | 16 /* WrapAround */);\n        if (event.key === \"ArrowDown\" /* ArrowDown */)\n          return focusIn(list, 4 /* Next */ | 16 /* WrapAround */);\n        return;\n      },\n      horizontal() {\n        if (event.key === \"ArrowLeft\" /* ArrowLeft */)\n          return focusIn(list, 2 /* Previous */ | 16 /* WrapAround */);\n        if (event.key === \"ArrowRight\" /* ArrowRight */)\n          return focusIn(list, 4 /* Next */ | 16 /* WrapAround */);\n        return;\n      }\n    })) {\n      return event.preventDefault();\n    }\n  });\n  let handleFocus = useEvent(() => {\n    var _a3;\n    (_a3 = internalTabRef.current) == null ? void 0 : _a3.focus();\n  });\n  let ready = (0, import_react38.useRef)(false);\n  let handleSelection = useEvent(() => {\n    var _a3;\n    if (ready.current)\n      return;\n    ready.current = true;\n    (_a3 = internalTabRef.current) == null ? void 0 : _a3.focus();\n    actions.change(myIndex);\n    microTask(() => {\n      ready.current = false;\n    });\n  });\n  let handleMouseDown = useEvent((event) => {\n    event.preventDefault();\n  });\n  let slot = (0, import_react38.useMemo)(() => ({ selected }), [selected]);\n  let theirProps = props;\n  let ourProps = {\n    ref: tabRef,\n    onKeyDown: handleKeyDown,\n    onFocus: activation === \"manual\" ? handleFocus : handleSelection,\n    onMouseDown: handleMouseDown,\n    onClick: handleSelection,\n    id: id2,\n    role: \"tab\",\n    type: useResolveButtonType(props, internalTabRef),\n    \"aria-controls\": (_b = (_a2 = panels[myIndex]) == null ? void 0 : _a2.current) == null ? void 0 : _b.id,\n    \"aria-selected\": selected,\n    tabIndex: selected ? 0 : -1\n  };\n  return render({\n    ourProps,\n    theirProps,\n    slot,\n    defaultTag: DEFAULT_TAB_TAG,\n    name: \"Tabs.Tab\"\n  });\n});\nvar DEFAULT_PANELS_TAG = \"div\";\nvar Panels = forwardRefWithAs(function Panels2(props, ref) {\n  let { selectedIndex } = useData2(\"Tab.Panels\");\n  let panelsRef = useSyncRefs(ref);\n  let slot = (0, import_react38.useMemo)(() => ({ selectedIndex }), [selectedIndex]);\n  let theirProps = props;\n  let ourProps = { ref: panelsRef };\n  return render({\n    ourProps,\n    theirProps,\n    slot,\n    defaultTag: DEFAULT_PANELS_TAG,\n    name: \"Tabs.Panels\"\n  });\n});\nvar DEFAULT_PANEL_TAG4 = \"div\";\nvar PanelRenderFeatures3 = 1 /* RenderStrategy */ | 2 /* Static */;\nvar Panel7 = forwardRefWithAs(function Panel8(props, ref) {\n  var _a2, _b, _c, _d;\n  let { selectedIndex, tabs, panels } = useData2(\"Tab.Panel\");\n  let actions = useActions2(\"Tab.Panel\");\n  let SSRContext = useSSRTabsCounter(\"Tab.Panel\");\n  let id2 = `headlessui-tabs-panel-${useId()}`;\n  let internalPanelRef = (0, import_react38.useRef)(null);\n  let panelRef = useSyncRefs(internalPanelRef, ref);\n  useIsoMorphicEffect(() => actions.registerPanel(internalPanelRef), [actions, internalPanelRef]);\n  let mySSRIndex = SSRContext.current.panels.indexOf(id2);\n  if (mySSRIndex === -1)\n    mySSRIndex = SSRContext.current.panels.push(id2) - 1;\n  let myIndex = panels.indexOf(internalPanelRef);\n  if (myIndex === -1)\n    myIndex = mySSRIndex;\n  let selected = myIndex === selectedIndex;\n  let slot = (0, import_react38.useMemo)(() => ({ selected }), [selected]);\n  let theirProps = props;\n  let ourProps = {\n    ref: panelRef,\n    id: id2,\n    role: \"tabpanel\",\n    \"aria-labelledby\": (_b = (_a2 = tabs[myIndex]) == null ? void 0 : _a2.current) == null ? void 0 : _b.id,\n    tabIndex: selected ? 0 : -1\n  };\n  if (!selected && ((_c = props.unmount) != null ? _c : true) && !((_d = props.static) != null ? _d : false)) {\n    return /* @__PURE__ */ import_react38.default.createElement(Hidden, {\n      as: \"span\",\n      ...ourProps\n    });\n  }\n  return render({\n    ourProps,\n    theirProps,\n    slot,\n    defaultTag: DEFAULT_PANEL_TAG4,\n    features: PanelRenderFeatures3,\n    visible: selected,\n    name: \"Tabs.Panel\"\n  });\n});\nvar Tab2 = Object.assign(TabRoot, { Group: Tabs, List, Panels, Panel: Panel7 });\n\n// src/components/transitions/transition.tsx\nvar import_react39 = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"), 1);\n\n// src/utils/once.ts\nfunction once(cb) {\n  let state2 = { called: false };\n  return (...args) => {\n    if (state2.called)\n      return;\n    state2.called = true;\n    return cb(...args);\n  };\n}\n\n// src/components/transitions/utils/transition.ts\nfunction addClasses(node, ...classes) {\n  node && classes.length > 0 && node.classList.add(...classes);\n}\nfunction removeClasses(node, ...classes) {\n  node && classes.length > 0 && node.classList.remove(...classes);\n}\nfunction waitForTransition(node, done) {\n  let d = disposables();\n  if (!node)\n    return d.dispose;\n  let { transitionDuration, transitionDelay } = getComputedStyle(node);\n  let [durationMs, delayMs] = [transitionDuration, transitionDelay].map((value) => {\n    let [resolvedValue = 0] = value.split(\",\").filter(Boolean).map((v) => v.includes(\"ms\") ? parseFloat(v) : parseFloat(v) * 1e3).sort((a, z) => z - a);\n    return resolvedValue;\n  });\n  let totalDuration = durationMs + delayMs;\n  if (totalDuration !== 0) {\n    let listeners = [];\n    if (false) {} else {\n      listeners.push(d.addEventListener(node, \"transitionrun\", (event) => {\n        if (event.target !== event.currentTarget)\n          return;\n        listeners.splice(0).forEach((dispose) => dispose());\n        listeners.push(d.addEventListener(node, \"transitionend\", (event2) => {\n          if (event2.target !== event2.currentTarget)\n            return;\n          done(\"ended\" /* Ended */);\n          listeners.splice(0).forEach((dispose) => dispose());\n        }), d.addEventListener(node, \"transitioncancel\", (event2) => {\n          if (event2.target !== event2.currentTarget)\n            return;\n          done(\"cancelled\" /* Cancelled */);\n          listeners.splice(0).forEach((dispose) => dispose());\n        }));\n      }));\n    }\n  } else {\n    done(\"ended\" /* Ended */);\n  }\n  d.add(() => done(\"cancelled\" /* Cancelled */));\n  return d.dispose;\n}\nfunction transition(node, classes, show, done) {\n  let direction = show ? \"enter\" : \"leave\";\n  let d = disposables();\n  let _done = done !== void 0 ? once(done) : () => {\n  };\n  if (direction === \"enter\") {\n    node.removeAttribute(\"hidden\");\n    node.style.display = \"\";\n  }\n  let base = match(direction, {\n    enter: () => classes.enter,\n    leave: () => classes.leave\n  });\n  let to = match(direction, {\n    enter: () => classes.enterTo,\n    leave: () => classes.leaveTo\n  });\n  let from = match(direction, {\n    enter: () => classes.enterFrom,\n    leave: () => classes.leaveFrom\n  });\n  removeClasses(node, ...classes.enter, ...classes.enterTo, ...classes.enterFrom, ...classes.leave, ...classes.leaveFrom, ...classes.leaveTo, ...classes.entered);\n  addClasses(node, ...base, ...from);\n  d.nextFrame(() => {\n    removeClasses(node, ...from);\n    addClasses(node, ...to);\n    waitForTransition(node, (reason) => {\n      if (reason === \"ended\" /* Ended */) {\n        removeClasses(node, ...base);\n        addClasses(node, ...classes.entered);\n      }\n      return _done(reason);\n    });\n  });\n  return d.dispose;\n}\n\n// src/hooks/use-transition.ts\nfunction useTransition({ container, direction, classes, onStart, onStop }) {\n  let mounted = useIsMounted();\n  let d = useDisposables();\n  let latestDirection = useLatestValue(direction);\n  useIsoMorphicEffect(() => {\n    let dd = disposables();\n    d.add(dd.dispose);\n    let node = container.current;\n    if (!node)\n      return;\n    if (latestDirection.current === \"idle\")\n      return;\n    if (!mounted.current)\n      return;\n    dd.dispose();\n    onStart.current(latestDirection.current);\n    dd.add(transition(node, classes.current, latestDirection.current === \"enter\", (reason) => {\n      dd.dispose();\n      match(reason, {\n        [\"ended\" /* Ended */]() {\n          onStop.current(latestDirection.current);\n        },\n        [\"cancelled\" /* Cancelled */]: () => {\n        }\n      });\n    }));\n    return dd.dispose;\n  }, [direction]);\n}\n\n// src/components/transitions/transition.tsx\nfunction splitClasses(classes = \"\") {\n  return classes.split(\" \").filter((className) => className.trim().length > 1);\n}\nvar TransitionContext = (0, import_react39.createContext)(null);\nTransitionContext.displayName = \"TransitionContext\";\nfunction useTransitionContext() {\n  let context = (0, import_react39.useContext)(TransitionContext);\n  if (context === null) {\n    throw new Error(\"A <Transition.Child /> is used but it is missing a parent <Transition /> or <Transition.Root />.\");\n  }\n  return context;\n}\nfunction useParentNesting() {\n  let context = (0, import_react39.useContext)(NestingContext);\n  if (context === null) {\n    throw new Error(\"A <Transition.Child /> is used but it is missing a parent <Transition /> or <Transition.Root />.\");\n  }\n  return context;\n}\nvar NestingContext = (0, import_react39.createContext)(null);\nNestingContext.displayName = \"NestingContext\";\nfunction hasChildren(bag) {\n  if (\"children\" in bag)\n    return hasChildren(bag.children);\n  return bag.current.filter(({ el }) => el.current !== null).filter(({ state: state2 }) => state2 === \"visible\" /* Visible */).length > 0;\n}\nfunction useNesting(done, parent) {\n  let doneRef = useLatestValue(done);\n  let transitionableChildren = (0, import_react39.useRef)([]);\n  let mounted = useIsMounted();\n  let d = useDisposables();\n  let unregister = useEvent((container, strategy = 1 /* Hidden */) => {\n    let idx = transitionableChildren.current.findIndex(({ el }) => el === container);\n    if (idx === -1)\n      return;\n    match(strategy, {\n      [0 /* Unmount */]() {\n        transitionableChildren.current.splice(idx, 1);\n      },\n      [1 /* Hidden */]() {\n        transitionableChildren.current[idx].state = \"hidden\" /* Hidden */;\n      }\n    });\n    d.microTask(() => {\n      var _a2;\n      if (!hasChildren(transitionableChildren) && mounted.current) {\n        (_a2 = doneRef.current) == null ? void 0 : _a2.call(doneRef);\n      }\n    });\n  });\n  let register = useEvent((container) => {\n    let child = transitionableChildren.current.find(({ el }) => el === container);\n    if (!child) {\n      transitionableChildren.current.push({ el: container, state: \"visible\" /* Visible */ });\n    } else if (child.state !== \"visible\" /* Visible */) {\n      child.state = \"visible\" /* Visible */;\n    }\n    return () => unregister(container, 0 /* Unmount */);\n  });\n  let todos = (0, import_react39.useRef)([]);\n  let wait = (0, import_react39.useRef)(Promise.resolve());\n  let chains = (0, import_react39.useRef)({\n    enter: [],\n    leave: [],\n    idle: []\n  });\n  let onStart = useEvent((container, direction, cb) => {\n    todos.current.splice(0);\n    if (parent) {\n      parent.chains.current[direction] = parent.chains.current[direction].filter(([containerInParent]) => containerInParent !== container);\n    }\n    parent == null ? void 0 : parent.chains.current[direction].push([\n      container,\n      new Promise((resolve) => {\n        todos.current.push(resolve);\n      })\n    ]);\n    parent == null ? void 0 : parent.chains.current[direction].push([\n      container,\n      new Promise((resolve) => {\n        Promise.all(chains.current[direction].map(([_container, promise]) => promise)).then(() => resolve());\n      })\n    ]);\n    if (direction === \"enter\") {\n      wait.current = wait.current.then(() => parent == null ? void 0 : parent.wait.current).then(() => cb(direction));\n    } else {\n      cb(direction);\n    }\n  });\n  let onStop = useEvent((_container, direction, cb) => {\n    Promise.all(chains.current[direction].splice(0).map(([_container2, promise]) => promise)).then(() => {\n      var _a2;\n      (_a2 = todos.current.shift()) == null ? void 0 : _a2();\n    }).then(() => cb(direction));\n  });\n  return (0, import_react39.useMemo)(() => ({\n    children: transitionableChildren,\n    register,\n    unregister,\n    onStart,\n    onStop,\n    wait,\n    chains\n  }), [register, unregister, transitionableChildren, onStart, onStop, chains, wait]);\n}\nfunction noop() {\n}\nvar eventNames = [\"beforeEnter\", \"afterEnter\", \"beforeLeave\", \"afterLeave\"];\nfunction ensureEventHooksExist(events) {\n  var _a2;\n  let result = {};\n  for (let name of eventNames) {\n    result[name] = (_a2 = events[name]) != null ? _a2 : noop;\n  }\n  return result;\n}\nfunction useEvents(events) {\n  let eventsRef = (0, import_react39.useRef)(ensureEventHooksExist(events));\n  (0, import_react39.useEffect)(() => {\n    eventsRef.current = ensureEventHooksExist(events);\n  }, [events]);\n  return eventsRef;\n}\nvar DEFAULT_TRANSITION_CHILD_TAG = \"div\";\nvar TransitionChildRenderFeatures = 1 /* RenderStrategy */;\nvar TransitionChild = forwardRefWithAs(function TransitionChild2(props, ref) {\n  let {\n    beforeEnter,\n    afterEnter,\n    beforeLeave,\n    afterLeave,\n    enter,\n    enterFrom,\n    enterTo,\n    entered,\n    leave,\n    leaveFrom,\n    leaveTo,\n    ...rest\n  } = props;\n  let container = (0, import_react39.useRef)(null);\n  let transitionRef = useSyncRefs(container, ref);\n  let strategy = rest.unmount ? 0 /* Unmount */ : 1 /* Hidden */;\n  let { show, appear, initial } = useTransitionContext();\n  let [state2, setState] = (0, import_react39.useState)(show ? \"visible\" /* Visible */ : \"hidden\" /* Hidden */);\n  let parentNesting = useParentNesting();\n  let { register, unregister } = parentNesting;\n  let prevShow = (0, import_react39.useRef)(null);\n  (0, import_react39.useEffect)(() => register(container), [register, container]);\n  (0, import_react39.useEffect)(() => {\n    if (strategy !== 1 /* Hidden */)\n      return;\n    if (!container.current)\n      return;\n    if (show && state2 !== \"visible\" /* Visible */) {\n      setState(\"visible\" /* Visible */);\n      return;\n    }\n    return match(state2, {\n      [\"hidden\" /* Hidden */]: () => unregister(container),\n      [\"visible\" /* Visible */]: () => register(container)\n    });\n  }, [state2, container, register, unregister, show, strategy]);\n  let classes = useLatestValue({\n    enter: splitClasses(enter),\n    enterFrom: splitClasses(enterFrom),\n    enterTo: splitClasses(enterTo),\n    entered: splitClasses(entered),\n    leave: splitClasses(leave),\n    leaveFrom: splitClasses(leaveFrom),\n    leaveTo: splitClasses(leaveTo)\n  });\n  let events = useEvents({\n    beforeEnter,\n    afterEnter,\n    beforeLeave,\n    afterLeave\n  });\n  let ready = useServerHandoffComplete();\n  (0, import_react39.useEffect)(() => {\n    if (ready && state2 === \"visible\" /* Visible */ && container.current === null) {\n      throw new Error(\"Did you forget to passthrough the `ref` to the actual DOM node?\");\n    }\n  }, [container, state2, ready]);\n  let skip = initial && !appear;\n  let transitionDirection = (() => {\n    if (!ready)\n      return \"idle\";\n    if (skip)\n      return \"idle\";\n    if (prevShow.current === show)\n      return \"idle\";\n    return show ? \"enter\" : \"leave\";\n  })();\n  let beforeEvent = useEvent((direction) => {\n    return match(direction, {\n      enter: () => events.current.beforeEnter(),\n      leave: () => events.current.beforeLeave(),\n      idle: () => {\n      }\n    });\n  });\n  let afterEvent = useEvent((direction) => {\n    return match(direction, {\n      enter: () => events.current.afterEnter(),\n      leave: () => events.current.afterLeave(),\n      idle: () => {\n      }\n    });\n  });\n  let nesting = useNesting(() => {\n    setState(\"hidden\" /* Hidden */);\n    unregister(container);\n  }, parentNesting);\n  useTransition({\n    container,\n    classes,\n    direction: transitionDirection,\n    onStart: useLatestValue((direction) => {\n      nesting.onStart(container, direction, beforeEvent);\n    }),\n    onStop: useLatestValue((direction) => {\n      nesting.onStop(container, direction, afterEvent);\n      if (direction === \"leave\" && !hasChildren(nesting)) {\n        setState(\"hidden\" /* Hidden */);\n        unregister(container);\n      }\n    })\n  });\n  (0, import_react39.useEffect)(() => {\n    if (!skip)\n      return;\n    if (strategy === 1 /* Hidden */) {\n      prevShow.current = null;\n    } else {\n      prevShow.current = show;\n    }\n  }, [show, skip, state2]);\n  let theirProps = rest;\n  let ourProps = { ref: transitionRef };\n  return /* @__PURE__ */ import_react39.default.createElement(NestingContext.Provider, {\n    value: nesting\n  }, /* @__PURE__ */ import_react39.default.createElement(OpenClosedProvider, {\n    value: match(state2, {\n      [\"visible\" /* Visible */]: 0 /* Open */,\n      [\"hidden\" /* Hidden */]: 1 /* Closed */\n    })\n  }, render({\n    ourProps,\n    theirProps,\n    defaultTag: DEFAULT_TRANSITION_CHILD_TAG,\n    features: TransitionChildRenderFeatures,\n    visible: state2 === \"visible\" /* Visible */,\n    name: \"Transition.Child\"\n  })));\n});\nvar TransitionRoot = forwardRefWithAs(function Transition(props, ref) {\n  let { show, appear = false, unmount, ...theirProps } = props;\n  let internalTransitionRef = (0, import_react39.useRef)(null);\n  let transitionRef = useSyncRefs(internalTransitionRef, ref);\n  useServerHandoffComplete();\n  let usesOpenClosedState = useOpenClosed();\n  if (show === void 0 && usesOpenClosedState !== null) {\n    show = match(usesOpenClosedState, {\n      [0 /* Open */]: true,\n      [1 /* Closed */]: false\n    });\n  }\n  if (![true, false].includes(show)) {\n    throw new Error(\"A <Transition /> is used but it is missing a `show={true | false}` prop.\");\n  }\n  let [state2, setState] = (0, import_react39.useState)(show ? \"visible\" /* Visible */ : \"hidden\" /* Hidden */);\n  let nestingBag = useNesting(() => {\n    setState(\"hidden\" /* Hidden */);\n  });\n  let [initial, setInitial] = (0, import_react39.useState)(true);\n  let changes = (0, import_react39.useRef)([show]);\n  useIsoMorphicEffect(() => {\n    if (initial === false) {\n      return;\n    }\n    if (changes.current[changes.current.length - 1] !== show) {\n      changes.current.push(show);\n      setInitial(false);\n    }\n  }, [changes, show]);\n  let transitionBag = (0, import_react39.useMemo)(() => ({ show, appear, initial }), [show, appear, initial]);\n  (0, import_react39.useEffect)(() => {\n    if (show) {\n      setState(\"visible\" /* Visible */);\n    } else if (!hasChildren(nestingBag)) {\n      setState(\"hidden\" /* Hidden */);\n    } else if (true) {\n      let node = internalTransitionRef.current;\n      if (!node)\n        return;\n      let rect = node.getBoundingClientRect();\n      if (rect.x === 0 && rect.y === 0 && rect.width === 0 && rect.height === 0) {\n        setState(\"hidden\" /* Hidden */);\n      }\n    }\n  }, [show, nestingBag]);\n  let sharedProps = { unmount };\n  return /* @__PURE__ */ import_react39.default.createElement(NestingContext.Provider, {\n    value: nestingBag\n  }, /* @__PURE__ */ import_react39.default.createElement(TransitionContext.Provider, {\n    value: transitionBag\n  }, render({\n    ourProps: {\n      ...sharedProps,\n      as: import_react39.Fragment,\n      children: /* @__PURE__ */ import_react39.default.createElement(TransitionChild, {\n        ref: transitionRef,\n        ...sharedProps,\n        ...theirProps\n      })\n    },\n    theirProps: {},\n    defaultTag: import_react39.Fragment,\n    features: TransitionChildRenderFeatures,\n    visible: state2 === \"visible\" /* Visible */,\n    name: \"Transition\"\n  })));\n});\nvar Child = forwardRefWithAs(function Child2(props, ref) {\n  let hasTransitionContext = (0, import_react39.useContext)(TransitionContext) !== null;\n  let hasOpenClosedContext = useOpenClosed() !== null;\n  return /* @__PURE__ */ import_react39.default.createElement(import_react39.default.Fragment, null, !hasTransitionContext && hasOpenClosedContext ? /* @__PURE__ */ import_react39.default.createElement(TransitionRoot, {\n    ref,\n    ...props\n  }) : /* @__PURE__ */ import_react39.default.createElement(TransitionChild, {\n    ref,\n    ...props\n  }));\n});\nvar Transition2 = Object.assign(TransitionRoot, { Child, Root: TransitionRoot });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@headlessui/react/dist/headlessui.dev.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@headlessui/react/dist/index.cjs":
/*!*******************************************************!*\
  !*** ./node_modules/@headlessui/react/dist/index.cjs ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./headlessui.dev.cjs */ \"(ssr)/./node_modules/@headlessui/react/dist/headlessui.dev.cjs\")\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGhlYWRsZXNzdWkvcmVhY3QvZGlzdC9pbmRleC5janMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVosSUFBSSxLQUFxQyxFQUFFLEVBRTFDLENBQUM7QUFDRixFQUFFLGtJQUFnRDtBQUNsRCIsInNvdXJjZXMiOlsid2VicGFjazovL2d1aWxoZXJtZWZyZWl0YXMuY29tLy4vbm9kZV9tb2R1bGVzL0BoZWFkbGVzc3VpL3JlYWN0L2Rpc3QvaW5kZXguY2pzPzVkMjQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9oZWFkbGVzc3VpLnByb2QuY2pzJylcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9oZWFkbGVzc3VpLmRldi5janMnKVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@headlessui/react/dist/index.cjs\n");

/***/ })

};
;