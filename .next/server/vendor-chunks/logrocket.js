/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/logrocket";
exports.ids = ["vendor-chunks/logrocket"];
exports.modules = {

/***/ "(ssr)/./node_modules/logrocket/dist/build.umd.js":
/*!**************************************************!*\
  !*** ./node_modules/logrocket/dist/build.umd.js ***!
  \**************************************************/
/***/ (function(module) {

eval("(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory();\n\telse { var i, a; }\n})(this, function() {\nreturn /******/ (function() { // webpackBootstrap\n/******/ \tvar __webpack_modules__ = ({\n\n/***/ \"./packages/@logrocket/arson/src/index.js\":\n/*!************************************************!*\\\n  !*** ./packages/@logrocket/arson/src/index.js ***!\n  \\************************************************/\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_710__) {\n\n\"use strict\";\n\n\nvar _interopRequireDefault = __nested_webpack_require_710__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.encode = encode;\nexports.decode = decode;\nvar _typeof2 = _interopRequireDefault(__nested_webpack_require_710__(/*! @babel/runtime/helpers/typeof */ \"./node_modules/@babel/runtime/helpers/typeof.js\"));\n/* eslint-disable */\n\nvar UNDEFINED_INDEX = -1;\nvar ARRAY_HOLE_INDEX = -2;\nvar NAN_INDEX = -3;\nvar POS_INF_INDEX = -4;\nvar NEG_INF_INDEX = -5;\nvar customTypes = Object.create(null);\nvar registerType = function registerType(typeName, handlers) {\n  function check(methodName) {\n    if (typeof handlers[methodName] !== \"function\") {\n      throw new Error(\"second argument to ARSON.registerType(\" + JSON.stringify(typeName) + \", ...) \" + \"must be an object with a \" + methodName + \" method\");\n    }\n  }\n  check(\"deconstruct\");\n  check(\"reconstruct\");\n  customTypes[typeName] = handlers;\n};\nvar toString = Object.prototype.toString;\nvar dateTag = \"[object Date]\";\nvar regExpTag = \"[object RegExp]\";\nvar setTag = \"[object Set]\";\nvar mapTag = \"[object Map]\";\ntypeof Buffer === \"function\" && typeof Buffer.isBuffer === \"function\" && registerType(\"Buffer\", {\n  deconstruct: function deconstruct(buf) {\n    return Buffer.isBuffer(buf) && [buf.toString(\"base64\"), \"base64\"];\n  },\n  // The reconstruct function will be called twice: once with no\n  // arguments, which allows it to return a placeholder object reference;\n  // and once with one argument, a copy of the array returned by the\n  // deconstruct function. For immutable types like Buffer, Date, and\n  // RegExp, the reconstruct function should return a falsy value when it\n  // receives no arguments, since there is no way to create an empty\n  // Buffer or Date and later fill in its contents.  For container types\n  // like Map and Set, the reconstruct function must return an empty\n  // instance of the container when it receives no arguments, so that we\n  // can fill in that empty container later. This two-phased strategy is\n  // essential for decoding containers that contain themselves.\n  reconstruct: function reconstruct(args) {\n    return args && Buffer.from(args[0], args[1]);\n  }\n});\nregisterType(\"Date\", {\n  deconstruct: function deconstruct(date) {\n    return toString.call(date) === dateTag && [date.toJSON()];\n  },\n  reconstruct: function reconstruct(args) {\n    return args && new Date(args[0]);\n  }\n});\nregisterType(\"RegExp\", {\n  deconstruct: function deconstruct(exp) {\n    if (toString.call(exp) === regExpTag) {\n      var args = [exp.source];\n      var flags = \"\";\n      if (exp.ignoreCase) flags += \"i\";\n      if (exp.multiline) flags += \"m\";\n      if (exp.global) flags += \"g\";\n      if (flags) {\n        args.push(flags);\n      }\n      return args;\n    }\n  },\n  reconstruct: function reconstruct(args) {\n    return args && new RegExp(args[0], args[1]);\n  }\n});\ntypeof Set === \"function\" && typeof Array.from === \"function\" && registerType(\"Set\", {\n  deconstruct: function deconstruct(set) {\n    if (toString.call(set) === setTag) {\n      return Array.from(set);\n    }\n  },\n  reconstruct: function reconstruct(values) {\n    if (values) {\n      values.forEach(this.add, this);\n    } else {\n      return new Set();\n    }\n  }\n});\ntypeof Map === \"function\" && typeof Array.from === \"function\" && registerType(\"Map\", {\n  deconstruct: function deconstruct(map) {\n    if (toString.call(map) === mapTag) {\n      return Array.from(map);\n    }\n  },\n  reconstruct: function reconstruct(entries) {\n    if (entries) {\n      entries.forEach(function (entry) {\n        this.set(entry[0], entry[1]);\n      }, this);\n    } else {\n      return new Map();\n    }\n  }\n});\nfunction encode(value) {\n  return JSON.stringify(toTable(value));\n}\nfunction toTable(value) {\n  var values = [];\n  var indexMap = typeof Map === \"function\" && new Map();\n  function getIndex(value) {\n    switch ((0, _typeof2.default)(value)) {\n      case \"undefined\":\n        return UNDEFINED_INDEX;\n      case \"number\":\n        if (isNaN(value)) {\n          return NAN_INDEX;\n        }\n        if (!isFinite(value)) {\n          return value < 0 ? NEG_INF_INDEX : POS_INF_INDEX;\n        }\n\n      // fall through...\n    }\n\n    var index;\n    if (indexMap) {\n      // If we have Map, use it instead of values.indexOf to accelerate\n      // object lookups.\n      index = indexMap.get(value);\n      if (typeof index === \"undefined\") {\n        index = values.push(value) - 1;\n        indexMap.set(value, index);\n      }\n    } else {\n      index = values.indexOf(value);\n      if (index < 0) {\n        index = values.push(value) - 1;\n      }\n    }\n    return index;\n  }\n  function copy(value) {\n    var result = value;\n    if (value && (0, _typeof2.default)(value) === \"object\") {\n      var keys = Object.keys(value);\n      if (isPlainObject(value)) {\n        result = {};\n      } else if (Array.isArray(value)) {\n        result = Array(value.length);\n        var len = value.length;\n        if (len > keys.length) {\n          // The array has holes, so make sure we fill them with the\n          // ARRAY_HOLE_INDEX constant.\n          for (var i = 0; i < len; ++i) {\n            result[i] = ARRAY_HOLE_INDEX;\n          }\n        }\n      } else {\n        for (var typeName in customTypes) {\n          // If value is not a plain Object, but something exotic like a\n          // Date or a RegExp, serialize it as an array with typeName as\n          // its first element. These arrays can be distinguished from\n          // normal arrays, because all other non-empty arrays will be\n          // serialized with a numeric value as their first element.\n          var args = customTypes[typeName].deconstruct(value);\n          if (args) {\n            for (var i = 0; i < args.length; ++i) {\n              args[i] = getIndex(args[i]);\n            }\n            args.unshift(typeName);\n            return args;\n          }\n        }\n        return {}.toString.call(value);\n      }\n      keys.forEach(function (key) {\n        result[key] = getIndex(value[key]);\n      });\n    }\n    return result;\n  }\n\n  // Assigns the root value to values[0].\n  var index0 = getIndex(value);\n  if (index0 < 0) {\n    // If value is something special that gets a negative index, then we\n    // don't need to build a table at all, and we can simply return that\n    // negative index as a complete serialization. This avoids ambiguity\n    // about indexes versus primitive literal values.\n    return index0;\n  }\n\n  // Note that this for loop cannot be a forEach loop, because\n  // values.length is expected to change during iteration.\n  for (var table = [], v = 0; v < values.length; ++v) {\n    table[v] = copy(values[v]);\n  }\n  return table;\n}\nfunction isPlainObject(value) {\n  var isObject = value && (0, _typeof2.default)(value) === \"object\";\n  if (isObject) {\n    var proto = Object.getPrototypeOf ? Object.getPrototypeOf(value) : value.__proto__;\n    return proto === Object.prototype;\n  }\n  return false;\n}\nfunction decode(encoding) {\n  return fromTable(JSON.parse(encoding));\n}\nfunction fromTable(table) {\n  if (typeof table === \"number\" && table < 0) {\n    return getValueWithoutCache(table);\n  }\n  var getValueCache = new Array(table.length);\n  function getValue(index) {\n    return index in getValueCache ? getValueCache[index] : getValueCache[index] = getValueWithoutCache(index);\n  }\n  function getValueWithoutCache(index) {\n    if (index < 0) {\n      if (index === UNDEFINED_INDEX) {\n        return;\n      }\n      if (index === ARRAY_HOLE_INDEX) {\n        // Never reached because handled specially below.\n        return;\n      }\n      if (index === NAN_INDEX) {\n        return NaN;\n      }\n      if (index === POS_INF_INDEX) {\n        return Infinity;\n      }\n      if (index === NEG_INF_INDEX) {\n        return -Infinity;\n      }\n      throw new Error(\"invalid ARSON index: \" + index);\n    }\n    var entry = table[index];\n    if (entry && (0, _typeof2.default)(entry) === \"object\") {\n      if (Array.isArray(entry)) {\n        var elem0 = entry[0];\n        if (typeof elem0 === \"string\" && elem0 in customTypes) {\n          var rec = customTypes[elem0].reconstruct;\n          var empty = rec();\n          if (empty) {\n            // If the reconstruct handler returns an object, treat it as\n            // an empty instance of the desired type, and schedule it to\n            // be filled in later. This two-stage process allows exotic\n            // container objects to contain themselves.\n            containers.push({\n              reconstruct: rec,\n              empty: empty,\n              argIndexes: entry.slice(1)\n            });\n          }\n\n          // If the reconstruct handler returned a falsy value, then we\n          // assume none of its arguments refer to exotic containers, so\n          // we can reconstruct the object immediately. Examples: Buffer,\n          // Date, RegExp.\n          return table[index] = empty || rec(entry.slice(1).map(getValue));\n        }\n      }\n\n      // Here entry is already the correct array or object reference for\n      // this index, but its values are still indexes that will need to be\n      // resolved later.\n      objects.push(entry);\n    }\n    return entry;\n  }\n  var containers = [];\n  var objects = [];\n\n  // First pass: make sure all exotic objects are deserialized fist, and\n  // keep track of all plain object entries for later.\n  table.forEach(function (entry, i) {\n    getValue(i);\n  });\n\n  // Second pass: now that we have final object references for all exotic\n  // objects, we can safely resolve argument indexes for the empty ones.\n  containers.forEach(function (c) {\n    c.args = c.argIndexes.map(getValue);\n  });\n\n  // Third pass: resolve value indexes for ordinary arrays and objects.\n  objects.forEach(function (obj) {\n    Object.keys(obj).forEach(function (key) {\n      var index = obj[key];\n      if (typeof index !== \"number\") {\n        // Leave non-numeric indexes untouched.\n        return;\n      }\n      if (index < 0) {\n        if (index === ARRAY_HOLE_INDEX) {\n          // Array holes have to be handled specially here, since getValue\n          // does not have a reference to obj.\n          delete obj[key];\n          return;\n        }\n\n        // This recursion is guaranteed not to add more objects, because\n        // we know the index is negative.\n        obj[key] = getValue(index);\n      } else {\n        // Non-negative indexes refer to normal table values.\n        obj[key] = table[index];\n      }\n    });\n  });\n\n  // Fourth pass: all possible object references have been established, so\n  // we can finally initialize the empty container objects.\n  containers.forEach(function (c) {\n    c.reconstruct.call(c.empty, c.args);\n  });\n  return table[0];\n}\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/console/src/index.js\":\n/*!**************************************************!*\\\n  !*** ./packages/@logrocket/console/src/index.js ***!\n  \\**************************************************/\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_11808__) {\n\n\"use strict\";\n\n\nvar _interopRequireDefault = __nested_webpack_require_11808__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar _registerConsole = _interopRequireDefault(__nested_webpack_require_11808__(/*! ./registerConsole */ \"./packages/@logrocket/console/src/registerConsole.js\"));\nvar _default = _registerConsole.default;\nexports[\"default\"] = _default;\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/console/src/registerConsole.js\":\n/*!************************************************************!*\\\n  !*** ./packages/@logrocket/console/src/registerConsole.js ***!\n  \\************************************************************/\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_12654__) {\n\n\"use strict\";\n\n\nvar _interopRequireDefault = __nested_webpack_require_12654__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = registerConsole;\nvar _typeof2 = _interopRequireDefault(__nested_webpack_require_12654__(/*! @babel/runtime/helpers/typeof */ \"./node_modules/@babel/runtime/helpers/typeof.js\"));\nvar _enhanceFunc = _interopRequireDefault(__nested_webpack_require_12654__(/*! @logrocket/utils/src/enhanceFunc */ \"./packages/@logrocket/utils/src/enhanceFunc.js\"));\nvar _exceptions = __nested_webpack_require_12654__(/*! @logrocket/exceptions */ \"./packages/@logrocket/exceptions/src/index.js\");\n// eslint-disable-line no-restricted-imports\n\nfunction registerConsole(logger) {\n  var unsubFunctions = [];\n  var methods = ['log', 'warn', 'info', 'error', 'debug'];\n  methods.forEach(function (method) {\n    unsubFunctions.push((0, _enhanceFunc.default)(console, method, function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      logger.addEvent('lr.core.LogEvent', function () {\n        var consoleOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var isEnabled = consoleOptions.isEnabled;\n        if ((0, _typeof2.default)(isEnabled) === 'object' && isEnabled[method] === false || isEnabled === false) {\n          return null;\n        }\n        if (method === 'error' && consoleOptions.shouldAggregateConsoleErrors) {\n          _exceptions.Capture.captureMessage(logger, args[0], args, {}, true);\n        }\n        return {\n          logLevel: method.toUpperCase(),\n          args: args\n        };\n      });\n    }));\n  });\n  return function () {\n    unsubFunctions.forEach(function (unsubFunction) {\n      return unsubFunction();\n    });\n  };\n}\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/exceptions/src/Capture.js\":\n/*!*******************************************************!*\\\n  !*** ./packages/@logrocket/exceptions/src/Capture.js ***!\n  \\*******************************************************/\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_14879__) {\n\n\"use strict\";\n\n\nvar _interopRequireDefault = __nested_webpack_require_14879__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.captureMessage = captureMessage;\nexports.captureException = captureException;\nvar _utils = __nested_webpack_require_14879__(/*! @logrocket/utils */ \"./packages/@logrocket/utils/src/index.ts\");\nvar _TraceKit = _interopRequireDefault(__nested_webpack_require_14879__(/*! @logrocket/utils/src/TraceKit */ \"./packages/@logrocket/utils/src/TraceKit.js\"));\nvar _stackTraceFromError = _interopRequireDefault(__nested_webpack_require_14879__(/*! ./stackTraceFromError */ \"./packages/@logrocket/exceptions/src/stackTraceFromError.js\"));\n// eslint-disable-line no-restricted-imports\n\nfunction captureMessage(logger, message, messageArgs) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var isConsole = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  var data = {\n    exceptionType: isConsole ? 'CONSOLE' : 'MESSAGE',\n    message: message,\n    messageArgs: messageArgs,\n    browserHref: window.location ? window.location.href : ''\n  };\n  (0, _utils.scrubException)(data, options);\n  logger.addEvent('lr.core.Exception', function () {\n    return data;\n  });\n}\nfunction captureException(logger, exception) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var preppedTrace = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  var trace = preppedTrace || _TraceKit.default.computeStackTrace(exception);\n  var data = {\n    exceptionType: 'WINDOW',\n    errorType: trace.name,\n    message: trace.message,\n    browserHref: window.location ? window.location.href : ''\n  };\n  (0, _utils.scrubException)(data, options);\n  var addEventOptions = {\n    _stackTrace: (0, _stackTraceFromError.default)(trace)\n  };\n  logger.addEvent('lr.core.Exception', function () {\n    return data;\n  }, addEventOptions);\n}\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/exceptions/src/index.js\":\n/*!*****************************************************!*\\\n  !*** ./packages/@logrocket/exceptions/src/index.js ***!\n  \\*****************************************************/\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_17239__) {\n\n\"use strict\";\n\n\nvar _interopRequireDefault = __nested_webpack_require_17239__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nvar _typeof = __nested_webpack_require_17239__(/*! @babel/runtime/helpers/typeof */ \"./node_modules/@babel/runtime/helpers/typeof.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nObject.defineProperty(exports, \"registerExceptions\", ({\n  enumerable: true,\n  get: function get() {\n    return _registerExceptions.default;\n  }\n}));\nexports.Capture = void 0;\nvar _registerExceptions = _interopRequireDefault(__nested_webpack_require_17239__(/*! ./registerExceptions */ \"./packages/@logrocket/exceptions/src/registerExceptions.js\"));\nvar Capture = _interopRequireWildcard(__nested_webpack_require_17239__(/*! ./Capture */ \"./packages/@logrocket/exceptions/src/Capture.js\"));\nexports.Capture = Capture;\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/exceptions/src/raven/raven.js\":\n/*!***********************************************************!*\\\n  !*** ./packages/@logrocket/exceptions/src/raven/raven.js ***!\n  \\***********************************************************/\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_19588__) {\n\n\"use strict\";\n\n\nvar _interopRequireDefault = __nested_webpack_require_19588__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar _classCallCheck2 = _interopRequireDefault(__nested_webpack_require_19588__(/*! @babel/runtime/helpers/classCallCheck */ \"./node_modules/@babel/runtime/helpers/classCallCheck.js\"));\nvar _createClass2 = _interopRequireDefault(__nested_webpack_require_19588__(/*! @babel/runtime/helpers/createClass */ \"./node_modules/@babel/runtime/helpers/createClass.js\"));\nvar _TraceKit = _interopRequireDefault(__nested_webpack_require_19588__(/*! @logrocket/utils/src/TraceKit */ \"./packages/@logrocket/utils/src/TraceKit.js\"));\n/* eslint-disable */\n\n/*\nSome contents of this file were originaly from raven-js, BSD-2 Clause\n\nCopyright (c) 2018 Sentry (https://sentry.io) and individual contributors.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n* Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\nvar objectPrototype = Object.prototype;\nfunction isUndefined(what) {\n  return what === void 0;\n}\nfunction isFunction(what) {\n  return typeof what === 'function';\n}\nfunction each(obj, callback) {\n  var i, j;\n  if (isUndefined(obj.length)) {\n    for (i in obj) {\n      if (hasKey(obj, i)) {\n        callback.call(null, i, obj[i]);\n      }\n    }\n  } else {\n    j = obj.length;\n    if (j) {\n      for (i = 0; i < j; i++) {\n        callback.call(null, i, obj[i]);\n      }\n    }\n  }\n}\n\n/**\n * hasKey, a better form of hasOwnProperty\n * Example: hasKey(MainHostObject, property) === true/false\n *\n * @param {Object} host object to check property\n * @param {string} key to check\n */\nfunction hasKey(object, key) {\n  return objectPrototype.hasOwnProperty.call(object, key);\n}\n\n/**\n * Polyfill a method\n * @param obj object e.g. `document`\n * @param name method name present on object e.g. `addEventListener`\n * @param replacement replacement function\n * @param track {optional} record instrumentation to an array\n */\nfunction fill(obj, name, replacement, track) {\n  var orig = obj[name];\n  obj[name] = replacement(orig);\n  if (track) {\n    track.push([obj, name, orig]);\n  }\n}\nvar _window = typeof window !== 'undefined' ? window : typeof __nested_webpack_require_19588__.g !== 'undefined' ? __nested_webpack_require_19588__.g : typeof self !== 'undefined' ? self : {};\nvar _document = _window.document;\nvar Handler = /*#__PURE__*/function () {\n  function Handler(_ref) {\n    var captureException = _ref.captureException;\n    (0, _classCallCheck2.default)(this, Handler);\n    this._errorHandler = this._errorHandler.bind(this);\n    this._ignoreOnError = 0;\n    this._wrappedBuiltIns = [];\n    this.captureException = captureException;\n    _TraceKit.default.report.subscribe(this._errorHandler);\n    this._instrumentTryCatch();\n  }\n  (0, _createClass2.default)(Handler, [{\n    key: \"uninstall\",\n    value: function uninstall() {\n      _TraceKit.default.report.unsubscribe(this._errorHandler);\n\n      // restore any wrapped builtins\n      var builtin;\n      while (this._wrappedBuiltIns.length) {\n        builtin = this._wrappedBuiltIns.shift();\n        var obj = builtin[0],\n          name = builtin[1],\n          orig = builtin[2];\n        obj[name] = orig;\n      }\n    }\n  }, {\n    key: \"_errorHandler\",\n    value: function _errorHandler(report) {\n      if (!this._ignoreOnError) {\n        this.captureException(report);\n      }\n    }\n  }, {\n    key: \"_ignoreNextOnError\",\n    value: function _ignoreNextOnError() {\n      var _this = this;\n      this._ignoreOnError += 1;\n      setTimeout(function () {\n        // onerror should trigger before setTimeout\n        _this._ignoreOnError -= 1;\n      });\n    }\n\n    /*\n     * Wrap code within a context so Handler can capture errors\n     * reliably across domains that is executed immediately.\n     *\n     * @param {object} options A specific set of options for this context [optional]\n     * @param {function} func The callback to be immediately executed within the context\n     * @param {array} args An array of arguments to be called with the callback [optional]\n     */\n  }, {\n    key: \"context\",\n    value: function context(options, func, args) {\n      if (isFunction(options)) {\n        args = func || [];\n        func = options;\n        options = undefined;\n      }\n      return this.wrap(options, func).apply(this, args);\n    }\n  }, {\n    key: \"wrap\",\n    value:\n    /*\n     * Wrap code within a context and returns back a new function to be executed\n     *\n     * @param {object} options A specific set of options for this context [optional]\n     * @param {function} func The function to be wrapped in a new context\n     * @param {function} func A function to call before the try/catch wrapper [optional, private]\n     * @return {function} The newly wrapped functions with a context\n     */\n    function wrap(options, func, _before) {\n      var self = this;\n      // 1 argument has been passed, and it's not a function\n      // so just return it\n      if (isUndefined(func) && !isFunction(options)) {\n        return options;\n      }\n\n      // options is optional\n      if (isFunction(options)) {\n        func = options;\n        options = undefined;\n      }\n\n      // At this point, we've passed along 2 arguments, and the second one\n      // is not a function either, so we'll just return the second argument.\n      if (!isFunction(func)) {\n        return func;\n      }\n\n      // We don't wanna wrap it twice!\n      try {\n        if (func.__lr__) {\n          return func;\n        }\n\n        // If this has already been wrapped in the past, return that\n        if (func.__lr_wrapper__) {\n          return func.__lr_wrapper__;\n        }\n\n        // If func is not extensible, return the function as-is to prevent TypeErrors\n        // when trying to add new props & to assure immutable funcs aren't changed\n        if (!Object.isExtensible(func)) {\n          return func;\n        }\n      } catch (e) {\n        // Just accessing custom props in some Selenium environments\n        // can cause a \"Permission denied\" exception (see lr-js#495).\n        // Bail on wrapping and return the function as-is (defers to window.onerror).\n        return func;\n      }\n      function wrapped() {\n        var args = [],\n          i = arguments.length,\n          deep = !options || options && options.deep !== false;\n        if (_before && isFunction(_before)) {\n          _before.apply(this, arguments);\n        }\n\n        // Recursively wrap all of a function's arguments that are\n        // functions themselves.\n        while (i--) {\n          args[i] = deep ? self.wrap(options, arguments[i]) : arguments[i];\n        }\n        try {\n          // Attempt to invoke user-land function. This is part of the LogRocket SDK.\n          // If you're seeing this frame in a stack trace, it means that LogRocket caught\n          // an unhandled error thrown by your application code, reported it, then bubbled\n          // it up. This is expected behavior and is not a bug with LogRocket.\n          return func.apply(this, args);\n        } catch (e) {\n          self._ignoreNextOnError();\n          self.captureException(_TraceKit.default.computeStackTrace(e), options);\n          throw e;\n        }\n      }\n\n      // copy over properties of the old function\n      for (var property in func) {\n        if (hasKey(func, property)) {\n          wrapped[property] = func[property];\n        }\n      }\n      wrapped.prototype = func.prototype;\n      func.__lr_wrapper__ = wrapped;\n      // Signal that this function has been wrapped already\n      // for both debugging and to prevent it to being wrapped twice\n      wrapped.__lr__ = true;\n      wrapped.__inner__ = func;\n      return wrapped;\n    }\n  }, {\n    key: \"_instrumentTryCatch\",\n    value:\n    /**\n     * Install any queued plugins\n     */\n    function _instrumentTryCatch() {\n      var self = this;\n      var wrappedBuiltIns = self._wrappedBuiltIns;\n      function wrapTimeFn(orig) {\n        return function (fn, t) {\n          // preserve arity\n          // Make a copy of the arguments to prevent deoptimization\n          // https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#32-leaking-arguments\n          var args = new Array(arguments.length);\n          for (var i = 0; i < args.length; ++i) {\n            args[i] = arguments[i];\n          }\n          var originalCallback = args[0];\n          if (isFunction(originalCallback)) {\n            args[0] = self.wrap(originalCallback);\n          }\n\n          // IE < 9 doesn't support .call/.apply on setInterval/setTimeout, but it\n          // also supports only two arguments and doesn't care what this is, so we\n          // can just call the original function directly.\n          if (orig.apply) {\n            return orig.apply(this, args);\n          } else {\n            return orig(args[0], args[1]);\n          }\n        };\n      }\n      function wrapEventTarget(global) {\n        var proto = _window[global] && _window[global].prototype;\n        if (proto && proto.hasOwnProperty && proto.hasOwnProperty('addEventListener')) {\n          fill(proto, 'addEventListener', function (orig) {\n            return function (evtName, fn, capture, secure) {\n              // preserve arity\n              try {\n                if (fn && fn.handleEvent) {\n                  fn.handleEvent = self.wrap(fn.handleEvent);\n                }\n              } catch (err) {\n                // can sometimes get 'Permission denied to access property \"handle Event'\n              }\n\n              // More breadcrumb DOM capture ... done here and not in `_instrumentBreadcrumbs`\n              // so that we don't have more than one wrapper function\n              var before;\n              return orig.call(this, evtName, self.wrap(fn, undefined, before), capture, secure);\n            };\n          }, wrappedBuiltIns);\n          fill(proto, 'removeEventListener', function (orig) {\n            return function (evt, fn, capture, secure) {\n              try {\n                fn = fn && (fn.__lr_wrapper__ ? fn.__lr_wrapper__ : fn);\n              } catch (e) {\n                // ignore, accessing __lr_wrapper__ will throw in some Selenium environments\n              }\n              return orig.call(this, evt, fn, capture, secure);\n            };\n          }, wrappedBuiltIns);\n        }\n      }\n      fill(_window, 'setTimeout', wrapTimeFn, wrappedBuiltIns);\n      fill(_window, 'setInterval', wrapTimeFn, wrappedBuiltIns);\n      if (_window.requestAnimationFrame) {\n        fill(_window, 'requestAnimationFrame', function (orig) {\n          return function (cb) {\n            return orig(self.wrap(cb));\n          };\n        }, wrappedBuiltIns);\n      }\n\n      // event targets borrowed from bugsnag-js:\n      // https://github.com/bugsnag/bugsnag-js/blob/master/src/bugsnag.js#L666\n      var eventTargets = ['EventTarget', 'Window', 'Node', 'ApplicationCache', 'AudioTrackList', 'ChannelMergerNode', 'CryptoOperation', 'EventSource', 'FileReader', 'HTMLUnknownElement', 'IDBDatabase', 'IDBRequest', 'IDBTransaction', 'KeyOperation', 'MediaController', 'MessagePort', 'ModalWindow', 'Notification', 'SVGElementInstance', 'Screen', 'TextTrack', 'TextTrackCue', 'TextTrackList', 'WebSocket', 'WebSocketWorker', 'Worker', 'XMLHttpRequest', 'XMLHttpRequestEventTarget', 'XMLHttpRequestUpload'];\n      for (var i = 0; i < eventTargets.length; i++) {\n        wrapEventTarget(eventTargets[i]);\n      }\n      var $ = _window.jQuery || _window.$;\n      if ($ && $.fn && $.fn.ready) {\n        fill($.fn, 'ready', function (orig) {\n          return function (fn) {\n            return orig.call(this, self.wrap(fn));\n          };\n        }, wrappedBuiltIns);\n      }\n    }\n  }]);\n  return Handler;\n}();\nexports[\"default\"] = Handler;\n;\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/exceptions/src/registerExceptions.js\":\n/*!******************************************************************!*\\\n  !*** ./packages/@logrocket/exceptions/src/registerExceptions.js ***!\n  \\******************************************************************/\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_32875__) {\n\n\"use strict\";\n\n\nvar _interopRequireDefault = __nested_webpack_require_32875__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nvar _typeof = __nested_webpack_require_32875__(/*! @babel/runtime/helpers/typeof */ \"./node_modules/@babel/runtime/helpers/typeof.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = registerCore;\nvar _raven = _interopRequireDefault(__nested_webpack_require_32875__(/*! ./raven/raven */ \"./packages/@logrocket/exceptions/src/raven/raven.js\"));\nvar Capture = _interopRequireWildcard(__nested_webpack_require_32875__(/*! ./Capture */ \"./packages/@logrocket/exceptions/src/Capture.js\"));\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction registerCore(logger) {\n  var raven = new _raven.default({\n    captureException: function captureException(errorReport) {\n      Capture.captureException(logger, null, null, errorReport);\n    }\n  });\n  var rejectionHandler = function rejectionHandler(evt) {\n    // http://2ality.com/2016/04/unhandled-rejections.html\n    logger.addEvent('lr.core.Exception', function () {\n      return {\n        exceptionType: 'UNHANDLED_REJECTION',\n        message: evt.reason || 'Unhandled Promise rejection'\n      };\n    });\n  };\n  window.addEventListener('unhandledrejection', rejectionHandler);\n  return function () {\n    window.removeEventListener('unhandledrejection', rejectionHandler);\n    raven.uninstall();\n  };\n}\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/exceptions/src/stackTraceFromError.js\":\n/*!*******************************************************************!*\\\n  !*** ./packages/@logrocket/exceptions/src/stackTraceFromError.js ***!\n  \\*******************************************************************/\n/***/ (function(__unused_webpack_module, exports) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = stackTraceFromError;\nfunction stackTraceFromError(errorReport) {\n  function makeNotNull(val) {\n    return val === null ? undefined : val;\n  }\n  return errorReport.stack ? errorReport.stack.map(function (frame) {\n    return {\n      lineNumber: makeNotNull(frame.line),\n      columnNumber: makeNotNull(frame.column),\n      fileName: makeNotNull(frame.url),\n      functionName: makeNotNull(frame.func)\n    };\n  }) : undefined;\n}\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/network/src/fetchIntercept.js\":\n/*!***********************************************************!*\\\n  !*** ./packages/@logrocket/network/src/fetchIntercept.js ***!\n  \\***********************************************************/\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_36627__) {\n\n\"use strict\";\n\n\nvar _interopRequireDefault = __nested_webpack_require_36627__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(__nested_webpack_require_36627__(/*! @babel/runtime/helpers/toConsumableArray */ \"./node_modules/@babel/runtime/helpers/toConsumableArray.js\"));\nvar _registerXHR = __nested_webpack_require_36627__(/*! ./registerXHR */ \"./packages/@logrocket/network/src/registerXHR.js\");\nvar interceptors = [];\nfunction makeInterceptor(fetch, fetchId) {\n  var reversedInterceptors = interceptors.reduce(function (array, interceptor) {\n    return [interceptor].concat(array);\n  }, []);\n  // if a browser supports fetch, it supports promise\n  // eslint-disable-next-line compat/compat\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  }\n  var promise = Promise.resolve(args);\n\n  // Register request interceptors\n  reversedInterceptors.forEach(function (_ref) {\n    var request = _ref.request,\n      requestError = _ref.requestError;\n    if (request || requestError) {\n      promise = promise.then(function (args) {\n        return request.apply(void 0, [fetchId].concat((0, _toConsumableArray2.default)(args)));\n      }, function (args) {\n        return requestError.apply(void 0, [fetchId].concat((0, _toConsumableArray2.default)(args)));\n      });\n    }\n  });\n  promise = promise.then(function (args) {\n    (0, _registerXHR.setActive)(false);\n    var res;\n    var err;\n    try {\n      res = fetch.apply(void 0, (0, _toConsumableArray2.default)(args));\n    } catch (_err) {\n      err = _err;\n    }\n    (0, _registerXHR.setActive)(true);\n    if (err) {\n      throw err;\n    }\n    return res;\n  });\n  reversedInterceptors.forEach(function (_ref2) {\n    var response = _ref2.response,\n      responseError = _ref2.responseError;\n    if (response || responseError) {\n      promise = promise.then(function (res) {\n        return response(fetchId, res);\n      }, function (err) {\n        return responseError && responseError(fetchId, err);\n      });\n    }\n  });\n  return promise;\n}\nfunction attach(env) {\n  if (!env.fetch || !env.Promise) {\n    // Make sure fetch is available in the given environment. If it's not, then\n    // default to using XHR intercept.\n    return;\n  }\n  var isPolyfill = env.fetch.polyfill;\n\n  // eslint-disable-next-line no-param-reassign\n  env.fetch = function (fetch) {\n    var fetchId = 0;\n    return function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      return makeInterceptor.apply(void 0, [fetch, fetchId++].concat(args));\n    };\n  }(env.fetch);\n\n  // Forward the polyfill properly from fetch (set by github/whatwg-fetch).\n  if (isPolyfill) {\n    // eslint-disable-next-line no-param-reassign\n    env.fetch.polyfill = isPolyfill;\n  }\n}\n\n// TODO: React Native\n//   attach(global);\n\nvar didAttach = false;\nvar _default = {\n  register: function register(interceptor) {\n    if (!didAttach) {\n      didAttach = true;\n      attach(window);\n    }\n    interceptors.push(interceptor);\n    return function () {\n      var index = interceptors.indexOf(interceptor);\n      if (index >= 0) {\n        interceptors.splice(index, 1);\n      }\n    };\n  },\n  clear: function clear() {\n    interceptors = [];\n  }\n};\nexports[\"default\"] = _default;\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/network/src/index.js\":\n/*!**************************************************!*\\\n  !*** ./packages/@logrocket/network/src/index.js ***!\n  \\**************************************************/\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_40486__) {\n\n\"use strict\";\n\n\nvar _interopRequireDefault = __nested_webpack_require_40486__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = registerNetwork;\nvar _defineProperty2 = _interopRequireDefault(__nested_webpack_require_40486__(/*! @babel/runtime/helpers/defineProperty */ \"./node_modules/@babel/runtime/helpers/defineProperty.js\"));\nvar _typeof2 = _interopRequireDefault(__nested_webpack_require_40486__(/*! @babel/runtime/helpers/typeof */ \"./node_modules/@babel/runtime/helpers/typeof.js\"));\nvar _registerFetch = _interopRequireDefault(__nested_webpack_require_40486__(/*! ./registerFetch */ \"./packages/@logrocket/network/src/registerFetch.js\"));\nvar _registerIonic = __nested_webpack_require_40486__(/*! ./registerIonic */ \"./packages/@logrocket/network/src/registerIonic.ts\");\nvar _registerNetworkInformation = _interopRequireDefault(__nested_webpack_require_40486__(/*! ./registerNetworkInformation */ \"./packages/@logrocket/network/src/registerNetworkInformation.js\"));\nvar _registerXHR = _interopRequireDefault(__nested_webpack_require_40486__(/*! ./registerXHR */ \"./packages/@logrocket/network/src/registerXHR.js\"));\nvar _mapValues = _interopRequireDefault(__nested_webpack_require_40486__(/*! @logrocket/utils/src/mapValues */ \"./packages/@logrocket/utils/src/mapValues.js\"));\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n// eslint-disable-line no-restricted-imports\n\nfunction registerNetwork(logger) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    isReactNative: false\n  };\n  var isReactNative = config.isReactNative,\n    shouldAugmentNPS = config.shouldAugmentNPS,\n    shouldParseXHRBlob = config.shouldParseXHRBlob;\n  var ignoredNetwork = {};\n\n  // truncate if > 4MB in size\n  var truncate = function truncate(data) {\n    var limit = 1024 * 1000 * 4;\n    var str = data;\n    if ((0, _typeof2.default)(data) === 'object' && data != null) {\n      var proto = Object.getPrototypeOf(data);\n      if (proto === Object.prototype || proto === null) {\n        // plain object - jsonify for the size check\n        str = JSON.stringify(data);\n      }\n    }\n    if (str && str.length && str.length > limit && typeof str === 'string') {\n      var beginning = str.substring(0, 1000);\n      return \"\".concat(beginning, \" ... LogRocket truncating to first 1000 characters.\\n      Keep data under 4MB to prevent truncation. https://docs.logrocket.com/reference/network\");\n    }\n    return data;\n  };\n  var addRequest = function addRequest(reqId, request) {\n    var method = request.method;\n    logger.addEvent('lr.network.RequestEvent', function () {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$isEnabled = _ref.isEnabled,\n        isEnabled = _ref$isEnabled === void 0 ? true : _ref$isEnabled,\n        _ref$requestSanitizer = _ref.requestSanitizer,\n        requestSanitizer = _ref$requestSanitizer === void 0 ? function (f) {\n          return f;\n        } : _ref$requestSanitizer;\n      if (!isEnabled) {\n        return null;\n      }\n      var sanitized = null;\n      try {\n        // only try catch user defined functions\n        sanitized = requestSanitizer(_objectSpread(_objectSpread({}, request), {}, {\n          reqId: reqId\n        }));\n      } catch (err) {\n        console.error(err);\n      }\n      if (sanitized) {\n        var url = sanitized.url;\n        if (typeof document !== 'undefined' && typeof document.createElement === 'function') {\n          // Writing and then reading from an a tag turns a relative\n          // url into an absolute one.\n          var a = document.createElement('a');\n          a.href = sanitized.url;\n          url = a.href;\n        }\n        return {\n          reqId: reqId,\n          // default\n          url: url,\n          // sanitized\n          headers: (0, _mapValues.default)(sanitized.headers, function (headerValue) {\n            // sanitized\n            return \"\".concat(headerValue);\n          }),\n          body: truncate(sanitized.body),\n          // sanitized\n          method: method,\n          // default\n          referrer: sanitized.referrer || undefined,\n          // sanitized\n          mode: sanitized.mode || undefined,\n          // sanitized\n          credentials: sanitized.credentials || undefined // sanitized\n        };\n      }\n\n      ignoredNetwork[reqId] = true;\n      return null;\n    });\n  };\n  var addResponse = function addResponse(reqId, response) {\n    var method = response.method,\n      status = response.status;\n    logger.addEvent('lr.network.ResponseEvent', function () {\n      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref2$isEnabled = _ref2.isEnabled,\n        isEnabled = _ref2$isEnabled === void 0 ? true : _ref2$isEnabled,\n        _ref2$responseSanitiz = _ref2.responseSanitizer,\n        responseSanitizer = _ref2$responseSanitiz === void 0 ? function (f) {\n          return f;\n        } : _ref2$responseSanitiz;\n      if (!isEnabled) {\n        return null;\n      } else if (ignoredNetwork[reqId]) {\n        delete ignoredNetwork[reqId];\n        return null;\n      }\n      var sanitized = null;\n      try {\n        // only try catch user defined functions\n        sanitized = responseSanitizer(_objectSpread(_objectSpread({}, response), {}, {\n          reqId: reqId\n        }));\n      } catch (err) {\n        console.error(err);\n        // fall through to redacted log\n      }\n\n      if (sanitized) {\n        return {\n          reqId: reqId,\n          // default\n          status: sanitized.status,\n          // sanitized\n          headers: (0, _mapValues.default)(sanitized.headers, function (headerValue) {\n            // sanitized\n            return \"\".concat(headerValue);\n          }),\n          body: truncate(sanitized.body),\n          // sanitized\n          method: method // default\n        };\n      }\n\n      return {\n        reqId: reqId,\n        // default\n        status: status,\n        // default\n        headers: {},\n        // redacted\n        body: null,\n        // redacted\n        method: method // default\n      };\n    });\n  };\n\n  var isIgnored = function isIgnored(reqId) {\n    return logger.isDisabled || ignoredNetwork[reqId] === true;\n  };\n  var unsubFetch = (0, _registerFetch.default)({\n    addRequest: addRequest,\n    addResponse: addResponse,\n    isIgnored: isIgnored\n  });\n  var unsubXHR = (0, _registerXHR.default)({\n    addRequest: addRequest,\n    addResponse: addResponse,\n    isIgnored: isIgnored,\n    logger: logger,\n    shouldAugmentNPS: shouldAugmentNPS,\n    shouldParseXHRBlob: shouldParseXHRBlob\n  });\n  var unsubIonic = (0, _registerIonic.registerIonic)({\n    addRequest: addRequest,\n    addResponse: addResponse,\n    isIgnored: isIgnored\n  });\n  var unsubNetworkInformation = isReactNative ? function () {} : (0, _registerNetworkInformation.default)(logger);\n  return function () {\n    unsubNetworkInformation();\n    unsubFetch();\n    unsubXHR();\n    unsubIonic();\n  };\n}\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/network/src/registerFetch.js\":\n/*!**********************************************************!*\\\n  !*** ./packages/@logrocket/network/src/registerFetch.js ***!\n  \\**********************************************************/\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_48638__) {\n\n\"use strict\";\n\n\nvar _interopRequireDefault = __nested_webpack_require_48638__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = registerFetch;\nvar _defineProperty2 = _interopRequireDefault(__nested_webpack_require_48638__(/*! @babel/runtime/helpers/defineProperty */ \"./node_modules/@babel/runtime/helpers/defineProperty.js\"));\nvar _mapValues = _interopRequireDefault(__nested_webpack_require_48638__(/*! @logrocket/utils/src/mapValues */ \"./packages/@logrocket/utils/src/mapValues.js\"));\nvar _fetchIntercept = _interopRequireDefault(__nested_webpack_require_48638__(/*! ./fetchIntercept */ \"./packages/@logrocket/network/src/fetchIntercept.js\"));\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction makeObjectFromHeaders(headers) {\n  // If using real fetch, we must stringify the Headers object.\n  if (headers == null || typeof headers.forEach !== 'function') {\n    return headers;\n  }\n  var result = {};\n  headers.forEach(function (value, key) {\n    if (result[key]) {\n      result[key] = \"\".concat(result[key], \",\").concat(value);\n    } else {\n      result[key] = \"\".concat(value);\n    }\n  });\n  return result;\n}\n\n// XHR specification is unclear of what types to allow in value so using toString method for now\nvar stringifyHeaders = function stringifyHeaders(headers) {\n  return (0, _mapValues.default)(makeObjectFromHeaders(headers), function (value) {\n    return \"\".concat(value);\n  });\n};\nfunction pluckFetchFields() {\n  var arg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return {\n    url: arg.url,\n    headers: stringifyHeaders(arg.headers),\n    method: arg.method && arg.method.toUpperCase(),\n    referrer: arg.referrer || undefined,\n    mode: arg.mode || undefined,\n    credentials: arg.credentials || undefined\n  };\n}\nfunction registerFetch(_ref) {\n  var addRequest = _ref.addRequest,\n    addResponse = _ref.addResponse,\n    isIgnored = _ref.isIgnored;\n  var LOGROCKET_FETCH_LABEL = 'fetch-';\n  var fetchMethodMap = {};\n  var unregister = _fetchIntercept.default.register({\n    request: function request(fetchId) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      var p;\n      if (typeof Request !== 'undefined' && args[0] instanceof Request) {\n        var clonedText;\n\n        // Request.clone() and Request.text() may throw in Safari (e.g., when\n        // request body contains FormData)\n        try {\n          clonedText = args[0].clone().text();\n        } catch (err) {\n          // if a browser supports fetch, it supports promise\n          // eslint-disable-next-line compat/compat\n          clonedText = Promise.resolve(\"LogRocket fetch error: \".concat(err.message));\n        }\n        p = clonedText.then(function (body) {\n          return _objectSpread(_objectSpread({}, pluckFetchFields(args[0])), {}, {\n            body: body\n          });\n        }, function (err) {\n          return _objectSpread(_objectSpread({}, pluckFetchFields(args[0])), {}, {\n            body: \"LogRocket fetch error: \".concat(err.message)\n          });\n        });\n      } else {\n        // if a browser supports fetch, it supports promise\n        // eslint-disable-next-line compat/compat\n        p = Promise.resolve(_objectSpread(_objectSpread({}, pluckFetchFields(args[1])), {}, {\n          url: \"\".concat(args[0]),\n          body: (args[1] || {}).body\n        }));\n      }\n      return p.then(function (req) {\n        fetchMethodMap[fetchId] = req.method;\n        addRequest(\"\".concat(LOGROCKET_FETCH_LABEL).concat(fetchId), req);\n        return args;\n      });\n    },\n    requestError: function requestError(fetchId, error) {\n      // if a browser supports fetch, it supports promise\n      // eslint-disable-next-line compat/compat\n      return Promise.reject(error);\n    },\n    response: function response(fetchId, _response) {\n      var responseClone;\n      var responseTextPromise;\n      if (isIgnored(\"\".concat(LOGROCKET_FETCH_LABEL).concat(fetchId))) {\n        // Don't even try to read ignored requests\n        return _response;\n      }\n      try {\n        // TODO: enhance function on original response and future clones for:\n        // text(), json(), blob(), formdata(), arraybuffer()\n        responseClone = _response.clone();\n      } catch (err) {\n        // safari has a bug where cloning can fail\n        var responseHash = {\n          url: _response.url,\n          status: _response.status,\n          headers: stringifyHeaders(_response.headers),\n          body: \"LogRocket fetch error: \".concat(err.message),\n          method: fetchMethodMap[fetchId]\n        };\n        delete fetchMethodMap[fetchId];\n        addResponse(\"\".concat(LOGROCKET_FETCH_LABEL).concat(fetchId), responseHash);\n        return _response;\n      }\n      try {\n        if (window.TextDecoder && responseClone.body) {\n          // use a reader to manually read the response body rather than calling response.text()\n          // response.text() was timing out for some responses, in some cases because Apollo sends\n          //   an abort signal or because the stream wasn't getting terminated cleanly\n          // using a reader allows us to capture what we can from response bodies before the\n          //   response receives an abort signal\n          var reader = responseClone.body.getReader();\n          // response bodies always decode with UTF-8\n          // https://developer.mozilla.org/en-US/docs/Web/API/Response/text\n          var utf8Decoder = new window.TextDecoder('utf-8');\n          var bodyContents = '';\n          responseTextPromise = reader.read().then(function readResponseBody(_ref2) {\n            var done = _ref2.done,\n              value = _ref2.value;\n            if (done) {\n              return bodyContents;\n            }\n            var chunk = value ? utf8Decoder.decode(value, {\n              stream: true\n            }) : '';\n            bodyContents += chunk;\n            return reader.read().then(readResponseBody);\n          });\n        } else {\n          // TextDecoder doesn't have support across all browsers that LR supports, so if there's\n          //  no TextDecoder, fall back to the old approach\n          responseTextPromise = responseClone.text();\n        }\n      } catch (error) {\n        // eslint-disable-next-line compat/compat\n        responseTextPromise = Promise.resolve(\"LogRocket error reading body: \".concat(error.message));\n      }\n      responseTextPromise.catch(function (error) {\n        // don't drop request & log to console when the request is aborted,\n        // as it may have already completed\n        // https://github.com/LogRocket/logrocket/issues/34\n        if (error.name === 'AbortError' && error instanceof DOMException) {\n          return;\n        }\n        return \"LogRocket error reading body: \".concat(error.message);\n      }).then(function (data) {\n        var responseHash = {\n          url: _response.url,\n          status: _response.status,\n          headers: stringifyHeaders(_response.headers),\n          body: data,\n          method: fetchMethodMap[fetchId]\n        };\n        delete fetchMethodMap[fetchId];\n        addResponse(\"\".concat(LOGROCKET_FETCH_LABEL).concat(fetchId), responseHash);\n      });\n      return _response;\n    },\n    responseError: function responseError(fetchId, error) {\n      var response = {\n        url: undefined,\n        status: 0,\n        headers: {},\n        body: \"\".concat(error)\n      };\n      addResponse(\"\".concat(LOGROCKET_FETCH_LABEL).concat(fetchId), response);\n      // if a browser supports fetch, it supports promise\n      // eslint-disable-next-line compat/compat\n      return Promise.reject(error);\n    }\n  });\n  return unregister;\n}\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/network/src/registerIonic.ts\":\n/*!**********************************************************!*\\\n  !*** ./packages/@logrocket/network/src/registerIonic.ts ***!\n  \\**********************************************************/\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_57609__) {\n\n\"use strict\";\n\n\nvar _interopRequireDefault = __nested_webpack_require_57609__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.mergeHeaders = mergeHeaders;\nexports.serializeQueryParams = serializeQueryParams;\nexports.appendQueryParamsString = appendQueryParamsString;\nexports.processData = processData;\nexports.registerIonic = registerIonic;\nvar _defineProperty2 = _interopRequireDefault(__nested_webpack_require_57609__(/*! @babel/runtime/helpers/defineProperty */ \"./node_modules/@babel/runtime/helpers/defineProperty.js\"));\nvar _typeof2 = _interopRequireDefault(__nested_webpack_require_57609__(/*! @babel/runtime/helpers/typeof */ \"./node_modules/@babel/runtime/helpers/typeof.js\"));\nvar _toConsumableArray2 = _interopRequireDefault(__nested_webpack_require_57609__(/*! @babel/runtime/helpers/toConsumableArray */ \"./node_modules/@babel/runtime/helpers/toConsumableArray.js\"));\nvar _protectFunc = _interopRequireDefault(__nested_webpack_require_57609__(/*! @logrocket/utils/src/protectFunc */ \"./packages/@logrocket/utils/src/protectFunc.js\"));\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nvar VALID_HTTP_METHODS = new Set(['get', 'put', 'post', 'patch', 'head', 'delete', 'options', 'upload', 'download']);\nvar VALID_SERIALIZERS = new Set(['urlencoded', 'json', 'utf8']);\nvar UNSUPPORTED_SERIALIZERS = new Set(['raw', 'multipart']);\nvar LOGROCKET_IONIC_LABEL = 'ionic-';\nvar UNSUPPORTED_PLATFORMS = new Set(['desktop', 'mobileweb', 'pwa']);\nvar FORM_DATA = new Set(['FormData']);\nvar EMPTY_SET = new Set();\nvar STRING_SET = new Set(['string']);\nvar STRING_ARRAY_SET = new Set(['string', 'array']);\nvar ALLOWED_DATA_TYPES = {\n  utf8: STRING_SET,\n  urlencoded: new Set(['object']),\n  json: new Set(['array', 'object']),\n  raw: new Set(['Uint8Array', 'ArrayBuffer']),\n  default: EMPTY_SET\n};\n\n// Used in intercepting Ionic pugin requests found here https://www.npmjs.com/package/@ionic-native/http\n// based on https://github.com/silkimen/cordova-plugin-advanced-http/blob/master/www/public-interface.js\n\nfunction checkForValidStringValue(list, value, fieldName) {\n  if (typeof value !== 'string') {\n    throw new Error(\"\".concat(fieldName, \" must be one of: \").concat((0, _toConsumableArray2.default)(list).join(', ')));\n  }\n\n  // eslint-disable-next-line no-param-reassign\n  value = value.trim().toLowerCase();\n  if (!list.has(value)) {\n    throw new Error(\"\".concat(fieldName, \" must be one of: \").concat((0, _toConsumableArray2.default)(list).join(', ')));\n  }\n  return value;\n}\nfunction checkKeyValuePairObject(obj, allowedChildren, onInvalidValueMessage) {\n  if ((0, _typeof2.default)(obj) !== 'object') {\n    throw new Error(onInvalidValueMessage);\n  }\n  for (var _i = 0, _Object$keys = Object.keys(obj); _i < _Object$keys.length; _i++) {\n    var key = _Object$keys[_i];\n    if (!allowedChildren.has((0, _typeof2.default)(obj[key]))) {\n      throw new Error(onInvalidValueMessage);\n    }\n  }\n  return obj;\n}\nfunction getMatchingHostHeaders(url, ionicHttp) {\n  var _URL = new URL(url),\n    host = _URL.host;\n  return ionicHttp.getHeaders(host) || null;\n}\nfunction mergeHeaders(defaultHeaders, headers) {\n  return _objectSpread(_objectSpread({}, defaultHeaders), headers);\n}\nfunction getMergedHeaders(url, requestHeaders, ionicHttp) {\n  // get global headers via public method\n  var globalHeaders = ionicHttp.getHeaders('*') || {};\n  var hostHeaders = getMatchingHostHeaders(url, ionicHttp) || {};\n  return mergeHeaders(mergeHeaders(globalHeaders, hostHeaders), requestHeaders);\n}\nfunction serializeValue(value, encode) {\n  if (encode) {\n    return encodeURIComponent(value);\n  } else {\n    return value;\n  }\n}\nfunction serializeIdentifier(parentKey, key, encode) {\n  if (!parentKey.length) {\n    return encode ? encodeURIComponent(key) : key;\n  }\n  if (encode) {\n    return \"\".concat(encodeURIComponent(parentKey), \"[\").concat(encodeURIComponent(key), \"]\");\n  } else {\n    return \"\".concat(parentKey, \"[\").concat(key, \"]\");\n  }\n}\nfunction serializeArray(parentKey, array, encode) {\n  var parts = [];\n  var _iterator = _createForOfIteratorHelper(array),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var e = _step.value;\n      if (Array.isArray(e)) {\n        parts.push(serializeArray(\"\".concat(parentKey, \"[]\"), e, encode));\n        continue;\n      } else if ((0, _typeof2.default)(e) === 'object') {\n        /* This replicates what appears to be a bug in the Ionic code in order to capture everything identically\n           parts.push(serializeObject(`${parentKey}[]${array[i]}`, encode));\n           https://github.com/silkimen/cordova-plugin-advanced-http/blob/master/www/url-util.js#L73\n        */\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        parts.push(serializeObject(\"\".concat(parentKey, \"[]\").concat(e), encode, undefined));\n        continue;\n      }\n      parts.push(\"\".concat(serializeIdentifier(parentKey, '', encode), \"=\").concat(serializeValue(e, encode)));\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return parts.join('&');\n}\nfunction serializeObject(parentKey, object, encode) {\n  var parts = [];\n  for (var key in object) {\n    if (!object.hasOwnProperty(key)) {\n      continue;\n    }\n    var identifier = parentKey.length ? \"\".concat(parentKey, \"[\").concat(key, \"]\") : key;\n    if (Array.isArray(object[key])) {\n      parts.push(serializeArray(identifier, object[key], encode));\n      continue;\n    } else if ((0, _typeof2.default)(object[key]) === 'object' && object[key] !== null) {\n      parts.push(serializeObject(identifier, object[key], encode));\n      continue;\n    }\n    parts.push(\"\".concat(serializeIdentifier(parentKey, key, encode), \"=\").concat(serializeValue(object[key], encode)));\n  }\n  return parts.join('&');\n}\nfunction serializeQueryParams(params, encode) {\n  return serializeObject('', params, encode);\n}\nfunction appendQueryParamsString(url, params) {\n  if (!url.length || !params.length) {\n    return url;\n  }\n  var _URL2 = new URL(url),\n    host = _URL2.host,\n    pathname = _URL2.pathname,\n    search = _URL2.search,\n    hash = _URL2.hash,\n    protocol = _URL2.protocol;\n  return \"\".concat(protocol, \"//\").concat(host).concat(pathname).concat(search.length ? \"\".concat(search, \"&\").concat(params) : \"?\".concat(params)).concat(hash);\n}\nfunction getAllowedDataTypes(dataSerializer) {\n  return ALLOWED_DATA_TYPES[dataSerializer] || ALLOWED_DATA_TYPES.default;\n}\nfunction getAllowedInstanceTypes(dataSerializer) {\n  return dataSerializer === 'multipart' ? FORM_DATA : EMPTY_SET;\n}\nfunction processData(data, dataSerializer) {\n  var currentDataType = (0, _typeof2.default)(data);\n  var allowedDataTypes = getAllowedDataTypes(dataSerializer);\n  var allowedInstanceTypes = getAllowedInstanceTypes(dataSerializer);\n  if (allowedInstanceTypes.size > 0) {\n    var isCorrectInstanceType = false;\n    allowedInstanceTypes.forEach(function (type) {\n      if (__nested_webpack_require_57609__.g[type] && data instanceof __nested_webpack_require_57609__.g[type]) {\n        isCorrectInstanceType = true;\n      }\n    });\n    if (!isCorrectInstanceType) {\n      throw new Error(\"INSTANCE_TYPE_MISMATCH_DATA \".concat((0, _toConsumableArray2.default)(allowedInstanceTypes).join(', ')));\n    }\n  }\n  if (allowedInstanceTypes.size === 0 && !allowedDataTypes.has(currentDataType)) {\n    throw new Error(\"TYPE_MISMATCH_DATA \".concat((0, _toConsumableArray2.default)(allowedDataTypes).join(', ')));\n  }\n  switch (dataSerializer) {\n    case 'utf8':\n      // already a string\n      return data;\n    default:\n      // object of some sort (urlencoded or json)\n      return JSON.stringify(data, undefined, 2);\n  }\n}\nfunction handleMissingOptions(options, ionicHttp) {\n  // eslint-disable-next-line no-param-reassign\n  options = options || {};\n  var serializer;\n  var data = options.data;\n  try {\n    // need to check special case if data type is not handled by LR but otherwise valid\n    serializer = checkForValidStringValue(VALID_SERIALIZERS, options.serializer || ionicHttp.getDataSerializer(), 'serializer / data payload type');\n  } catch (_unused) {\n    // if this fails it's of entirely invalid type, let it fail\n    serializer = checkForValidStringValue(UNSUPPORTED_SERIALIZERS, options.serializer || ionicHttp.getDataSerializer(), 'serializer / data payload type');\n    // is of a valid but unsupported to LR type, set data to empty\n    data = {};\n  }\n  return {\n    data: data,\n    filePath: options.filePath,\n    followRedirect: options.followRedirect,\n    headers: checkKeyValuePairObject(options.headers || {}, STRING_SET, 'Invalid header type, must be string'),\n    method: checkForValidStringValue(VALID_HTTP_METHODS, options.method || VALID_HTTP_METHODS[0], 'method'),\n    name: options.name,\n    params: checkKeyValuePairObject(options.params || {}, STRING_ARRAY_SET, 'Invalid param, must be of type string or array'),\n    responseType: options.responseType,\n    serializer: serializer,\n    connectTimeout: options.connectTimeout,\n    readTimeout: options.readTimeout,\n    timeout: options.timeout\n  };\n}\nvar ionicIdCounter = 0;\nfunction registerIonic(_ref) {\n  var _cordova, _cordova$plugin, _window$ionic;\n  var addRequest = _ref.addRequest,\n    addResponse = _ref.addResponse,\n    isIgnored = _ref.isIgnored;\n  var ionicHttp = (_cordova = window.cordova) === null || _cordova === void 0 ? void 0 : (_cordova$plugin = _cordova.plugin) === null || _cordova$plugin === void 0 ? void 0 : _cordova$plugin.http;\n  var ionicMap = {};\n  var unsubscribedFromIonic = false;\n  if (typeof ionicHttp === 'undefined') {\n    // Plugin does not exist! Empty uninstall hook.\n    return function () {};\n  }\n  var platforms = (_window$ionic = window.ionic) === null || _window$ionic === void 0 ? void 0 : _window$ionic.platforms;\n  if (typeof platforms !== 'undefined' && typeof platforms.some === 'function' && platforms.some(function (e) {\n    return UNSUPPORTED_PLATFORMS.has(e);\n  })) {\n    // We appear to be running in a web browser, do not hook and let XHR wrap instead.\n    return function () {};\n  }\n  var originalSendRequest = ionicHttp.sendRequest;\n  var handleResponse = (0, _protectFunc.default)(function (response, isSuccess, ionicReqId) {\n    if (!isIgnored(\"\".concat(LOGROCKET_IONIC_LABEL).concat(ionicReqId))) {\n      try {\n        var responseHash = {\n          url: response.url || '',\n          status: response.status < 600 && response.status >= 100 ? response.status : 0,\n          headers: response.headers || {},\n          body: isSuccess ? response.data : response.error,\n          method: ionicMap[ionicReqId].toUpperCase()\n        };\n        addResponse(\"\".concat(LOGROCKET_IONIC_LABEL).concat(ionicReqId), responseHash);\n      } catch (err) {\n        var _responseHash = {\n          url: response.url || '',\n          status: response.status < 600 && response.status >= 100 ? response.status : 0,\n          headers: response.headers || {},\n          body: \"LogRocket fetch error: \".concat(err.message),\n          method: ionicMap[ionicReqId].toUpperCase()\n        };\n        addResponse(\"\".concat(LOGROCKET_IONIC_LABEL).concat(ionicReqId), _responseHash);\n      }\n    } // Otherwise, don't even try to read ignored / unsubscribed requests\n  });\n\n  ionicHttp.sendRequest = function (url, options, success, failure) {\n    var currentId = ++ionicIdCounter;\n    var ourSuccessHandler = function ourSuccessHandler(response) {\n      if (!unsubscribedFromIonic) {\n        handleResponse(response, true, currentId);\n        delete ionicMap[currentId];\n      }\n      success(response);\n    };\n    var ourFailureHandler = function ourFailureHandler(response) {\n      if (!unsubscribedFromIonic) {\n        handleResponse(response, false, currentId);\n        delete ionicMap[currentId];\n      }\n      failure(response);\n    };\n    if (!unsubscribedFromIonic) {\n      try {\n        // will throw just like identical ionic code if input is invalid\n        var modifiedOptions = handleMissingOptions(options, ionicHttp);\n        var modifiedUrl = appendQueryParamsString(url, serializeObject('', modifiedOptions.params, true));\n        // need to minic behavior of Ionic API by adding global headers\n        var mergedHeaders = getMergedHeaders(url, modifiedOptions.headers, ionicHttp);\n\n        // ionic APIs default to get method\n        var method = modifiedOptions.method || 'get';\n        ionicMap[currentId] = method;\n        var requestHash = {\n          url: modifiedUrl,\n          method: method.toUpperCase(),\n          headers: mergedHeaders || {},\n          // only applicable on post, put or patch methods\n          body: processData(modifiedOptions.data || {}, modifiedOptions.serializer)\n        };\n        addRequest(\"\".concat(LOGROCKET_IONIC_LABEL).concat(currentId), requestHash);\n      } catch (err) {\n        var _requestHash = {\n          url: url,\n          method: (options.method || 'get').toUpperCase(),\n          headers: {},\n          body: \"LogRocket fetch error: \".concat(err.message)\n        };\n        addRequest(\"\".concat(LOGROCKET_IONIC_LABEL).concat(currentId), _requestHash);\n      }\n    }\n    return originalSendRequest(url, options, ourSuccessHandler, ourFailureHandler);\n  };\n  return function () {\n    unsubscribedFromIonic = true;\n    ionicHttp.sendRequest = originalSendRequest;\n    ionicMap = {};\n  };\n}\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/network/src/registerNetworkInformation.js\":\n/*!***********************************************************************!*\\\n  !*** ./packages/@logrocket/network/src/registerNetworkInformation.js ***!\n  \\***********************************************************************/\n/***/ (function(__unused_webpack_module, exports) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = registerNetworkInformation;\nvar EFFECTIVE_TYPE_VALS = {\n  'slow-2g': 'SLOW2G',\n  '2g': 'TWOG',\n  '3g': 'THREEG',\n  '4g': 'FOURG'\n};\nfunction registerNetworkInformation(logger) {\n  var lastStatus = undefined;\n  function sendNetworkInformation() {\n    var newStatus = {\n      online: window.navigator.onLine,\n      effectiveType: 'UNKOWN'\n    };\n    if (!window.navigator.onLine) {\n      newStatus.effectiveType = 'NONE';\n    } else if (window.navigator.connection && window.navigator.connection.effectiveType) {\n      newStatus.effectiveType = EFFECTIVE_TYPE_VALS[window.navigator.connection.effectiveType] || 'UNKNOWN';\n    }\n    if (lastStatus && newStatus.online === lastStatus.online && newStatus.effectiveType === lastStatus.effectiveType) {\n      return;\n    }\n    lastStatus = newStatus;\n    logger.addEvent('lr.network.NetworkStatusEvent', function () {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$isEnabled = _ref.isEnabled,\n        isEnabled = _ref$isEnabled === void 0 ? true : _ref$isEnabled;\n      if (!isEnabled) {\n        return null;\n      }\n      return newStatus;\n    });\n  }\n  setTimeout(sendNetworkInformation);\n  if (window.navigator.connection && typeof window.navigator.connection.addEventListener === 'function') {\n    window.navigator.connection.addEventListener('change', sendNetworkInformation);\n  }\n  window.addEventListener('online', sendNetworkInformation);\n  window.addEventListener('offline', sendNetworkInformation);\n  return function () {\n    window.removeEventListener('offline', sendNetworkInformation);\n    window.removeEventListener('online', sendNetworkInformation);\n    if (window.navigator.connection && typeof window.navigator.connection.removeEventListener === 'function') {\n      window.navigator.connection.removeEventListener('change', sendNetworkInformation);\n    }\n  };\n}\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/network/src/registerXHR.js\":\n/*!********************************************************!*\\\n  !*** ./packages/@logrocket/network/src/registerXHR.js ***!\n  \\********************************************************/\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_76053__) {\n\n\"use strict\";\n\n\nvar _interopRequireDefault = __nested_webpack_require_76053__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.setActive = setActive;\nexports[\"default\"] = registerXHR;\nvar _mapValues = _interopRequireDefault(__nested_webpack_require_76053__(/*! @logrocket/utils/src/mapValues */ \"./packages/@logrocket/utils/src/mapValues.js\"));\nvar _enhanceFunc = _interopRequireDefault(__nested_webpack_require_76053__(/*! @logrocket/utils/src/enhanceFunc */ \"./packages/@logrocket/utils/src/enhanceFunc.js\"));\nvar _startsWith = _interopRequireDefault(__nested_webpack_require_76053__(/*! @logrocket/utils/src/startsWith */ \"./packages/@logrocket/utils/src/startsWith.js\"));\nvar _nps = __nested_webpack_require_76053__(/*! @logrocket/utils/src/constants/nps */ \"./packages/@logrocket/utils/src/constants/nps.js\");\n// eslint-disable-line no-restricted-imports\n// eslint-disable-line no-restricted-imports\n// eslint-disable-line no-restricted-imports\n\nvar isActive = true;\nfunction setActive(shouldBeActive) {\n  isActive = shouldBeActive;\n}\nvar currentXHRId = 0;\nfunction registerXHR(_ref) {\n  var addRequest = _ref.addRequest,\n    addResponse = _ref.addResponse,\n    isIgnored = _ref.isIgnored,\n    logger = _ref.logger,\n    _ref$shouldAugmentNPS = _ref.shouldAugmentNPS,\n    shouldAugmentNPS = _ref$shouldAugmentNPS === void 0 ? true : _ref$shouldAugmentNPS,\n    _ref$shouldParseXHRBl = _ref.shouldParseXHRBlob,\n    shouldParseXHRBlob = _ref$shouldParseXHRBl === void 0 ? false : _ref$shouldParseXHRBl;\n  var _XHR = XMLHttpRequest;\n  var xhrMap = new WeakMap();\n  var unsubscribedFromXhr = false;\n  var LOGROCKET_XHR_LABEL = 'xhr-';\n  window._lrXMLHttpRequest = XMLHttpRequest;\n\n  // eslint-disable-next-line no-native-reassign\n  XMLHttpRequest = function XMLHttpRequest(mozAnon, mozSystem) {\n    var xhrObject = new _XHR(mozAnon, mozSystem);\n    if (!isActive) {\n      return xhrObject;\n    }\n    xhrMap.set(xhrObject, {\n      xhrId: ++currentXHRId,\n      headers: {}\n    });\n    var openOriginal = xhrObject.open;\n    function openShim() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      try {\n        var url = args[1];\n        if (window.URL && typeof window.URL === 'function' && url.search(_nps.WOOTRIC_RESPONSES_REGEX) === 0) {\n          var logrocketSessionURL = new window.URL(logger.recordingURL);\n          logrocketSessionURL.searchParams.set('nps', 'wootric');\n          var urlObj = new window.URL(url);\n          var responseText = urlObj.searchParams.get('response[text]');\n          var feedback = responseText ? \"\".concat(responseText, \"\\n\\n\") : '';\n          urlObj.searchParams.set('response[text]', \"\".concat(feedback, \"<\").concat(logrocketSessionURL.href, \"|View LogRocket session>\"));\n          args[1] = urlObj.href; // eslint-disable-line no-param-reassign\n        }\n      } catch (e) {/* do nothing */}\n      return openOriginal.apply(this, args);\n    }\n    var sendOriginal = xhrObject.send;\n    function sendShim() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      try {\n        var currentXHR = xhrMap.get(xhrObject);\n        if (window.URL && typeof window.URL === 'function' && currentXHR && currentXHR.url && currentXHR.url.search(_nps.DELIGHTED_RESPONSES_REGEX) === 0 && args.length && args[0].indexOf(_nps.DELIGHTED_FEEDBACK_PREFIX) !== -1) {\n          var recordingURL = new window.URL(logger.recordingURL);\n          recordingURL.searchParams.set('nps', 'delighted');\n          var logrocketSessionURL = encodeURIComponent(recordingURL.href);\n          var data = args[0].split('&').map(function (dataString) {\n            if ((0, _startsWith.default)(dataString, _nps.DELIGHTED_FEEDBACK_PREFIX)) {\n              var isEmpty = dataString === _nps.DELIGHTED_FEEDBACK_PREFIX;\n              return \"\".concat(dataString).concat(isEmpty ? '' : '\\n\\n', \"<\").concat(logrocketSessionURL, \"|View LogRocket session>\");\n            }\n            return dataString;\n          }).join('&');\n          args[0] = data; // eslint-disable-line no-param-reassign\n        }\n      } catch (e) {/* do nothing */}\n      return sendOriginal.apply(this, args);\n    }\n    if (shouldAugmentNPS) {\n      xhrObject.open = openShim;\n      xhrObject.send = sendShim;\n    }\n\n    // ..., 'open', (method, url, async, username, password) => {\n    (0, _enhanceFunc.default)(xhrObject, 'open', function (method, url) {\n      if (unsubscribedFromXhr) {\n        return;\n      }\n      var currentXHR = xhrMap.get(xhrObject);\n      currentXHR.method = method;\n      currentXHR.url = url;\n    });\n    (0, _enhanceFunc.default)(xhrObject, 'send', function (data) {\n      if (unsubscribedFromXhr) {\n        return;\n      }\n      var currentXHR = xhrMap.get(xhrObject);\n      if (!currentXHR) {\n        return;\n      }\n      var request = {\n        url: currentXHR.url,\n        method: currentXHR.method && currentXHR.method.toUpperCase(),\n        headers: (0, _mapValues.default)(currentXHR.headers || {}, function (headerValues) {\n          return headerValues.join(', ');\n        }),\n        body: data\n      };\n      addRequest(\"\".concat(LOGROCKET_XHR_LABEL).concat(currentXHR.xhrId), request);\n    });\n    (0, _enhanceFunc.default)(xhrObject, 'setRequestHeader', function (header, value) {\n      if (unsubscribedFromXhr) {\n        return;\n      }\n      var currentXHR = xhrMap.get(xhrObject);\n      if (!currentXHR) {\n        return;\n      }\n      currentXHR.headers = currentXHR.headers || {};\n      currentXHR.headers[header] = currentXHR.headers[header] || [];\n      currentXHR.headers[header].push(value);\n    });\n    var xhrListeners = {\n      readystatechange: function readystatechange() {\n        if (unsubscribedFromXhr) {\n          return;\n        }\n        if (xhrObject.readyState === 4) {\n          var currentXHR = xhrMap.get(xhrObject);\n          if (!currentXHR) {\n            return;\n          }\n\n          // Do not read ignored requests at all.\n          if (isIgnored(\"\".concat(LOGROCKET_XHR_LABEL).concat(currentXHR.xhrId))) {\n            return;\n          }\n          var headerString = xhrObject.getAllResponseHeaders() || '';\n          var headers = headerString.split(/[\\r\\n]+/).reduce(function (previous, current) {\n            var next = previous;\n            var headerParts = current.split(': ');\n            if (headerParts.length > 0) {\n              var key = headerParts.shift(); // first index of the array\n              var value = headerParts.join(': '); // rest of the array repaired\n              if (previous[key]) {\n                next[key] += \", \".concat(value);\n              } else {\n                next[key] = value;\n              }\n            }\n            return next;\n          }, {});\n          var body;\n\n          // IE 11 sometimes throws when trying to access large responses\n          try {\n            switch (xhrObject.responseType) {\n              case 'json':\n                body = logger._shouldCloneResponse ? JSON.parse(JSON.stringify(xhrObject.response)) : xhrObject.response;\n                break;\n              case 'arraybuffer':\n              case 'blob':\n                {\n                  body = xhrObject.response;\n                  break;\n                }\n              case 'document':\n                {\n                  body = xhrObject.responseXML;\n                  break;\n                }\n              case 'text':\n              case '':\n                {\n                  body = xhrObject.responseText;\n                  break;\n                }\n              default:\n                {\n                  body = '';\n                }\n            }\n          } catch (err) {\n            body = 'LogRocket: Error accessing response.';\n          }\n          var response = {\n            url: currentXHR.url,\n            status: xhrObject.status,\n            headers: headers,\n            body: body,\n            method: (currentXHR.method || '').toUpperCase()\n          };\n          if (shouldParseXHRBlob && response.body instanceof Blob) {\n            var blobReader = new FileReader();\n            blobReader.readAsText(response.body);\n            blobReader.onload = function () {\n              try {\n                response.body = JSON.parse(blobReader.result);\n              } catch (_unused) {} // eslint-disable-line no-empty\n              addResponse(\"\".concat(LOGROCKET_XHR_LABEL).concat(currentXHR.xhrId), response);\n            };\n          } else {\n            addResponse(\"\".concat(LOGROCKET_XHR_LABEL).concat(currentXHR.xhrId), response);\n          }\n        }\n      }\n      // // Unused Event Listeners\n      // loadstart: () => {},\n      // progress: () => {},\n      // abort: () => {},\n      // error: () => {},\n      // load: () => {},\n      // timeout: () => {},\n      // loadend: () => {},\n    };\n\n    Object.keys(xhrListeners).forEach(function (key) {\n      xhrObject.addEventListener(key, xhrListeners[key]);\n    });\n    return xhrObject;\n  };\n\n  // this allows \"instanceof XMLHttpRequest\" to work\n  XMLHttpRequest.prototype = _XHR.prototype;\n\n  // Persist the static variables.\n  ['UNSENT', 'OPENED', 'HEADERS_RECEIVED', 'LOADING', 'DONE'].forEach(function (variable) {\n    XMLHttpRequest[variable] = _XHR[variable];\n  });\n  return function () {\n    unsubscribedFromXhr = true;\n    // eslint-disable-next-line no-native-reassign\n    XMLHttpRequest = _XHR;\n  };\n}\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/now/src/index.js\":\n/*!**********************************************!*\\\n  !*** ./packages/@logrocket/now/src/index.js ***!\n  \\**********************************************/\n/***/ (function(__unused_webpack_module, exports) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\n/* eslint-disable compat/compat */\nvar dateNow = Date.now.bind(Date);\nvar loadTime = dateNow();\nvar _default = typeof performance !== 'undefined' && performance.now ? performance.now.bind(performance) : function () {\n  return dateNow() - loadTime;\n};\nexports[\"default\"] = _default;\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/redux/src/createEnhancer.js\":\n/*!*********************************************************!*\\\n  !*** ./packages/@logrocket/redux/src/createEnhancer.js ***!\n  \\*********************************************************/\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_86608__) {\n\n\"use strict\";\n\n\nvar _interopRequireDefault = __nested_webpack_require_86608__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = createEnhancer;\nvar _defineProperty2 = _interopRequireDefault(__nested_webpack_require_86608__(/*! @babel/runtime/helpers/defineProperty */ \"./node_modules/@babel/runtime/helpers/defineProperty.js\"));\nvar _now = _interopRequireDefault(__nested_webpack_require_86608__(/*! @logrocket/now */ \"./packages/@logrocket/now/src/index.js\"));\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nvar storeIdCounter = 0;\nfunction createEnhancer(logger) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    _ref$stateSanitizer = _ref.stateSanitizer,\n    stateSanitizer = _ref$stateSanitizer === void 0 ? function (f) {\n      return f;\n    } : _ref$stateSanitizer,\n    _ref$actionSanitizer = _ref.actionSanitizer,\n    actionSanitizer = _ref$actionSanitizer === void 0 ? function (f) {\n      return f;\n    } : _ref$actionSanitizer;\n  // an enhancer is a function that returns a Store\n  return function (createStore) {\n    return function (reducer, initialState, enhancer) {\n      var store = createStore(reducer, initialState, enhancer);\n      var originalDispatch = store.dispatch;\n      var storeId = storeIdCounter++;\n      logger.addEvent('lr.redux.InitialState', function () {\n        var sanitizedState;\n        try {\n          // only try catch user defined functions\n          sanitizedState = stateSanitizer(store.getState());\n        } catch (err) {\n          console.error(err.toString());\n        }\n        return {\n          state: sanitizedState,\n          storeId: storeId\n        };\n      });\n      var dispatch = function dispatch(action) {\n        var start = (0, _now.default)();\n        var err;\n        var res;\n        try {\n          res = originalDispatch(action);\n        } catch (_err) {\n          err = _err;\n        } finally {\n          var duration = (0, _now.default)() - start;\n          logger.addEvent('lr.redux.ReduxAction', function () {\n            var sanitizedState = null;\n            var sanitizedAction = null;\n            try {\n              // only try catch user defined functions\n              sanitizedState = stateSanitizer(store.getState());\n              sanitizedAction = actionSanitizer(action);\n            } catch (err) {\n              console.error(err.toString());\n            }\n            if (sanitizedState && sanitizedAction) {\n              return {\n                storeId: storeId,\n                action: sanitizedAction,\n                duration: duration,\n                stateDelta: sanitizedState\n              };\n            }\n            return null;\n          });\n        }\n        if (err) {\n          throw err;\n        }\n        return res;\n      };\n      return _objectSpread(_objectSpread({}, store), {}, {\n        dispatch: dispatch\n      });\n    };\n  };\n}\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/redux/src/createMiddleware.js\":\n/*!***********************************************************!*\\\n  !*** ./packages/@logrocket/redux/src/createMiddleware.js ***!\n  \\***********************************************************/\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_90764__) {\n\n\"use strict\";\n\n\nvar _interopRequireDefault = __nested_webpack_require_90764__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = createMiddleware;\nvar _now = _interopRequireDefault(__nested_webpack_require_90764__(/*! @logrocket/now */ \"./packages/@logrocket/now/src/index.js\"));\nvar storeIdCounter = 0;\nfunction createMiddleware(logger) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    _ref$stateSanitizer = _ref.stateSanitizer,\n    stateSanitizer = _ref$stateSanitizer === void 0 ? function (f) {\n      return f;\n    } : _ref$stateSanitizer,\n    _ref$actionSanitizer = _ref.actionSanitizer,\n    actionSanitizer = _ref$actionSanitizer === void 0 ? function (f) {\n      return f;\n    } : _ref$actionSanitizer;\n  return function (store) {\n    var storeId = storeIdCounter++;\n    logger.addEvent('lr.redux.InitialState', function () {\n      var sanitizedState;\n      try {\n        // only try catch user defined functions\n        sanitizedState = stateSanitizer(store.getState());\n      } catch (err) {\n        console.error(err.toString());\n      }\n      return {\n        state: sanitizedState,\n        storeId: storeId\n      };\n    });\n    return function (next) {\n      return function (action) {\n        var start = (0, _now.default)();\n        var err;\n        var res;\n        try {\n          res = next(action);\n        } catch (_err) {\n          err = _err;\n        } finally {\n          var duration = (0, _now.default)() - start;\n          logger.addEvent('lr.redux.ReduxAction', function () {\n            var sanitizedState = null;\n            var sanitizedAction = null;\n            try {\n              // only try catch user defined functions\n              sanitizedState = stateSanitizer(store.getState());\n              sanitizedAction = actionSanitizer(action);\n            } catch (err) {\n              console.error(err.toString());\n            }\n            if (sanitizedState && sanitizedAction) {\n              return {\n                storeId: storeId,\n                action: sanitizedAction,\n                duration: duration,\n                stateDelta: sanitizedState\n              };\n            }\n            return null;\n          });\n        }\n        if (err) {\n          throw err;\n        }\n        return res;\n      };\n    };\n  };\n}\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/redux/src/index.js\":\n/*!************************************************!*\\\n  !*** ./packages/@logrocket/redux/src/index.js ***!\n  \\************************************************/\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_93499__) {\n\n\"use strict\";\n\n\nvar _interopRequireDefault = __nested_webpack_require_93499__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nObject.defineProperty(exports, \"createEnhancer\", ({\n  enumerable: true,\n  get: function get() {\n    return _createEnhancer.default;\n  }\n}));\nObject.defineProperty(exports, \"createMiddleware\", ({\n  enumerable: true,\n  get: function get() {\n    return _createMiddleware.default;\n  }\n}));\nvar _createEnhancer = _interopRequireDefault(__nested_webpack_require_93499__(/*! ./createEnhancer */ \"./packages/@logrocket/redux/src/createEnhancer.js\"));\nvar _createMiddleware = _interopRequireDefault(__nested_webpack_require_93499__(/*! ./createMiddleware */ \"./packages/@logrocket/redux/src/createMiddleware.js\"));\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/TraceKit.js\":\n/*!***************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/TraceKit.js ***!\n  \\***************************************************/\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_94639__) {\n\n\"use strict\";\n/* eslint-disable */\n\n\n\n/*\n TraceKit - Cross browser stack traces - github.com/occ/TraceKit\n\n This was originally forked from github.com/occ/TraceKit, but has since been\n largely re-written and is now maintained as part of raven-js.  Tests for\n this are in test/vendor.\n\n MIT license\n*/\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar TraceKit = {\n  collectWindowErrors: true,\n  debug: false\n};\n\n// This is to be defensive in environments where window does not exist (see https://github.com/getsentry/raven-js/pull/785)\nvar _window = typeof window !== 'undefined' ? window : typeof __nested_webpack_require_94639__.g !== 'undefined' ? __nested_webpack_require_94639__.g : typeof self !== 'undefined' ? self : {};\n\n// global reference to slice\nvar _slice = [].slice;\nvar UNKNOWN_FUNCTION = '?';\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Error_types\nvar ERROR_TYPES_RE = /^(?:Uncaught (?:exception: )?)?((?:Eval|Internal|Range|Reference|Syntax|Type|URI)Error): ?(.*)$/;\nfunction getLocationHref() {\n  if (typeof document === 'undefined' || typeof document.location === 'undefined') return '';\n  return document.location.href;\n}\n\n/**\n * TraceKit.report: cross-browser processing of unhandled exceptions\n *\n * Syntax:\n *   TraceKit.report.subscribe(function(stackInfo) { ... })\n *   TraceKit.report.unsubscribe(function(stackInfo) { ... })\n *   TraceKit.report(exception)\n *   try { ...code... } catch(ex) { TraceKit.report(ex); }\n *\n * Supports:\n *   - Firefox: full stack trace with line numbers, plus column number\n *              on top frame; column number is not guaranteed\n *   - Opera:   full stack trace with line and column numbers\n *   - Chrome:  full stack trace with line and column numbers\n *   - Safari:  line and column number for the top frame only; some frames\n *              may be missing, and column number is not guaranteed\n *   - IE:      line and column number for the top frame only; some frames\n *              may be missing, and column number is not guaranteed\n *\n * In theory, TraceKit should work on all of the following versions:\n *   - IE5.5+ (only 8.0 tested)\n *   - Firefox 0.9+ (only 3.5+ tested)\n *   - Opera 7+ (only 10.50 tested; versions 9 and earlier may require\n *     Exceptions Have Stacktrace to be enabled in opera:config)\n *   - Safari 3+ (only 4+ tested)\n *   - Chrome 1+ (only 5+ tested)\n *   - Konqueror 3.5+ (untested)\n *\n * Requires TraceKit.computeStackTrace.\n *\n * Tries to catch all unhandled exceptions and report them to the\n * subscribed handlers. Please note that TraceKit.report will rethrow the\n * exception. This is REQUIRED in order to get a useful stack trace in IE.\n * If the exception does not reach the top of the browser, you will only\n * get a stack trace from the point where TraceKit.report was called.\n *\n * Handlers receive a stackInfo object as described in the\n * TraceKit.computeStackTrace docs.\n */\nTraceKit.report = function reportModuleWrapper() {\n  var handlers = [],\n    lastArgs = null,\n    lastException = null,\n    lastExceptionStack = null;\n\n  /**\n   * Add a crash handler.\n   * @param {Function} handler\n   */\n  function subscribe(handler) {\n    installGlobalHandler();\n    handlers.push(handler);\n  }\n\n  /**\n   * Remove a crash handler.\n   * @param {Function} handler\n   */\n  function unsubscribe(handler) {\n    for (var i = handlers.length - 1; i >= 0; --i) {\n      if (handlers[i] === handler) {\n        handlers.splice(i, 1);\n      }\n    }\n  }\n\n  /**\n   * Remove all crash handlers.\n   */\n  function unsubscribeAll() {\n    uninstallGlobalHandler();\n    handlers = [];\n  }\n\n  /**\n   * Dispatch stack information to all handlers.\n   * @param {Object.<string, *>} stack\n   */\n  function notifyHandlers(stack, isWindowError) {\n    var exception = null;\n    if (isWindowError && !TraceKit.collectWindowErrors) {\n      return;\n    }\n    for (var i in handlers) {\n      if (handlers.hasOwnProperty(i)) {\n        try {\n          handlers[i].apply(null, [stack].concat(_slice.call(arguments, 2)));\n        } catch (inner) {\n          exception = inner;\n        }\n      }\n    }\n    if (exception) {\n      throw exception;\n    }\n  }\n  var _oldOnerrorHandler, _onErrorHandlerInstalled;\n\n  /**\n   * Ensures all global unhandled exceptions are recorded.\n   * Supported by Gecko and IE.\n   * @param {string} message Error message.\n   * @param {string} url URL of script that generated the exception.\n   * @param {(number|string)} lineNo The line number at which the error\n   * occurred.\n   * @param {?(number|string)} colNo The column number at which the error\n   * occurred.\n   * @param {?Error} ex The actual Error object.\n   */\n  function traceKitWindowOnError(message, url, lineNo, colNo, ex) {\n    var stack = null;\n    if (lastExceptionStack) {\n      TraceKit.computeStackTrace.augmentStackTraceWithInitialElement(lastExceptionStack, url, lineNo, message);\n      processLastException();\n    } else if (ex) {\n      // New chrome and blink send along a real error object\n      // Let's just report that like a normal error.\n      // See: https://mikewest.org/2013/08/debugging-runtime-errors-with-window-onerror\n      stack = TraceKit.computeStackTrace(ex);\n      notifyHandlers(stack, true);\n    } else {\n      var location = {\n        'url': url,\n        'line': lineNo,\n        'column': colNo\n      };\n      var name = undefined;\n      var msg = message; // must be new var or will modify original `arguments`\n      var groups;\n      if ({}.toString.call(message) === '[object String]') {\n        var groups = message.match(ERROR_TYPES_RE);\n        if (groups) {\n          name = groups[1];\n          msg = groups[2];\n        }\n      }\n      location.func = UNKNOWN_FUNCTION;\n      stack = {\n        'name': name,\n        'message': msg,\n        'url': getLocationHref(),\n        'stack': [location]\n      };\n      notifyHandlers(stack, true);\n    }\n    if (_oldOnerrorHandler) {\n      return _oldOnerrorHandler.apply(this, arguments);\n    }\n    return false;\n  }\n  function installGlobalHandler() {\n    if (_onErrorHandlerInstalled) {\n      return;\n    }\n    _oldOnerrorHandler = _window.onerror;\n    _window.onerror = traceKitWindowOnError;\n    _onErrorHandlerInstalled = true;\n  }\n  function uninstallGlobalHandler() {\n    if (!_onErrorHandlerInstalled) {\n      return;\n    }\n    _window.onerror = _oldOnerrorHandler;\n    _onErrorHandlerInstalled = false;\n    _oldOnerrorHandler = undefined;\n  }\n  function processLastException() {\n    var _lastExceptionStack = lastExceptionStack,\n      _lastArgs = lastArgs;\n    lastArgs = null;\n    lastExceptionStack = null;\n    lastException = null;\n    notifyHandlers.apply(null, [_lastExceptionStack, false].concat(_lastArgs));\n  }\n\n  /**\n   * Reports an unhandled Error to TraceKit.\n   * @param {Error} ex\n   * @param {?boolean} rethrow If false, do not re-throw the exception.\n   * Only used for window.onerror to not cause an infinite loop of\n   * rethrowing.\n   */\n  function report(ex, rethrow) {\n    var args = _slice.call(arguments, 1);\n    if (lastExceptionStack) {\n      if (lastException === ex) {\n        return; // already caught by an inner catch block, ignore\n      } else {\n        processLastException();\n      }\n    }\n    var stack = TraceKit.computeStackTrace(ex);\n    lastExceptionStack = stack;\n    lastException = ex;\n    lastArgs = args;\n\n    // If the stack trace is incomplete, wait for 2 seconds for\n    // slow slow IE to see if onerror occurs or not before reporting\n    // this exception; otherwise, we will end up with an incomplete\n    // stack trace\n    setTimeout(function () {\n      if (lastException === ex) {\n        processLastException();\n      }\n    }, stack.incomplete ? 2000 : 0);\n    if (rethrow !== false) {\n      throw ex; // re-throw to propagate to the top level (and cause window.onerror)\n    }\n  }\n\n  report.subscribe = subscribe;\n  report.unsubscribe = unsubscribe;\n  report.uninstall = unsubscribeAll;\n  return report;\n}();\n\n/**\n * TraceKit.computeStackTrace: cross-browser stack traces in JavaScript\n *\n * Syntax:\n *   s = TraceKit.computeStackTrace(exception) // consider using TraceKit.report instead (see below)\n * Returns:\n *   s.name              - exception name\n *   s.message           - exception message\n *   s.stack[i].url      - JavaScript or HTML file URL\n *   s.stack[i].func     - function name, or empty for anonymous functions (if guessing did not work)\n *   s.stack[i].args     - arguments passed to the function, if known\n *   s.stack[i].line     - line number, if known\n *   s.stack[i].column   - column number, if known\n *\n * Supports:\n *   - Firefox:  full stack trace with line numbers and unreliable column\n *               number on top frame\n *   - Opera 10: full stack trace with line and column numbers\n *   - Opera 9-: full stack trace with line numbers\n *   - Chrome:   full stack trace with line and column numbers\n *   - Safari:   line and column number for the topmost stacktrace element\n *               only\n *   - IE:       no line numbers whatsoever\n *\n * Tries to guess names of anonymous functions by looking for assignments\n * in the source code. In IE and Safari, we have to guess source file names\n * by searching for function bodies inside all page scripts. This will not\n * work for scripts that are loaded cross-domain.\n * Here be dragons: some function names may be guessed incorrectly, and\n * duplicate functions may be mismatched.\n *\n * TraceKit.computeStackTrace should only be used for tracing purposes.\n * Logging of unhandled exceptions should be done with TraceKit.report,\n * which builds on top of TraceKit.computeStackTrace and provides better\n * IE support by utilizing the window.onerror event to retrieve information\n * about the top of the stack.\n *\n * Note: In IE and Safari, no stack trace is recorded on the Error object,\n * so computeStackTrace instead walks its *own* chain of callers.\n * This means that:\n *  * in Safari, some methods may be missing from the stack trace;\n *  * in IE, the topmost function in the stack trace will always be the\n *    caller of computeStackTrace.\n *\n * This is okay for tracing (because you are likely to be calling\n * computeStackTrace from the function you want to be the topmost element\n * of the stack trace anyway), but not okay for logging unhandled\n * exceptions (because your catch block will likely be far away from the\n * inner function that actually caused the exception).\n *\n */\nTraceKit.computeStackTrace = function computeStackTraceWrapper() {\n  /**\n   * Escapes special characters, except for whitespace, in a string to be\n   * used inside a regular expression as a string literal.\n   * @param {string} text The string.\n   * @return {string} The escaped string literal.\n   */\n  function escapeRegExp(text) {\n    return text.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#]/g, '\\\\$&');\n  }\n\n  /**\n   * Escapes special characters in a string to be used inside a regular\n   * expression as a string literal. Also ensures that HTML entities will\n   * be matched the same as their literal friends.\n   * @param {string} body The string.\n   * @return {string} The escaped string.\n   */\n  function escapeCodeAsRegExpForMatchingInsideHTML(body) {\n    return escapeRegExp(body).replace('<', '(?:<|&lt;)').replace('>', '(?:>|&gt;)').replace('&', '(?:&|&amp;)').replace('\"', '(?:\"|&quot;)').replace(/\\s+/g, '\\\\s+');\n  }\n\n  // Contents of Exception in various browsers.\n  //\n  // SAFARI:\n  // ex.message = Can't find variable: qq\n  // ex.line = 59\n  // ex.sourceId = 580238192\n  // ex.sourceURL = http://...\n  // ex.expressionBeginOffset = 96\n  // ex.expressionCaretOffset = 98\n  // ex.expressionEndOffset = 98\n  // ex.name = ReferenceError\n  //\n  // FIREFOX:\n  // ex.message = qq is not defined\n  // ex.fileName = http://...\n  // ex.lineNumber = 59\n  // ex.columnNumber = 69\n  // ex.stack = ...stack trace... (see the example below)\n  // ex.name = ReferenceError\n  //\n  // CHROME:\n  // ex.message = qq is not defined\n  // ex.name = ReferenceError\n  // ex.type = not_defined\n  // ex.arguments = ['aa']\n  // ex.stack = ...stack trace...\n  //\n  // INTERNET EXPLORER:\n  // ex.message = ...\n  // ex.name = ReferenceError\n  //\n  // OPERA:\n  // ex.message = ...message... (see the example below)\n  // ex.name = ReferenceError\n  // ex.opera#sourceloc = 11  (pretty much useless, duplicates the info in ex.message)\n  // ex.stacktrace = n/a; see 'opera:config#UserPrefs|Exceptions Have Stacktrace'\n\n  /**\n   * Computes stack trace information from the stack property.\n   * Chrome and Gecko use this property.\n   * @param {Error} ex\n   * @return {?Object.<string, *>} Stack trace information.\n   */\n  function computeStackTraceFromStackProp(ex) {\n    if (typeof ex.stack === 'undefined' || !ex.stack) return;\n    var chrome = /^\\s*at (.*?) ?\\(((?:file|https?|blob|chrome-extension|native|eval|<anonymous>).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i,\n      gecko = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)((?:file|https?|blob|chrome|resource|\\[native).*?)(?::(\\d+))?(?::(\\d+))?\\s*$/i,\n      winjs = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:file|ms-appx|https?|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i,\n      lines = ex.stack.split('\\n'),\n      stack = [],\n      parts,\n      element,\n      reference = /^(.*) is undefined$/.exec(ex.message);\n    for (var i = 0, j = lines.length; i < j; ++i) {\n      if (parts = chrome.exec(lines[i])) {\n        var isNative = parts[2] && parts[2].indexOf('native') !== -1;\n        element = {\n          'url': !isNative ? parts[2] : null,\n          'func': parts[1] || UNKNOWN_FUNCTION,\n          'args': isNative ? [parts[2]] : [],\n          'line': parts[3] ? +parts[3] : null,\n          'column': parts[4] ? +parts[4] : null\n        };\n      } else if (parts = winjs.exec(lines[i])) {\n        element = {\n          'url': parts[2],\n          'func': parts[1] || UNKNOWN_FUNCTION,\n          'args': [],\n          'line': +parts[3],\n          'column': parts[4] ? +parts[4] : null\n        };\n      } else if (parts = gecko.exec(lines[i])) {\n        element = {\n          'url': parts[3],\n          'func': parts[1] || UNKNOWN_FUNCTION,\n          'args': parts[2] ? parts[2].split(',') : [],\n          'line': parts[4] ? +parts[4] : null,\n          'column': parts[5] ? +parts[5] : null\n        };\n      } else {\n        continue;\n      }\n      if (!element.func && element.line) {\n        element.func = UNKNOWN_FUNCTION;\n      }\n      stack.push(element);\n    }\n    if (!stack.length) {\n      return null;\n    }\n    if (!stack[0].column && typeof ex.columnNumber !== 'undefined') {\n      // FireFox uses this awesome columnNumber property for its top frame\n      // Also note, Firefox's column number is 0-based and everything else expects 1-based,\n      // so adding 1\n      stack[0].column = ex.columnNumber + 1;\n    }\n    return {\n      'name': ex.name,\n      'message': ex.message,\n      'url': getLocationHref(),\n      'stack': stack\n    };\n  }\n\n  /**\n   * Adds information about the first frame to incomplete stack traces.\n   * Safari and IE require this to get complete data on the first frame.\n   * @param {Object.<string, *>} stackInfo Stack trace information from\n   * one of the compute* methods.\n   * @param {string} url The URL of the script that caused an error.\n   * @param {(number|string)} lineNo The line number of the script that\n   * caused an error.\n   * @param {string=} message The error generated by the browser, which\n   * hopefully contains the name of the object that caused the error.\n   * @return {boolean} Whether or not the stack information was\n   * augmented.\n   */\n  function augmentStackTraceWithInitialElement(stackInfo, url, lineNo, message) {\n    var initial = {\n      'url': url,\n      'line': lineNo\n    };\n    if (initial.url && initial.line) {\n      stackInfo.incomplete = false;\n      if (!initial.func) {\n        initial.func = UNKNOWN_FUNCTION;\n      }\n      if (stackInfo.stack.length > 0) {\n        if (stackInfo.stack[0].url === initial.url) {\n          if (stackInfo.stack[0].line === initial.line) {\n            return false; // already in stack trace\n          } else if (!stackInfo.stack[0].line && stackInfo.stack[0].func === initial.func) {\n            stackInfo.stack[0].line = initial.line;\n            return false;\n          }\n        }\n      }\n      stackInfo.stack.unshift(initial);\n      stackInfo.partial = true;\n      return true;\n    } else {\n      stackInfo.incomplete = true;\n    }\n    return false;\n  }\n\n  /**\n   * Computes stack trace information by walking the arguments.caller\n   * chain at the time the exception occurred. This will cause earlier\n   * frames to be missed but is the only way to get any stack trace in\n   * Safari and IE. The top frame is restored by\n   * {@link augmentStackTraceWithInitialElement}.\n   * @param {Error} ex\n   * @return {?Object.<string, *>} Stack trace information.\n   */\n  function computeStackTraceByWalkingCallerChain(ex, depth) {\n    var functionName = /function\\s+([_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*)?\\s*\\(/i,\n      stack = [],\n      funcs = {},\n      recursion = false,\n      parts,\n      item,\n      source;\n    for (var curr = computeStackTraceByWalkingCallerChain.caller; curr && !recursion; curr = curr.caller) {\n      if (curr === computeStackTrace || curr === TraceKit.report) {\n        // console.log('skipping internal function');\n        continue;\n      }\n      item = {\n        'url': null,\n        'func': UNKNOWN_FUNCTION,\n        'line': null,\n        'column': null\n      };\n      if (curr.name) {\n        item.func = curr.name;\n      } else if (parts = functionName.exec(curr.toString())) {\n        item.func = parts[1];\n      }\n      if (typeof item.func === 'undefined') {\n        try {\n          item.func = parts.input.substring(0, parts.input.indexOf('{'));\n        } catch (e) {}\n      }\n      if (funcs['' + curr]) {\n        recursion = true;\n      } else {\n        funcs['' + curr] = true;\n      }\n      stack.push(item);\n    }\n    if (depth) {\n      // console.log('depth is ' + depth);\n      // console.log('stack is ' + stack.length);\n      stack.splice(0, depth);\n    }\n    var result = {\n      'name': ex.name,\n      'message': ex.message,\n      'url': getLocationHref(),\n      'stack': stack\n    };\n    augmentStackTraceWithInitialElement(result, ex.sourceURL || ex.fileName, ex.line || ex.lineNumber, ex.message || ex.description);\n    return result;\n  }\n\n  /**\n   * Computes a stack trace for an exception.\n   * @param {Error} ex\n   * @param {(string|number)=} depth\n   */\n  function computeStackTrace(ex, depth) {\n    var stack = null;\n    depth = depth == null ? 0 : +depth;\n    try {\n      stack = computeStackTraceFromStackProp(ex);\n      if (stack) {\n        return stack;\n      }\n    } catch (e) {\n      if (TraceKit.debug) {\n        throw e;\n      }\n    }\n    try {\n      stack = computeStackTraceByWalkingCallerChain(ex, depth + 1);\n      if (stack) {\n        return stack;\n      }\n    } catch (e) {\n      if (TraceKit.debug) {\n        throw e;\n      }\n    }\n    return {\n      'name': ex.name,\n      'message': ex.message,\n      'url': getLocationHref()\n    };\n  }\n  computeStackTrace.augmentStackTraceWithInitialElement = augmentStackTraceWithInitialElement;\n  computeStackTrace.computeStackTraceFromStackProp = computeStackTraceFromStackProp;\n  return computeStackTrace;\n}();\nvar _default = TraceKit;\nexports[\"default\"] = _default;\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/addListener.js\":\n/*!******************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/addListener.js ***!\n  \\******************************************************/\n/***/ (function(__unused_webpack_module, exports) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = addListener;\nfunction addListener(type, handler) {\n  var obj = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : document;\n  obj.addEventListener(type, handler, {\n    capture: true,\n    passive: true\n  });\n  return function () {\n    obj.removeEventListener(type, handler, {\n      capture: true,\n      passive: true\n    });\n  };\n}\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/adjustOsVersion.ts\":\n/*!**********************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/adjustOsVersion.ts ***!\n  \\**********************************************************/\n/***/ (function(__unused_webpack_module, exports) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.adjustOsVersion = adjustOsVersion;\nexports.adjustOs = adjustOs;\nfunction adjustOsVersion(osName, osVersionStr) {\n  var osVersion = osVersionStr;\n  if (osVersionStr && osName.toLowerCase().replace(/\\s/g, '').indexOf('macos') > -1) {\n    osVersion = osVersionStr.replace('10.15.7', '10.15.7+');\n  }\n  return osVersion;\n}\n\n// Used when os name and version are combined in 1 string, i.e. \"Mac OS X 10.15.7\"\nfunction adjustOs(os) {\n  return adjustOsVersion(os, os);\n}\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/applyUrlSanitizer.js\":\n/*!************************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/applyUrlSanitizer.js ***!\n  \\************************************************************/\n/***/ (function(__unused_webpack_module, exports) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = applyUrlSanitizer;\nfunction applyUrlSanitizer(_ref) {\n  var logger = _ref.logger,\n    _ref$url = _ref.url,\n    url = _ref$url === void 0 ? '' : _ref$url;\n  var _ref2 = logger.getConfig('lr.browser') || {},\n    _ref2$urlSanitizer = _ref2.urlSanitizer,\n    urlSanitizer = _ref2$urlSanitizer === void 0 ? function (originalUrl) {\n      return originalUrl;\n    } : _ref2$urlSanitizer;\n  var sanitizedValue;\n  try {\n    sanitizedValue = urlSanitizer(url);\n  } catch (err) {\n    console.error(err);\n  }\n  if (typeof sanitizedValue === 'string') {\n    return sanitizedValue;\n  }\n\n  // if something went wrong or was set to null, redact completely\n  return '';\n}\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/browserUtils.js\":\n/*!*******************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/browserUtils.js ***!\n  \\*******************************************************/\n/***/ (function(__unused_webpack_module, exports) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.getNodeName = getNodeName;\nexports.getTargetForEvent = getTargetForEvent;\nexports.getNodePath = getNodePath;\nfunction getNodeName(node) {\n  if (node.nodeName === '#document-fragment' && node.mode === 'open') {\n    return '$shadow-root';\n  } else if (node.nodeName) {\n    return node.nodeName.toLowerCase();\n  }\n  return '';\n}\nfunction getTargetForEvent(event) {\n  if (typeof event.composedPath === 'function' && event.composed) {\n    return event.composedPath()[0];\n  } else if (event.path) {\n    return event.path[0];\n  }\n  return event.target;\n}\n\n// maximum size of selector string, after which we no longer walk up the DOM tree to calculate\n// the node path. This cannot be larger than 2048\nvar SELECTOR_MAX_LENGTH = 1000;\nfunction getNodePath(element) {\n  var activeNode = element;\n  var nodePath = [];\n  var nodePathLength = 0;\n  while (activeNode && (activeNode.parentNode || activeNode.host)) {\n    var nodeName = getNodeName(activeNode);\n\n    // end at the body\n    if (nodeName === 'body') {\n      break;\n    }\n    var selector = {\n      nodeName: nodeName\n    };\n    var selectorLength = selector.nodeName.length;\n    if (activeNode.id && activeNode.id.length > 0) {\n      selector.id = activeNode.id;\n      selectorLength += activeNode.id.length;\n    }\n    if (activeNode.classList && activeNode.classList.length > 0) {\n      selector.classList = Array.prototype.slice.call(activeNode.classList, 0);\n      var classNames = Array.prototype.join.call(activeNode.classList, '');\n      // classNames sometimes is null\n      if (classNames) {\n        selectorLength += classNames.length;\n      }\n    }\n    if (nodePathLength + selectorLength > SELECTOR_MAX_LENGTH) {\n      break;\n    }\n\n    // IE11 may not have a children NodeList, and shadowRoots will not have a parentNode\n    if (activeNode.parentNode && activeNode.parentNode.children) {\n      try {\n        var nthChild = 0;\n        var siblingNode = activeNode;\n        do {\n          nthChild += 1;\n          siblingNode = siblingNode.previousElementSibling;\n        } while (siblingNode);\n        selector.nthChild = nthChild;\n      } catch (_) {\n        /* IE appears to provide a null/undefined value for children in some rare cases? */\n      }\n    }\n    nodePathLength += selectorLength;\n    nodePath.push(selector);\n    activeNode = activeNode.parentNode || activeNode.host;\n  }\n  return nodePath;\n}\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/constants/issues.ts\":\n/*!***********************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/constants/issues.ts ***!\n  \\***********************************************************/\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_119801__) {\n\n\"use strict\";\n\n\nvar _interopRequireDefault = __nested_webpack_require_119801__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.ES_ISSUE_TYPE_BASE_FILTER = exports.ES_ISSUE_TYPES = exports.ISSUE_GROUP_TYPE = exports.ISSUE_TYPE = void 0;\nvar _defineProperty2 = _interopRequireDefault(__nested_webpack_require_119801__(/*! @babel/runtime/helpers/defineProperty */ \"./node_modules/@babel/runtime/helpers/defineProperty.js\"));\nvar _ES_ISSUE_TYPE_BASE_F;\nvar ISSUE_TYPE = {\n  EXCEPTION: 'EXCEPTION',\n  NETWORK_ERROR: 'NETWORK_ERROR',\n  RAGE_CLICK: 'RAGE_CLICK',\n  DEAD_CLICK: 'DEAD_CLICK',\n  FRUSTRATING_NETWORK: 'FRUSTRATING_NETWORK',\n  ERROR_STATE: 'ERROR_STATE'\n};\nexports.ISSUE_TYPE = ISSUE_TYPE;\nvar ISSUE_GROUP_TYPE = {\n  ENCODED_FILTER: 'ENCODED_FILTER',\n  SENTRY: 'SENTRY',\n  TROYTOWN: 'TROYTOWN'\n};\nexports.ISSUE_GROUP_TYPE = ISSUE_GROUP_TYPE;\nvar ES_ISSUE_TYPES = [ISSUE_TYPE.RAGE_CLICK, ISSUE_TYPE.DEAD_CLICK, ISSUE_TYPE.FRUSTRATING_NETWORK, ISSUE_TYPE.ERROR_STATE];\nexports.ES_ISSUE_TYPES = ES_ISSUE_TYPES;\nvar ES_ISSUE_TYPE_BASE_FILTER = (_ES_ISSUE_TYPE_BASE_F = {}, (0, _defineProperty2.default)(_ES_ISSUE_TYPE_BASE_F, ISSUE_TYPE.RAGE_CLICK, {\n  rageClicked: {\n    operator: 'TEXT_IS',\n    strings: []\n  }\n}), (0, _defineProperty2.default)(_ES_ISSUE_TYPE_BASE_F, ISSUE_TYPE.DEAD_CLICK, {\n  deadClicked: {\n    operator: 'TEXT_IS',\n    strings: []\n  }\n}), _ES_ISSUE_TYPE_BASE_F);\nexports.ES_ISSUE_TYPE_BASE_FILTER = ES_ISSUE_TYPE_BASE_FILTER;\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/constants/logTypes.js\":\n/*!*************************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/constants/logTypes.js ***!\n  \\*************************************************************/\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_121717__) {\n\n\"use strict\";\n\n\nvar _interopRequireDefault = __nested_webpack_require_121717__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.LOG_FILTER_TYPES = exports.LOG_TYPES = void 0;\nvar _defineProperty2 = _interopRequireDefault(__nested_webpack_require_121717__(/*! @babel/runtime/helpers/defineProperty */ \"./node_modules/@babel/runtime/helpers/defineProperty.js\"));\nvar _LOG_FILTER_TYPES;\nvar LOG_TYPES = {\n  LOG: 'LOG',\n  WARN: 'WARN',\n  ERROR: 'ERROR',\n  DEBUG: 'DEBUG',\n  INFO: 'INFO',\n  REDUX: 'REDUX',\n  LIFECYCLE: 'LIFECYCLE',\n  NAVIGATION: 'NAVIGATION',\n  NETWORK: 'NETWORK',\n  PREV_SESSION: 'PREV_SESSION',\n  NEXT_SESSION: 'NEXT_SESSION',\n  LOAD_MORE: 'LOAD_MORE',\n  EXCEPTION: 'EXCEPTION'\n};\nexports.LOG_TYPES = LOG_TYPES;\nvar LOG_FILTER_TYPES = (_LOG_FILTER_TYPES = {}, (0, _defineProperty2.default)(_LOG_FILTER_TYPES, LOG_TYPES.LOG, {\n  label: 'Logs',\n  filterLabel: 'Log',\n  types: [LOG_TYPES.LOG]\n}), (0, _defineProperty2.default)(_LOG_FILTER_TYPES, LOG_TYPES.WARN, {\n  label: 'Warnings',\n  filterLabel: 'Warning',\n  types: [LOG_TYPES.WARN]\n}), (0, _defineProperty2.default)(_LOG_FILTER_TYPES, LOG_TYPES.ERROR, {\n  label: 'Errors',\n  filterLabel: 'Error',\n  types: [LOG_TYPES.ERROR, LOG_TYPES.EXCEPTION]\n}), (0, _defineProperty2.default)(_LOG_FILTER_TYPES, LOG_TYPES.INFO, {\n  label: 'Info',\n  filterLabel: 'Info',\n  types: [LOG_TYPES.INFO]\n}), (0, _defineProperty2.default)(_LOG_FILTER_TYPES, LOG_TYPES.DEBUG, {\n  label: 'Debug',\n  filterLabel: 'Debug',\n  types: [LOG_TYPES.DEBUG]\n}), (0, _defineProperty2.default)(_LOG_FILTER_TYPES, LOG_TYPES.REDUX, {\n  label: 'Redux',\n  types: [LOG_TYPES.REDUX]\n}), (0, _defineProperty2.default)(_LOG_FILTER_TYPES, LOG_TYPES.NAVIGATION, {\n  label: 'Navigation',\n  types: [LOG_TYPES.NAVIGATION, LOG_TYPES.LIFECYCLE]\n}), _LOG_FILTER_TYPES);\nexports.LOG_FILTER_TYPES = LOG_FILTER_TYPES;\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/constants/metrics.js\":\n/*!************************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/constants/metrics.js ***!\n  \\************************************************************/\n/***/ (function(__unused_webpack_module, exports) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.DEFAULT_INSIGHTS_HEATMAP_FOR_URL_OPERATOR = exports.DEFAULT_HEATMAP_FOR_URL_OPERATOR = exports.nextSortDirection = exports.SORT_DIRECTION = exports.FEEDBACK_SORT_COLUMN = exports.HEATMAP_FOR_URL_OPERATOR = exports.METRIC_RETENTION_TYPE = exports.METRIC_TIMESERIES_TYPE = void 0;\nvar METRIC_TIMESERIES_TYPE = {\n  SESSION_COUNT: 'SESSION_COUNT',\n  PERCENTILE: 'PERCENTILE',\n  CONVERSION_RATE: 'CONVERSION_RATE',\n  SESSION_PERCENTAGE: 'SESSION_PERCENTAGE',\n  ACTIVE_USERS: 'ACTIVE_USERS',\n  EVENT_COUNT: 'EVENT_COUNT'\n};\nexports.METRIC_TIMESERIES_TYPE = METRIC_TIMESERIES_TYPE;\nvar METRIC_RETENTION_TYPE = {\n  USER_PERCENTAGE: 'USER_PERCENTAGE'\n};\nexports.METRIC_RETENTION_TYPE = METRIC_RETENTION_TYPE;\nvar HEATMAP_FOR_URL_OPERATOR = {\n  IS: 'IS',\n  CONTAINS: 'CONTAINS',\n  LIKE: 'LIKE',\n  HREF_LIKE: 'HREF_LIKE'\n};\nexports.HEATMAP_FOR_URL_OPERATOR = HEATMAP_FOR_URL_OPERATOR;\nvar FEEDBACK_SORT_COLUMN = {\n  RATING: 'RATING',\n  SUBMISSION_DATE: 'SUBMISSION_DATE'\n};\nexports.FEEDBACK_SORT_COLUMN = FEEDBACK_SORT_COLUMN;\nvar SORT_DIRECTION = {\n  UNSET: 'UNSET',\n  ASC: 'ASC',\n  DESC: 'DESC'\n};\nexports.SORT_DIRECTION = SORT_DIRECTION;\nvar nextSortDirection = function nextSortDirection(direction) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    _ref$reverse = _ref.reverse,\n    reverse = _ref$reverse === void 0 ? false : _ref$reverse;\n  var UNSET = SORT_DIRECTION.UNSET,\n    ASC = SORT_DIRECTION.ASC,\n    DESC = SORT_DIRECTION.DESC;\n  var directionOptions = [UNSET, DESC, ASC];\n  if (reverse) {\n    directionOptions = [UNSET, ASC, DESC];\n  }\n  var index = directionOptions.indexOf(direction);\n  return directionOptions[(index + 1) % directionOptions.length];\n};\nexports.nextSortDirection = nextSortDirection;\nvar DEFAULT_HEATMAP_FOR_URL_OPERATOR = HEATMAP_FOR_URL_OPERATOR.IS;\nexports.DEFAULT_HEATMAP_FOR_URL_OPERATOR = DEFAULT_HEATMAP_FOR_URL_OPERATOR;\nvar DEFAULT_INSIGHTS_HEATMAP_FOR_URL_OPERATOR = HEATMAP_FOR_URL_OPERATOR.HREF_LIKE;\nexports.DEFAULT_INSIGHTS_HEATMAP_FOR_URL_OPERATOR = DEFAULT_INSIGHTS_HEATMAP_FOR_URL_OPERATOR;\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/constants/mobile.ts\":\n/*!***********************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/constants/mobile.ts ***!\n  \\***********************************************************/\n/***/ (function(__unused_webpack_module, exports) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.MAXIMUM_SUPPORTED_VERSION = exports.MINIMUM_SUPPORTED_VERSION = exports.IOS_VERSION = exports.ANDROID_VERSION = void 0;\nvar ANDROID_VERSION = '1.25.0';\nexports.ANDROID_VERSION = ANDROID_VERSION;\nvar IOS_VERSION = '1.25.0';\n\n// Inclusive\nexports.IOS_VERSION = IOS_VERSION;\nvar MINIMUM_SUPPORTED_VERSION = '1.0.0';\n// Exclusive\nexports.MINIMUM_SUPPORTED_VERSION = MINIMUM_SUPPORTED_VERSION;\nvar MAXIMUM_SUPPORTED_VERSION = '1.26.0';\nexports.MAXIMUM_SUPPORTED_VERSION = MAXIMUM_SUPPORTED_VERSION;\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/constants/nps.js\":\n/*!********************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/constants/nps.js ***!\n  \\********************************************************/\n/***/ (function(__unused_webpack_module, exports) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.DELIGHTED_FEEDBACK_PREFIX = exports.DELIGHTED_RESPONSES_REGEX = exports.WOOTRIC_RESPONSES_REGEX = void 0;\nvar WOOTRIC_RESPONSES_REGEX = /^https:\\/\\/production.wootric.com\\/responses/;\nexports.WOOTRIC_RESPONSES_REGEX = WOOTRIC_RESPONSES_REGEX;\nvar DELIGHTED_RESPONSES_REGEX = /^https:\\/\\/web.delighted.com\\/e\\/[a-zA-Z-]*\\/c/;\nexports.DELIGHTED_RESPONSES_REGEX = DELIGHTED_RESPONSES_REGEX;\nvar DELIGHTED_FEEDBACK_PREFIX = 'comment=';\nexports.DELIGHTED_FEEDBACK_PREFIX = DELIGHTED_FEEDBACK_PREFIX;\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/constants/replayTypes.ts\":\n/*!****************************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/constants/replayTypes.ts ***!\n  \\****************************************************************/\n/***/ (function(__unused_webpack_module, exports) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.REPLAY_TYPE = void 0;\nvar REPLAY_TYPE;\nexports.REPLAY_TYPE = REPLAY_TYPE;\n(function (REPLAY_TYPE) {\n  REPLAY_TYPE[\"SKIA\"] = \"SKIA\";\n  REPLAY_TYPE[\"DOM\"] = \"DOM\";\n  REPLAY_TYPE[\"PDF\"] = \"PDF\";\n})(REPLAY_TYPE || (exports.REPLAY_TYPE = REPLAY_TYPE = {}));\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/constants/sdkTypes.ts\":\n/*!*************************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/constants/sdkTypes.ts ***!\n  \\*************************************************************/\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_128982__) {\n\n\"use strict\";\n\n\nvar _interopRequireDefault = __nested_webpack_require_128982__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.SESSION_TYPE_TO_DISPLAY = exports.SDK_REPLAY_TYPE = exports.SDK_TYPE_TO_DISPLAY = exports.SDK_TYPE = void 0;\nvar _defineProperty2 = _interopRequireDefault(__nested_webpack_require_128982__(/*! @babel/runtime/helpers/defineProperty */ \"./node_modules/@babel/runtime/helpers/defineProperty.js\"));\nvar _replayTypes = __nested_webpack_require_128982__(/*! ./replayTypes */ \"./packages/@logrocket/utils/src/constants/replayTypes.ts\");\nvar _SDK_TYPE_TO_DISPLAY, _SDK_REPLAY_TYPE;\n/*\n  SDK_TYPE should be imported as SESSION_TYPE based on how it is being used.\n  SDK_TYPE enumerates the supported sdkTypes from an ingestion/filtering perspective. sdkType is a\n  session data field in ES.\n  SESSION_TYPE is used to enumerate the supported sessionTypes for stripe plans, where we are\n  selling and managing your quota based on the sessionType of your stripe plan.\n*/\nvar SDK_TYPE;\nexports.SDK_TYPE = SDK_TYPE;\n(function (SDK_TYPE) {\n  SDK_TYPE[\"WEB\"] = \"web\";\n  SDK_TYPE[\"MOBILE\"] = \"mobile\";\n  SDK_TYPE[\"UNKNOWN\"] = \"unknown\";\n})(SDK_TYPE || (exports.SDK_TYPE = SDK_TYPE = {}));\nvar SDK_TYPE_TO_DISPLAY = (_SDK_TYPE_TO_DISPLAY = {}, (0, _defineProperty2.default)(_SDK_TYPE_TO_DISPLAY, SDK_TYPE.WEB, 'Web'), (0, _defineProperty2.default)(_SDK_TYPE_TO_DISPLAY, SDK_TYPE.MOBILE, 'Mobile'), _SDK_TYPE_TO_DISPLAY);\nexports.SDK_TYPE_TO_DISPLAY = SDK_TYPE_TO_DISPLAY;\nvar SDK_REPLAY_TYPE = (_SDK_REPLAY_TYPE = {}, (0, _defineProperty2.default)(_SDK_REPLAY_TYPE, SDK_TYPE.WEB, _replayTypes.REPLAY_TYPE.DOM), (0, _defineProperty2.default)(_SDK_REPLAY_TYPE, SDK_TYPE.MOBILE, _replayTypes.REPLAY_TYPE.SKIA), _SDK_REPLAY_TYPE);\nexports.SDK_REPLAY_TYPE = SDK_REPLAY_TYPE;\nvar SESSION_TYPE_TO_DISPLAY = SDK_TYPE_TO_DISPLAY;\nexports.SESSION_TYPE_TO_DISPLAY = SESSION_TYPE_TO_DISPLAY;\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/constants/statusCodes.ts\":\n/*!****************************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/constants/statusCodes.ts ***!\n  \\****************************************************************/\n/***/ (function(__unused_webpack_module, exports) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.getStatusText = getStatusText;\nexports.STATUS_CODES = void 0;\n// status codes via https://developer.mozilla.org/en-US/docs/Web/HTTP/Status\n\nvar STATUS_CODES = {\n  0: '',\n  100: 'Continue',\n  101: 'Switching Protocol',\n  102: 'Processing',\n  103: 'Early Hints',\n  200: 'OK',\n  201: 'Created',\n  202: 'Accepted',\n  203: 'Non-Authoritative Information',\n  204: 'No Content',\n  205: 'Reset Content',\n  206: 'Partial Content',\n  207: 'Multi-Status',\n  208: 'Already Reported',\n  226: 'IM Used',\n  300: 'Multiple Choices',\n  301: 'Moved Permanently',\n  302: 'Found',\n  303: 'See Other',\n  304: 'Not Modified',\n  305: 'Use Proxy',\n  306: 'unused',\n  307: 'Temporary Redirect',\n  308: 'Permanent Redirect',\n  400: 'Bad Request',\n  401: 'Unauthorized',\n  402: 'Payment Required',\n  403: 'Forbidden',\n  404: 'Not Found',\n  405: 'Method Not Allowed',\n  406: 'Not Acceptable',\n  407: 'Proxy Authentication Required',\n  408: 'Request Timeout',\n  409: 'Conflict',\n  410: 'Gone',\n  411: 'Length Required',\n  412: 'Precondition Failed',\n  413: 'Payload Too Large',\n  414: 'URI Too Long',\n  415: 'Unsupported Media Type',\n  416: 'Range Not Satisfiable',\n  417: 'Expectation Failed',\n  418: 'I\\'m a teapot',\n  421: 'Misdirected Request',\n  422: 'Unprocessable Entity',\n  423: 'Locked',\n  424: 'Failed Dependency',\n  425: 'Too Early',\n  426: 'Upgrade Required',\n  428: 'Precondition Required',\n  429: 'Too Many Requests',\n  431: 'Request Header Fields Too Large',\n  451: 'Unavailable For Legal Reasons',\n  500: 'Internal Server Error',\n  501: 'Not Implemented',\n  502: 'Bad Gateway',\n  503: 'Service Unavailable',\n  504: 'Gateway Timeout',\n  505: 'HTTP Version Not Supported',\n  506: 'Variant Also Negotiates',\n  507: 'Insufficient Storage',\n  508: 'Loop Detected',\n  510: 'Not Extended',\n  511: 'Network Authentication Required'\n};\nexports.STATUS_CODES = STATUS_CODES;\nfunction getStatusText(statusCode) {\n  return STATUS_CODES[String(statusCode)];\n}\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/contains.js\":\n/*!***************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/contains.js ***!\n  \\***************************************************/\n/***/ (function(__unused_webpack_module, exports) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = contains;\nfunction contains(value, search) {\n  return value && search && value.indexOf(search) > -1;\n}\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/deepArsonify.js\":\n/*!*******************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/deepArsonify.js ***!\n  \\*******************************************************/\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_134158__) {\n\n\"use strict\";\n\n\nvar _typeof = __nested_webpack_require_134158__(/*! @babel/runtime/helpers/typeof */ \"./node_modules/@babel/runtime/helpers/typeof.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = deepArsonify;\nvar ARSON = _interopRequireWildcard(__nested_webpack_require_134158__(/*! @logrocket/arson */ \"./packages/@logrocket/arson/src/index.js\"));\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction deepArsonify(data) {\n  return {\n    // table: Arson.toTable(data).map(shallowArsonify),\n    arson: ARSON.encode(data)\n  };\n}\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/deepDearsonify.js\":\n/*!*********************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/deepDearsonify.js ***!\n  \\*********************************************************/\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_136135__) {\n\n\"use strict\";\n\n\nvar _typeof = __nested_webpack_require_136135__(/*! @babel/runtime/helpers/typeof */ \"./node_modules/@babel/runtime/helpers/typeof.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = deepDearsonify;\nvar ARSON = _interopRequireWildcard(__nested_webpack_require_136135__(/*! @logrocket/arson */ \"./packages/@logrocket/arson/src/index.js\"));\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction deepDearsonify(data) {\n  if (!data) {\n    return data;\n  }\n  return ARSON.decode(data.arson);\n}\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/endsWith.js\":\n/*!***************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/endsWith.js ***!\n  \\***************************************************/\n/***/ (function(__unused_webpack_module, exports) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = endsWith;\nfunction endsWith(value, search) {\n  return value && search && value.substring(value.length - search.length) === search;\n}\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/enhanceFunc.js\":\n/*!******************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/enhanceFunc.js ***!\n  \\******************************************************/\n/***/ (function(__unused_webpack_module, exports) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = enhanceFunc;\n/* eslint no-param-reassign: [\"error\", { \"props\": false }] */\n\nfunction enhanceFunc(obj, method, handler) {\n  var original = obj[method];\n  function shim() {\n    var res;\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    if (original) {\n      res = original.apply(this, args);\n    }\n    handler.apply(this, args);\n    return res;\n  }\n  obj[method] = shim;\n  return function () {\n    obj[method] = original;\n  };\n}\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/find.js\":\n/*!***********************************************!*\\\n  !*** ./packages/@logrocket/utils/src/find.js ***!\n  \\***********************************************/\n/***/ (function(__unused_webpack_module, exports) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = find;\nfunction find(array, predicate) {\n  for (var idx = 0; idx < array.length; idx++) {\n    if (predicate(array[idx])) {\n      return array[idx];\n    }\n  }\n}\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/findIndex.js\":\n/*!****************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/findIndex.js ***!\n  \\****************************************************/\n/***/ (function(__unused_webpack_module, exports) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = findIndex;\nfunction findIndex(array, predicate) {\n  for (var idx = 0; idx < array.length; idx++) {\n    if (predicate(array[idx])) {\n      return idx;\n    }\n  }\n  return -1;\n}\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/findKeyFrames.js\":\n/*!********************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/findKeyFrames.js ***!\n  \\********************************************************/\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_140634__) {\n\n\"use strict\";\n\n\nvar _interopRequireDefault = __nested_webpack_require_140634__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = findKeyFrames;\nvar _sortedLastIndexBy = _interopRequireDefault(__nested_webpack_require_140634__(/*! lodash/sortedLastIndexBy */ \"./packages/@logrocket/utils/node_modules/lodash/sortedLastIndexBy.js\"));\n/**\n * Give an array of timed events and a time, find the array element\n * before and after that time and the progress between the frames (0 to 1)\n */\nfunction findKeyFrames(futures, time) {\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n    _ref$sdkThrottle = _ref.sdkThrottle,\n    sdkThrottle = _ref$sdkThrottle === void 0 ? 500 : _ref$sdkThrottle;\n  if (!futures.length) {\n    return null;\n  }\n  var index = (0, _sortedLastIndexBy.default)(futures, {\n    time: time\n  }, 'time');\n  var next = futures[index] || futures[index - 1];\n  var prev = futures[index - 1] || next;\n\n  // Do not consider events further than `throttle` time away to be active.\n  // This prevents the slow-drift effect.\n  var totalTime = Math.min(next.time - prev.time, sdkThrottle);\n  var expired = Math.max(time - (next.time - totalTime), 0);\n  var ratio = totalTime === 0 ? 1 : Math.min(expired / totalTime, 1);\n  return {\n    prev: prev,\n    next: next,\n    ratio: ratio\n  };\n}\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/flatten.js\":\n/*!**************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/flatten.js ***!\n  \\**************************************************/\n/***/ (function(__unused_webpack_module, exports) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = flatten;\nfunction flatten(acc, current) {\n  return acc.concat(current);\n}\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/getCssRules.ts\":\n/*!******************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/getCssRules.ts ***!\n  \\******************************************************/\n/***/ (function(__unused_webpack_module, exports) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.getCssRule = exports.getCssRules = void 0;\nvar getCssRules = function getCssRules(sheetOrRule) {\n  try {\n    // Chrome 64 won't let you check sheet.rules without throwing if they're unavailable\n    // and Firefox uses cssRules\n    var cssRules = sheetOrRule.cssRules;\n    if (!cssRules && sheetOrRule instanceof CSSStyleSheet) {\n      return sheetOrRule.rules;\n    }\n    return cssRules;\n  } catch (err) {\n    // catch DOMExcpetion or SecurityException from attempting to access sheetOrRule.cssRules\n    //  on a cross origin hosted stylesheet.\n    return null;\n  }\n};\nexports.getCssRules = getCssRules;\nvar getCssRule = function getCssRule(sheetOrRule, ruleIndex) {\n  var rules = getCssRules(sheetOrRule);\n  if (!rules || ruleIndex >= rules.length) {\n    return null;\n  }\n  return rules.item(ruleIndex);\n};\nexports.getCssRule = getCssRule;\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/getGraphQLOperation.js\":\n/*!**************************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/getGraphQLOperation.js ***!\n  \\**************************************************************/\n/***/ (function(__unused_webpack_module, exports) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = getGraphQLOperation;\nfunction getGraphQLOperation(body) {\n  if (body) {\n    try {\n      var parsedBody = typeof body === 'string' ? JSON.parse(body) : body;\n      var query = parsedBody.query.trim();\n      var match = query.match(/(query|mutation) ([a-z_-]+)/i);\n      if (!match) {\n        return {};\n      }\n      return {\n        operationType: match[1],\n        operationName: match[2]\n      };\n    } catch (_) {\n      return {};\n    }\n  }\n  return {};\n}\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/getMockDeveloperUser.js\":\n/*!***************************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/getMockDeveloperUser.js ***!\n  \\***************************************************************/\n/***/ (function(__unused_webpack_module, exports) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = getMockDeveloperUser;\nfunction getMockDeveloperUser() {\n  return {\n    permissions: {\n      dashboard: {\n        metrics: true,\n        errors: true\n      },\n      sessionPlayback: {\n        developerPane: {\n          networkPane: {\n            requestBodiesAndHeaders: true\n          }\n        }\n      }\n    },\n    appRoles: []\n  };\n}\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/getNodeSelector.js\":\n/*!**********************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/getNodeSelector.js ***!\n  \\**********************************************************/\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_145791__) {\n\n\"use strict\";\n\n\nvar _interopRequireDefault = __nested_webpack_require_145791__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar _protectFunc = _interopRequireDefault(__nested_webpack_require_145791__(/*! ./protectFunc */ \"./packages/@logrocket/utils/src/protectFunc.js\"));\nvar getNodeSelector = (0, _protectFunc.default)(function (node) {\n  // nodeName sometimes returns null\n  var nodeName = node.nodeName ? node.nodeName.toLowerCase() : '';\n  var selector = {\n    nodeName: nodeName\n  };\n  if (node.id && node.id.length > 0) {\n    selector.id = node.id;\n  }\n  if (node.classList && node.classList.length > 0) {\n    selector.classList = Array.prototype.slice.call(node.classList, 0);\n  }\n  return selector;\n});\nvar _default = getNodeSelector;\nexports[\"default\"] = _default;\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/hashString.js\":\n/*!*****************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/hashString.js ***!\n  \\*****************************************************/\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_147025__) {\n\n\"use strict\";\n\n\nvar _interopRequireDefault = __nested_webpack_require_147025__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.combineHashes = exports.hashString = void 0;\nvar _protectFunc = _interopRequireDefault(__nested_webpack_require_147025__(/*! ./protectFunc */ \"./packages/@logrocket/utils/src/protectFunc.js\"));\nvar _sendTelemetryData = __nested_webpack_require_147025__(/*! ./sendTelemetryData */ \"./packages/@logrocket/utils/src/sendTelemetryData.js\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n// Java's String::hashCode\n// https://devdocs.io/openjdk~8/java/lang/string#hashCode--\nvar hashString = (0, _protectFunc.default)(function (str) {\n  try {\n    var hash = 0;\n    if (typeof str === 'string' && str.length) {\n      for (var i = 0; i < str.length; i++) {\n        hash = 31 * hash + str.charCodeAt(i);\n\n        // Force hash to stay in a 32 bit integer so bitshifting works\n        hash |= 0; // eslint-disable-line no-bitwise\n      }\n    }\n\n    return hash;\n  } catch (err) {\n    (0, _sendTelemetryData.sendTelemetry)('Failed to hash string', {\n      extra: {\n        str: str\n      }\n    });\n    return null;\n  }\n});\n\n// Boost's hash_combine\nexports.hashString = hashString;\nvar combineHashes = function combineHashes(hashes) {\n  var out = hashes.shift() || 0;\n  var _iterator = _createForOfIteratorHelper(hashes),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var hash = _step.value;\n      out ^= hash + 0x9e3779b9 + (out << 6) + (out >> 2); // eslint-disable-line no-bitwise\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return out;\n};\nexports.combineHashes = combineHashes;\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/identityStatus.ts\":\n/*!*********************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/identityStatus.ts ***!\n  \\*********************************************************/\n/***/ (function(__unused_webpack_module, exports) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.parseIdentityStatus = parseIdentityStatus;\nexports.IdentityStatus = void 0;\nvar IdentityStatus;\nexports.IdentityStatus = IdentityStatus;\n(function (IdentityStatus) {\n  IdentityStatus[IdentityStatus[\"Unknown\"] = 0] = \"Unknown\";\n  IdentityStatus[IdentityStatus[\"Anonymous\"] = 1] = \"Anonymous\";\n  IdentityStatus[IdentityStatus[\"Identified\"] = 2] = \"Identified\";\n})(IdentityStatus || (exports.IdentityStatus = IdentityStatus = {}));\nfunction parseIdentityStatus(val) {\n  if (!val) {\n    return IdentityStatus.Unknown;\n  }\n  switch (parseInt(val, 10)) {\n    case IdentityStatus.Anonymous:\n      return IdentityStatus.Anonymous;\n    case IdentityStatus.Identified:\n      return IdentityStatus.Identified;\n    default:\n      return IdentityStatus.Unknown;\n  }\n}\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/index.ts\":\n/*!************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/index.ts ***!\n  \\************************************************/\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_151814__) {\n\n\"use strict\";\n\n\nvar _interopRequireDefault = __nested_webpack_require_151814__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nvar _typeof = __nested_webpack_require_151814__(/*! @babel/runtime/helpers/typeof */ \"./node_modules/@babel/runtime/helpers/typeof.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar _exportNames = {\n  enhanceFunc: true,\n  shallowArsonify: true,\n  shallowDearsonify: true,\n  deepArsonify: true,\n  deepDearsonify: true,\n  addListener: true,\n  protectFunc: true,\n  findIndex: true,\n  find: true,\n  flatten: true,\n  selectorMatches: true,\n  parseSelectorForMatch: true,\n  querySelectorWithShadowDom: true,\n  sendErrorTelemetry: true,\n  sendTelemetry: true,\n  sanitizeValue: true,\n  adjustOs: true,\n  adjustOsVersion: true,\n  selectorFromNodePath: true,\n  startsWith: true,\n  endsWith: true,\n  contains: true,\n  uuid: true,\n  randomInt: true,\n  getCssRules: true,\n  getCssRule: true,\n  getNodeSelector: true,\n  getGraphQLOperation: true,\n  isSessionEvent: true,\n  isActivityEvent: true,\n  parseIntFromHex: true,\n  isRecordingSampled: true,\n  makeRecordingID: true,\n  setFromArray: true,\n  setToArray: true,\n  applyUrlSanitizer: true,\n  getMockDeveloperUser: true,\n  maybeCleanSwiftUIClassName: true,\n  LOG_FILTER_TYPES: true,\n  LOG_TYPES: true,\n  METRIC_TIMESERIES_TYPE: true,\n  HEATMAP_FOR_URL_OPERATOR: true,\n  DEFAULT_HEATMAP_FOR_URL_OPERATOR: true,\n  DEFAULT_INSIGHTS_HEATMAP_FOR_URL_OPERATOR: true,\n  SORT_DIRECTION: true,\n  FEEDBACK_SORT_COLUMN: true,\n  METRIC_RETENTION_TYPE: true,\n  ISSUE_TYPE: true,\n  ISSUE_GROUP_TYPE: true,\n  ES_ISSUE_TYPE_BASE_FILTER: true,\n  ES_ISSUE_TYPES: true,\n  findKeyFrames: true,\n  interpolate: true,\n  interpolateMobile: true,\n  removeOutdated: true,\n  DELIGHTED_RESPONSES_REGEX: true,\n  WOOTRIC_RESPONSES_REGEX: true,\n  REPLAY_TYPE: true,\n  SDK_REPLAY_TYPE: true,\n  SDK_TYPE: true,\n  SDK_TYPE_TO_DISPLAY: true,\n  SESSION_TYPE_TO_DISPLAY: true,\n  STATUS_CODES: true,\n  getStatusText: true,\n  parseQueryString: true,\n  likeOperator: true,\n  scrollMapHistogramToPercent: true,\n  combineHashes: true,\n  hashString: true,\n  encodeUserTraitString: true,\n  parseUserTraitString: true,\n  IdentityStatus: true,\n  parseIdentityStatus: true,\n  scrubException: true,\n  MobileConstants: true\n};\nObject.defineProperty(exports, \"enhanceFunc\", ({\n  enumerable: true,\n  get: function get() {\n    return _enhanceFunc.default;\n  }\n}));\nObject.defineProperty(exports, \"shallowArsonify\", ({\n  enumerable: true,\n  get: function get() {\n    return _shallowArsonify.default;\n  }\n}));\nObject.defineProperty(exports, \"shallowDearsonify\", ({\n  enumerable: true,\n  get: function get() {\n    return _shallowDearsonify.default;\n  }\n}));\nObject.defineProperty(exports, \"deepArsonify\", ({\n  enumerable: true,\n  get: function get() {\n    return _deepArsonify.default;\n  }\n}));\nObject.defineProperty(exports, \"deepDearsonify\", ({\n  enumerable: true,\n  get: function get() {\n    return _deepDearsonify.default;\n  }\n}));\nObject.defineProperty(exports, \"addListener\", ({\n  enumerable: true,\n  get: function get() {\n    return _addListener.default;\n  }\n}));\nObject.defineProperty(exports, \"protectFunc\", ({\n  enumerable: true,\n  get: function get() {\n    return _protectFunc.default;\n  }\n}));\nObject.defineProperty(exports, \"findIndex\", ({\n  enumerable: true,\n  get: function get() {\n    return _findIndex.default;\n  }\n}));\nObject.defineProperty(exports, \"find\", ({\n  enumerable: true,\n  get: function get() {\n    return _find.default;\n  }\n}));\nObject.defineProperty(exports, \"flatten\", ({\n  enumerable: true,\n  get: function get() {\n    return _flatten.default;\n  }\n}));\nObject.defineProperty(exports, \"selectorMatches\", ({\n  enumerable: true,\n  get: function get() {\n    return _selectorMatches.default;\n  }\n}));\nObject.defineProperty(exports, \"parseSelectorForMatch\", ({\n  enumerable: true,\n  get: function get() {\n    return _parseSelectorForMatch.default;\n  }\n}));\nObject.defineProperty(exports, \"querySelectorWithShadowDom\", ({\n  enumerable: true,\n  get: function get() {\n    return _querySelectorWithShadowDom.default;\n  }\n}));\nObject.defineProperty(exports, \"sendErrorTelemetry\", ({\n  enumerable: true,\n  get: function get() {\n    return _sendTelemetryData.default;\n  }\n}));\nObject.defineProperty(exports, \"sendTelemetry\", ({\n  enumerable: true,\n  get: function get() {\n    return _sendTelemetryData.sendTelemetry;\n  }\n}));\nObject.defineProperty(exports, \"sanitizeValue\", ({\n  enumerable: true,\n  get: function get() {\n    return _sanitizeValue.default;\n  }\n}));\nObject.defineProperty(exports, \"adjustOs\", ({\n  enumerable: true,\n  get: function get() {\n    return _adjustOsVersion.adjustOs;\n  }\n}));\nObject.defineProperty(exports, \"adjustOsVersion\", ({\n  enumerable: true,\n  get: function get() {\n    return _adjustOsVersion.adjustOsVersion;\n  }\n}));\nObject.defineProperty(exports, \"selectorFromNodePath\", ({\n  enumerable: true,\n  get: function get() {\n    return _selectorFromNodePath.default;\n  }\n}));\nObject.defineProperty(exports, \"startsWith\", ({\n  enumerable: true,\n  get: function get() {\n    return _startsWith.default;\n  }\n}));\nObject.defineProperty(exports, \"endsWith\", ({\n  enumerable: true,\n  get: function get() {\n    return _endsWith.default;\n  }\n}));\nObject.defineProperty(exports, \"contains\", ({\n  enumerable: true,\n  get: function get() {\n    return _contains.default;\n  }\n}));\nObject.defineProperty(exports, \"uuid\", ({\n  enumerable: true,\n  get: function get() {\n    return _uuid.default;\n  }\n}));\nObject.defineProperty(exports, \"randomInt\", ({\n  enumerable: true,\n  get: function get() {\n    return _randomInt.default;\n  }\n}));\nObject.defineProperty(exports, \"getCssRules\", ({\n  enumerable: true,\n  get: function get() {\n    return _getCssRules.getCssRules;\n  }\n}));\nObject.defineProperty(exports, \"getCssRule\", ({\n  enumerable: true,\n  get: function get() {\n    return _getCssRules.getCssRule;\n  }\n}));\nObject.defineProperty(exports, \"getNodeSelector\", ({\n  enumerable: true,\n  get: function get() {\n    return _getNodeSelector.default;\n  }\n}));\nObject.defineProperty(exports, \"getGraphQLOperation\", ({\n  enumerable: true,\n  get: function get() {\n    return _getGraphQLOperation.default;\n  }\n}));\nObject.defineProperty(exports, \"isSessionEvent\", ({\n  enumerable: true,\n  get: function get() {\n    return _isSessionEvent.default;\n  }\n}));\nObject.defineProperty(exports, \"isActivityEvent\", ({\n  enumerable: true,\n  get: function get() {\n    return _isActivityEvent.default;\n  }\n}));\nObject.defineProperty(exports, \"parseIntFromHex\", ({\n  enumerable: true,\n  get: function get() {\n    return _parseIntFromHex.default;\n  }\n}));\nObject.defineProperty(exports, \"isRecordingSampled\", ({\n  enumerable: true,\n  get: function get() {\n    return _isRecordingSampled.default;\n  }\n}));\nObject.defineProperty(exports, \"makeRecordingID\", ({\n  enumerable: true,\n  get: function get() {\n    return _makeRecordingID.default;\n  }\n}));\nObject.defineProperty(exports, \"setFromArray\", ({\n  enumerable: true,\n  get: function get() {\n    return _setFromArray.default;\n  }\n}));\nObject.defineProperty(exports, \"setToArray\", ({\n  enumerable: true,\n  get: function get() {\n    return _setToArray.default;\n  }\n}));\nObject.defineProperty(exports, \"applyUrlSanitizer\", ({\n  enumerable: true,\n  get: function get() {\n    return _applyUrlSanitizer.default;\n  }\n}));\nObject.defineProperty(exports, \"getMockDeveloperUser\", ({\n  enumerable: true,\n  get: function get() {\n    return _getMockDeveloperUser.default;\n  }\n}));\nObject.defineProperty(exports, \"maybeCleanSwiftUIClassName\", ({\n  enumerable: true,\n  get: function get() {\n    return _maybeCleanSwiftUIClassName.default;\n  }\n}));\nObject.defineProperty(exports, \"LOG_FILTER_TYPES\", ({\n  enumerable: true,\n  get: function get() {\n    return _logTypes.LOG_FILTER_TYPES;\n  }\n}));\nObject.defineProperty(exports, \"LOG_TYPES\", ({\n  enumerable: true,\n  get: function get() {\n    return _logTypes.LOG_TYPES;\n  }\n}));\nObject.defineProperty(exports, \"METRIC_TIMESERIES_TYPE\", ({\n  enumerable: true,\n  get: function get() {\n    return _metrics.METRIC_TIMESERIES_TYPE;\n  }\n}));\nObject.defineProperty(exports, \"HEATMAP_FOR_URL_OPERATOR\", ({\n  enumerable: true,\n  get: function get() {\n    return _metrics.HEATMAP_FOR_URL_OPERATOR;\n  }\n}));\nObject.defineProperty(exports, \"DEFAULT_HEATMAP_FOR_URL_OPERATOR\", ({\n  enumerable: true,\n  get: function get() {\n    return _metrics.DEFAULT_HEATMAP_FOR_URL_OPERATOR;\n  }\n}));\nObject.defineProperty(exports, \"DEFAULT_INSIGHTS_HEATMAP_FOR_URL_OPERATOR\", ({\n  enumerable: true,\n  get: function get() {\n    return _metrics.DEFAULT_INSIGHTS_HEATMAP_FOR_URL_OPERATOR;\n  }\n}));\nObject.defineProperty(exports, \"SORT_DIRECTION\", ({\n  enumerable: true,\n  get: function get() {\n    return _metrics.SORT_DIRECTION;\n  }\n}));\nObject.defineProperty(exports, \"FEEDBACK_SORT_COLUMN\", ({\n  enumerable: true,\n  get: function get() {\n    return _metrics.FEEDBACK_SORT_COLUMN;\n  }\n}));\nObject.defineProperty(exports, \"METRIC_RETENTION_TYPE\", ({\n  enumerable: true,\n  get: function get() {\n    return _metrics.METRIC_RETENTION_TYPE;\n  }\n}));\nObject.defineProperty(exports, \"ISSUE_TYPE\", ({\n  enumerable: true,\n  get: function get() {\n    return _issues.ISSUE_TYPE;\n  }\n}));\nObject.defineProperty(exports, \"ISSUE_GROUP_TYPE\", ({\n  enumerable: true,\n  get: function get() {\n    return _issues.ISSUE_GROUP_TYPE;\n  }\n}));\nObject.defineProperty(exports, \"ES_ISSUE_TYPE_BASE_FILTER\", ({\n  enumerable: true,\n  get: function get() {\n    return _issues.ES_ISSUE_TYPE_BASE_FILTER;\n  }\n}));\nObject.defineProperty(exports, \"ES_ISSUE_TYPES\", ({\n  enumerable: true,\n  get: function get() {\n    return _issues.ES_ISSUE_TYPES;\n  }\n}));\nObject.defineProperty(exports, \"findKeyFrames\", ({\n  enumerable: true,\n  get: function get() {\n    return _findKeyFrames.default;\n  }\n}));\nObject.defineProperty(exports, \"interpolate\", ({\n  enumerable: true,\n  get: function get() {\n    return _interpolate.default;\n  }\n}));\nObject.defineProperty(exports, \"interpolateMobile\", ({\n  enumerable: true,\n  get: function get() {\n    return _interpolate.interpolateMobile;\n  }\n}));\nObject.defineProperty(exports, \"removeOutdated\", ({\n  enumerable: true,\n  get: function get() {\n    return _removeOutdated.default;\n  }\n}));\nObject.defineProperty(exports, \"DELIGHTED_RESPONSES_REGEX\", ({\n  enumerable: true,\n  get: function get() {\n    return _nps.DELIGHTED_RESPONSES_REGEX;\n  }\n}));\nObject.defineProperty(exports, \"WOOTRIC_RESPONSES_REGEX\", ({\n  enumerable: true,\n  get: function get() {\n    return _nps.WOOTRIC_RESPONSES_REGEX;\n  }\n}));\nObject.defineProperty(exports, \"REPLAY_TYPE\", ({\n  enumerable: true,\n  get: function get() {\n    return _replayTypes.REPLAY_TYPE;\n  }\n}));\nObject.defineProperty(exports, \"SDK_REPLAY_TYPE\", ({\n  enumerable: true,\n  get: function get() {\n    return _sdkTypes.SDK_REPLAY_TYPE;\n  }\n}));\nObject.defineProperty(exports, \"SDK_TYPE\", ({\n  enumerable: true,\n  get: function get() {\n    return _sdkTypes.SDK_TYPE;\n  }\n}));\nObject.defineProperty(exports, \"SDK_TYPE_TO_DISPLAY\", ({\n  enumerable: true,\n  get: function get() {\n    return _sdkTypes.SDK_TYPE_TO_DISPLAY;\n  }\n}));\nObject.defineProperty(exports, \"SESSION_TYPE_TO_DISPLAY\", ({\n  enumerable: true,\n  get: function get() {\n    return _sdkTypes.SESSION_TYPE_TO_DISPLAY;\n  }\n}));\nObject.defineProperty(exports, \"STATUS_CODES\", ({\n  enumerable: true,\n  get: function get() {\n    return _statusCodes.STATUS_CODES;\n  }\n}));\nObject.defineProperty(exports, \"getStatusText\", ({\n  enumerable: true,\n  get: function get() {\n    return _statusCodes.getStatusText;\n  }\n}));\nObject.defineProperty(exports, \"parseQueryString\", ({\n  enumerable: true,\n  get: function get() {\n    return _parseQueryString.parseQueryString;\n  }\n}));\nObject.defineProperty(exports, \"likeOperator\", ({\n  enumerable: true,\n  get: function get() {\n    return _likeOperator.likeOperator;\n  }\n}));\nObject.defineProperty(exports, \"scrollMapHistogramToPercent\", ({\n  enumerable: true,\n  get: function get() {\n    return _scrollMapHistogramToPercent.default;\n  }\n}));\nObject.defineProperty(exports, \"combineHashes\", ({\n  enumerable: true,\n  get: function get() {\n    return _hashString.combineHashes;\n  }\n}));\nObject.defineProperty(exports, \"hashString\", ({\n  enumerable: true,\n  get: function get() {\n    return _hashString.hashString;\n  }\n}));\nObject.defineProperty(exports, \"encodeUserTraitString\", ({\n  enumerable: true,\n  get: function get() {\n    return _userTraitStrings.encodeUserTraitString;\n  }\n}));\nObject.defineProperty(exports, \"parseUserTraitString\", ({\n  enumerable: true,\n  get: function get() {\n    return _userTraitStrings.parseUserTraitString;\n  }\n}));\nObject.defineProperty(exports, \"IdentityStatus\", ({\n  enumerable: true,\n  get: function get() {\n    return _identityStatus.IdentityStatus;\n  }\n}));\nObject.defineProperty(exports, \"parseIdentityStatus\", ({\n  enumerable: true,\n  get: function get() {\n    return _identityStatus.parseIdentityStatus;\n  }\n}));\nObject.defineProperty(exports, \"scrubException\", ({\n  enumerable: true,\n  get: function get() {\n    return _scrubException.scrubException;\n  }\n}));\nexports.MobileConstants = void 0;\nvar _enhanceFunc = _interopRequireDefault(__nested_webpack_require_151814__(/*! ./enhanceFunc */ \"./packages/@logrocket/utils/src/enhanceFunc.js\"));\nvar _shallowArsonify = _interopRequireDefault(__nested_webpack_require_151814__(/*! ./shallowArsonify */ \"./packages/@logrocket/utils/src/shallowArsonify.js\"));\nvar _shallowDearsonify = _interopRequireDefault(__nested_webpack_require_151814__(/*! ./shallowDearsonify */ \"./packages/@logrocket/utils/src/shallowDearsonify.js\"));\nvar _deepArsonify = _interopRequireDefault(__nested_webpack_require_151814__(/*! ./deepArsonify */ \"./packages/@logrocket/utils/src/deepArsonify.js\"));\nvar _deepDearsonify = _interopRequireDefault(__nested_webpack_require_151814__(/*! ./deepDearsonify */ \"./packages/@logrocket/utils/src/deepDearsonify.js\"));\nvar _addListener = _interopRequireDefault(__nested_webpack_require_151814__(/*! ./addListener */ \"./packages/@logrocket/utils/src/addListener.js\"));\nvar _protectFunc = _interopRequireDefault(__nested_webpack_require_151814__(/*! ./protectFunc */ \"./packages/@logrocket/utils/src/protectFunc.js\"));\nvar _findIndex = _interopRequireDefault(__nested_webpack_require_151814__(/*! ./findIndex */ \"./packages/@logrocket/utils/src/findIndex.js\"));\nvar _find = _interopRequireDefault(__nested_webpack_require_151814__(/*! ./find */ \"./packages/@logrocket/utils/src/find.js\"));\nvar _flatten = _interopRequireDefault(__nested_webpack_require_151814__(/*! ./flatten */ \"./packages/@logrocket/utils/src/flatten.js\"));\nvar _selectorMatches = _interopRequireDefault(__nested_webpack_require_151814__(/*! ./selectorMatches */ \"./packages/@logrocket/utils/src/selectorMatches.js\"));\nvar _parseSelectorForMatch = _interopRequireDefault(__nested_webpack_require_151814__(/*! ./parseSelectorForMatch */ \"./packages/@logrocket/utils/src/parseSelectorForMatch.js\"));\nvar _querySelectorWithShadowDom = _interopRequireDefault(__nested_webpack_require_151814__(/*! ./querySelectorWithShadowDom */ \"./packages/@logrocket/utils/src/querySelectorWithShadowDom.js\"));\nvar _sendTelemetryData = _interopRequireWildcard(__nested_webpack_require_151814__(/*! ./sendTelemetryData */ \"./packages/@logrocket/utils/src/sendTelemetryData.js\"));\nvar _sanitizeValue = _interopRequireDefault(__nested_webpack_require_151814__(/*! ./sanitizeValue */ \"./packages/@logrocket/utils/src/sanitizeValue.js\"));\nvar _adjustOsVersion = __nested_webpack_require_151814__(/*! ./adjustOsVersion */ \"./packages/@logrocket/utils/src/adjustOsVersion.ts\");\nvar _selectorFromNodePath = _interopRequireDefault(__nested_webpack_require_151814__(/*! ./selectorFromNodePath */ \"./packages/@logrocket/utils/src/selectorFromNodePath.js\"));\nvar _startsWith = _interopRequireDefault(__nested_webpack_require_151814__(/*! ./startsWith */ \"./packages/@logrocket/utils/src/startsWith.js\"));\nvar _endsWith = _interopRequireDefault(__nested_webpack_require_151814__(/*! ./endsWith */ \"./packages/@logrocket/utils/src/endsWith.js\"));\nvar _contains = _interopRequireDefault(__nested_webpack_require_151814__(/*! ./contains */ \"./packages/@logrocket/utils/src/contains.js\"));\nvar _uuid = _interopRequireDefault(__nested_webpack_require_151814__(/*! ./uuid */ \"./packages/@logrocket/utils/src/uuid.js\"));\nvar _randomInt = _interopRequireDefault(__nested_webpack_require_151814__(/*! ./randomInt */ \"./packages/@logrocket/utils/src/randomInt.js\"));\nvar _getCssRules = __nested_webpack_require_151814__(/*! ./getCssRules */ \"./packages/@logrocket/utils/src/getCssRules.ts\");\nvar _getNodeSelector = _interopRequireDefault(__nested_webpack_require_151814__(/*! ./getNodeSelector */ \"./packages/@logrocket/utils/src/getNodeSelector.js\"));\nvar _getGraphQLOperation = _interopRequireDefault(__nested_webpack_require_151814__(/*! ./getGraphQLOperation */ \"./packages/@logrocket/utils/src/getGraphQLOperation.js\"));\nvar _isSessionEvent = _interopRequireDefault(__nested_webpack_require_151814__(/*! ./isSessionEvent */ \"./packages/@logrocket/utils/src/isSessionEvent.js\"));\nvar _isActivityEvent = _interopRequireDefault(__nested_webpack_require_151814__(/*! ./isActivityEvent */ \"./packages/@logrocket/utils/src/isActivityEvent.js\"));\nvar _parseIntFromHex = _interopRequireDefault(__nested_webpack_require_151814__(/*! ./parseIntFromHex */ \"./packages/@logrocket/utils/src/parseIntFromHex.js\"));\nvar _isRecordingSampled = _interopRequireDefault(__nested_webpack_require_151814__(/*! ./isRecordingSampled */ \"./packages/@logrocket/utils/src/isRecordingSampled.js\"));\nvar _makeRecordingID = _interopRequireDefault(__nested_webpack_require_151814__(/*! ./makeRecordingID */ \"./packages/@logrocket/utils/src/makeRecordingID.js\"));\nvar _setFromArray = _interopRequireDefault(__nested_webpack_require_151814__(/*! ./setFromArray */ \"./packages/@logrocket/utils/src/setFromArray.js\"));\nvar _setToArray = _interopRequireDefault(__nested_webpack_require_151814__(/*! ./setToArray */ \"./packages/@logrocket/utils/src/setToArray.js\"));\nvar _applyUrlSanitizer = _interopRequireDefault(__nested_webpack_require_151814__(/*! ./applyUrlSanitizer */ \"./packages/@logrocket/utils/src/applyUrlSanitizer.js\"));\nvar _getMockDeveloperUser = _interopRequireDefault(__nested_webpack_require_151814__(/*! ./getMockDeveloperUser */ \"./packages/@logrocket/utils/src/getMockDeveloperUser.js\"));\nvar _maybeCleanSwiftUIClassName = _interopRequireDefault(__nested_webpack_require_151814__(/*! ./maybeCleanSwiftUIClassName */ \"./packages/@logrocket/utils/src/maybeCleanSwiftUIClassName.ts\"));\nvar _logTypes = __nested_webpack_require_151814__(/*! ./constants/logTypes */ \"./packages/@logrocket/utils/src/constants/logTypes.js\");\nvar _metrics = __nested_webpack_require_151814__(/*! ./constants/metrics */ \"./packages/@logrocket/utils/src/constants/metrics.js\");\nvar _issues = __nested_webpack_require_151814__(/*! ./constants/issues */ \"./packages/@logrocket/utils/src/constants/issues.ts\");\nvar _findKeyFrames = _interopRequireDefault(__nested_webpack_require_151814__(/*! ./findKeyFrames */ \"./packages/@logrocket/utils/src/findKeyFrames.js\"));\nvar _interpolate = _interopRequireWildcard(__nested_webpack_require_151814__(/*! ./interpolate */ \"./packages/@logrocket/utils/src/interpolate.js\"));\nvar _removeOutdated = _interopRequireDefault(__nested_webpack_require_151814__(/*! ./removeOutdated */ \"./packages/@logrocket/utils/src/removeOutdated.js\"));\nvar _nps = __nested_webpack_require_151814__(/*! ./constants/nps */ \"./packages/@logrocket/utils/src/constants/nps.js\");\nvar _replayTypes = __nested_webpack_require_151814__(/*! ./constants/replayTypes */ \"./packages/@logrocket/utils/src/constants/replayTypes.ts\");\nvar _sdkTypes = __nested_webpack_require_151814__(/*! ./constants/sdkTypes */ \"./packages/@logrocket/utils/src/constants/sdkTypes.ts\");\nvar _statusCodes = __nested_webpack_require_151814__(/*! ./constants/statusCodes */ \"./packages/@logrocket/utils/src/constants/statusCodes.ts\");\nvar _parseQueryString = __nested_webpack_require_151814__(/*! ./parseQueryString */ \"./packages/@logrocket/utils/src/parseQueryString.js\");\nvar _likeOperator = __nested_webpack_require_151814__(/*! ./likeOperator */ \"./packages/@logrocket/utils/src/likeOperator.js\");\nvar _scrollMapHistogramToPercent = _interopRequireDefault(__nested_webpack_require_151814__(/*! ./scrollMapHistogramToPercent */ \"./packages/@logrocket/utils/src/scrollMapHistogramToPercent.js\"));\nvar _hashString = __nested_webpack_require_151814__(/*! ./hashString */ \"./packages/@logrocket/utils/src/hashString.js\");\nvar _userTraitStrings = __nested_webpack_require_151814__(/*! ./userTraitStrings */ \"./packages/@logrocket/utils/src/userTraitStrings.ts\");\nvar _identityStatus = __nested_webpack_require_151814__(/*! ./identityStatus */ \"./packages/@logrocket/utils/src/identityStatus.ts\");\nvar _scrubException = __nested_webpack_require_151814__(/*! ./scrubException */ \"./packages/@logrocket/utils/src/scrubException.ts\");\nvar _MobileConstants = _interopRequireWildcard(__nested_webpack_require_151814__(/*! ./constants/mobile */ \"./packages/@logrocket/utils/src/constants/mobile.ts\"));\nexports.MobileConstants = _MobileConstants;\nvar _browserUtils = __nested_webpack_require_151814__(/*! ./browserUtils */ \"./packages/@logrocket/utils/src/browserUtils.js\");\nObject.keys(_browserUtils).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === _browserUtils[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _browserUtils[key];\n    }\n  });\n});\nvar _isValidAppID = __nested_webpack_require_151814__(/*! ./isValidAppID */ \"./packages/@logrocket/utils/src/isValidAppID.ts\");\nObject.keys(_isValidAppID).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === _isValidAppID[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _isValidAppID[key];\n    }\n  });\n});\nvar _requireValue = __nested_webpack_require_151814__(/*! ./requireValue */ \"./packages/@logrocket/utils/src/requireValue.ts\");\nObject.keys(_requireValue).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === _requireValue[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _requireValue[key];\n    }\n  });\n});\nvar _types = __nested_webpack_require_151814__(/*! ./types */ \"./packages/@logrocket/utils/src/types.ts\");\nObject.keys(_types).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === _types[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _types[key];\n    }\n  });\n});\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/interpolate.js\":\n/*!******************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/interpolate.js ***!\n  \\******************************************************/\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_175681__) {\n\n\"use strict\";\n\n\nvar _interopRequireDefault = __nested_webpack_require_175681__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = interpolate;\nexports.interpolateMobile = interpolateMobile;\nvar _defineProperty2 = _interopRequireDefault(__nested_webpack_require_175681__(/*! @babel/runtime/helpers/defineProperty */ \"./node_modules/@babel/runtime/helpers/defineProperty.js\"));\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction interpolate(keyFrames, props) {\n  if (!keyFrames) {\n    return {};\n  }\n  var prev = keyFrames.prev,\n    next = keyFrames.next,\n    ratio = keyFrames.ratio;\n  var mid = _objectSpread({}, next);\n  var _iterator = _createForOfIteratorHelper(props),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var p = _step.value;\n      mid[p] = prev[p] + (next[p] - prev[p]) * ratio;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return mid;\n}\nfunction interpolateMobile(keyFrames, props, time) {\n  if (!keyFrames) {\n    return {};\n  }\n  var prev = keyFrames.prev,\n    next = keyFrames.next;\n  if (next.type === 'MOVE') {\n    return interpolate(keyFrames, props);\n  }\n\n  // let touch events only linger for half a second on the screen\n  if (prev === next && Math.abs(time - next.time) > 500) {\n    return null;\n  }\n  return next;\n}\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/isActivityEvent.js\":\n/*!**********************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/isActivityEvent.js ***!\n  \\**********************************************************/\n/***/ (function(__unused_webpack_module, exports) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = isActivityEvent;\nfunction isActivityEvent(type) {\n  var activityTypes = ['lr.browser.MouseEvent', 'lr.browser.ScrollEvent', 'lr.browser.InputEvent', 'lr.browser.InputChangeEvent', 'lr.android.TouchEvent', 'lr.android.InputChangeEvent', 'lr.ios.TouchEvent', 'lr.ios.InputChangeEvent'];\n  return activityTypes.indexOf(type) > -1;\n}\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/isRecordingSampled.js\":\n/*!*************************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/isRecordingSampled.js ***!\n  \\*************************************************************/\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_180647__) {\n\n\"use strict\";\n\n\nvar _interopRequireDefault = __nested_webpack_require_180647__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = isRecordingSampled;\nvar _parseIntFromHex = _interopRequireDefault(__nested_webpack_require_180647__(/*! ./parseIntFromHex */ \"./packages/@logrocket/utils/src/parseIntFromHex.js\"));\nvar SAMPLE_BUCKETS = 10000; // As few as 0.01% of recordings\n\nfunction isRecordingSampled(recordingID, samplePercent) {\n  if (samplePercent <= 0) {\n    return false;\n  }\n  var maxBucket = Math.floor(samplePercent * SAMPLE_BUCKETS);\n  var num = (0, _parseIntFromHex.default)(recordingID);\n  var bucket = num % SAMPLE_BUCKETS;\n  return bucket <= maxBucket;\n}\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/isSessionEvent.js\":\n/*!*********************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/isSessionEvent.js ***!\n  \\*********************************************************/\n/***/ (function(__unused_webpack_module, exports) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = isSessionEvent;\nvar SESSION_EVENT_WHITELIST = ['lr.browser.NavigationEvent', 'lr.browser.InputChangeEvent', 'lr.browser.InputEvent'];\nfunction isSessionEvent(event) {\n  return SESSION_EVENT_WHITELIST.indexOf(event.type) > -1 || event.data.eventType === 'CLICK';\n}\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/isValidAppID.ts\":\n/*!*******************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/isValidAppID.ts ***!\n  \\*******************************************************/\n/***/ (function(__unused_webpack_module, exports) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.isValidAppID = isValidAppID;\n// This pattern matches the orgSlug/appSlug format we expect for appIDs. Each slug is generated using the `slugify`\n// helper which performs a few conversions:\n// 1) All unicode is converted to approximate ASCII, or removed if there is no replacement.\n// 2) Spaces are converted to hyphens\n// 3) Remove any characters that are not alphanumeric, a hyphen, or an underscore.\n// 4) And finally, lowercase the string.\n//\n// https://docs.djangoproject.com/en/1.10/_modules/django/utils/text/#slugify\n//\n// The fields storing these slugs are SlugField instances, which use a different validation regex allowing uppercase\n// characters. As the final step in `slugify` is to lowercase all text, and that is how we generate slugs, we do not\n// consider uppercase characters valid in an appID.\n//\n// https://docs.djangoproject.com/en/1.10/_modules/django/core/validators/ (see slug_re)\nvar APP_ID_PATTERN = /^[a-z0-9_-]+\\/[a-z0-9_-]+$/;\nfunction isValidAppID(appID) {\n  return typeof appID === 'string' && APP_ID_PATTERN.test(appID);\n}\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/likeOperator.js\":\n/*!*******************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/likeOperator.js ***!\n  \\*******************************************************/\n/***/ (function(__unused_webpack_module, exports) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.likeOperator = likeOperator;\nfunction likeOperator(value, pattern) {\n  // Behaves like the ES \"wildcard\" query\n  // (See: https://www.elastic.co/guide/en/elasticsearch/reference/6.5/query-dsl-wildcard-query.html#query-dsl-wildcard-query)\n\n  var escaped = pattern.replace(\n  // (See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#escaping)\n  /[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n\n  // To emulate the ES wildcard search in regex\n  // (a) prefix '*' with the regex wildcard '.' character\n  // (c) convert '?' to '.'\n  // Keep in mind that we have escaped these characters, so we actually need to match\n  // their escaped versions.\n  var escapedRegexString = escaped.replace(/\\\\\\*/g, '.*').replace(/\\\\\\?/g, '.');\n  var regex = new RegExp(\"^\".concat(escapedRegexString, \"$\"));\n  return regex.test(value);\n}\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/logError.js\":\n/*!***************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/logError.js ***!\n  \\***************************************************/\n/***/ (function(__unused_webpack_module, exports) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar canBind = typeof console !== 'undefined' && console.error && console.error.bind;\nvar logError = canBind ? console.error.bind(console) : function () {};\nvar _default = logError;\nexports[\"default\"] = _default;\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/makeRecordingID.js\":\n/*!**********************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/makeRecordingID.js ***!\n  \\**********************************************************/\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_185750__) {\n\n\"use strict\";\n\n\nvar _interopRequireDefault = __nested_webpack_require_185750__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = makeRecordingID;\nvar _uuid = _interopRequireDefault(__nested_webpack_require_185750__(/*! ./uuid */ \"./packages/@logrocket/utils/src/uuid.js\"));\nfunction makeRecordingID() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    _ref$prefix = _ref.prefix,\n    prefix = _ref$prefix === void 0 ? 5 : _ref$prefix;\n  return \"\".concat(prefix, \"-\").concat((0, _uuid.default)());\n}\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/mapValues.js\":\n/*!****************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/mapValues.js ***!\n  \\****************************************************/\n/***/ (function(__unused_webpack_module, exports) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = mapValues;\nfunction mapValues(obj, f) {\n  if (obj == null) {\n    return {};\n  }\n  var res = {};\n  Object.keys(obj).forEach(function (key) {\n    res[key] = f(obj[key]);\n  });\n  return res;\n}\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/maybeCleanSwiftUIClassName.ts\":\n/*!*********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/maybeCleanSwiftUIClassName.ts ***!\n  \\*********************************************************************/\n/***/ (function(__unused_webpack_module, exports) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = maybeCleanSwiftUIClassName;\nfunction maybeCleanSwiftUIClassName(className) {\n  // replace angle brackets present in SwiftUI ViewController type strings with ascii encoding and strip spaces\n  return className.replace(/</g, '%3c').replace(/>/g, '%3e').replace(/\\s/g, '');\n}\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/parseIntFromHex.js\":\n/*!**********************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/parseIntFromHex.js ***!\n  \\**********************************************************/\n/***/ (function(__unused_webpack_module, exports) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = parseIntFromHex;\nfunction parseIntFromHex(string) {\n  // strip non-hex characters\n  var hex = string.replace(/[^0-9a-f]/g, '');\n  return parseInt(\"0x\".concat(hex), 16) || 0;\n}\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/parseQueryString.js\":\n/*!***********************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/parseQueryString.js ***!\n  \\***********************************************************/\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_188676__) {\n\n\"use strict\";\n\n\nvar _interopRequireDefault = __nested_webpack_require_188676__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.parseQueryString = void 0;\nvar _slicedToArray2 = _interopRequireDefault(__nested_webpack_require_188676__(/*! @babel/runtime/helpers/slicedToArray */ \"./node_modules/@babel/runtime/helpers/slicedToArray.js\"));\nvar parseSearchParams = function parseSearchParams(queryString) {\n  // Ideally this would use URLSearchParams but that's unsupported in IE 11\n  var params = {};\n  var fragments = queryString.split('&');\n  // The way this is constructed will take the last of any duplicate keys\n  fragments.forEach(function (fragment) {\n    var _fragment$split$map$m = fragment.split('=')\n      // See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent#decoding_query_parameters_from_a_url\n      .map(function (s) {\n        return s.replace(/\\+/g, ' ');\n      }).map(decodeURIComponent),\n      _fragment$split$map$m2 = (0, _slicedToArray2.default)(_fragment$split$map$m, 2),\n      key = _fragment$split$map$m2[0],\n      value = _fragment$split$map$m2[1];\n    params[key] = value;\n  });\n  return params;\n};\n\n/**\n * Parse a full URL into an object with keys and values for parameters in the query\n * string of the URL.\n */\nvar parseQueryString = function parseQueryString(href) {\n  var queryDelimiterIndex = href.indexOf('?');\n  if (queryDelimiterIndex === -1) {\n    return {};\n  }\n\n  // Strip the leading '?'\n  var queryString = href.substring(queryDelimiterIndex + 1);\n  return parseSearchParams(queryString);\n};\nexports.parseQueryString = parseQueryString;\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/parseSelectorForMatch.js\":\n/*!****************************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/parseSelectorForMatch.js ***!\n  \\****************************************************************/\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_190782__) {\n\n\"use strict\";\n\n\nvar _interopRequireDefault = __nested_webpack_require_190782__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = parseSelectorForMatch;\nvar _toConsumableArray2 = _interopRequireDefault(__nested_webpack_require_190782__(/*! @babel/runtime/helpers/toConsumableArray */ \"./node_modules/@babel/runtime/helpers/toConsumableArray.js\"));\nvar _slicedToArray2 = _interopRequireDefault(__nested_webpack_require_190782__(/*! @babel/runtime/helpers/slicedToArray */ \"./node_modules/@babel/runtime/helpers/slicedToArray.js\"));\nvar _startsWith = _interopRequireDefault(__nested_webpack_require_190782__(/*! ./startsWith */ \"./packages/@logrocket/utils/src/startsWith.js\"));\nvar nthChildDelim = '~';\nvar nthChildPrefix = ':nth-child(';\n\n// parses selectorString into an array of node objects identifying the following attributes:\n// id: <String>, classNames: [<String>], nodeName: <String>, directDesc: <Bool>, nthChild: <String>\nfunction parseSelectorForMatch(selectorString) {\n  var parsedStr = selectorString.replace(/\\s*>\\s*|:nth-child\\(([1-9][0-9]*|odd|even)\\)|\\s+/gi, function (match) {\n    if (match.indexOf('>') > -1) {\n      return ' >';\n    }\n    if (match.trim().length === 0) {\n      return ' ';\n    }\n    return \"\".concat(nthChildDelim).concat(match.slice(nthChildPrefix.length));\n  });\n  return parsedStr.split(/\\s+/).map(function (nodeString) {\n    var nodeObject = {};\n    var cleanNodeString = nodeString;\n    if (cleanNodeString.charAt(0) === '>') {\n      nodeObject.directDesc = true;\n      cleanNodeString = cleanNodeString.slice(1);\n    }\n    cleanNodeString = cleanNodeString.replace(/^([a-z0-9-_]+)/ig, function (match) {\n      nodeObject.nodeName = match;\n      return '';\n    });\n    if (cleanNodeString.charAt(0) === nthChildDelim) {\n      var _cleanNodeString$slic = cleanNodeString.slice(1).split(')'),\n        _cleanNodeString$slic2 = (0, _slicedToArray2.default)(_cleanNodeString$slic, 2),\n        childID = _cleanNodeString$slic2[0],\n        rest = _cleanNodeString$slic2[1];\n      nodeObject.nthChild = childID;\n      cleanNodeString = rest;\n    }\n    cleanNodeString.replace(/\\.|#/gi, function (match) {\n      return \" \".concat(match);\n    }).trim().split(' ').forEach(function (nodePart) {\n      if ((0, _startsWith.default)(nodePart, '.')) {\n        var className = nodePart.slice(1);\n        nodeObject.classList = nodeObject.classList ? [].concat((0, _toConsumableArray2.default)(nodeObject.classList), [className]) : [className];\n      } else if ((0, _startsWith.default)(nodePart, '#')) {\n        nodeObject.id = nodePart.slice(1);\n      }\n    });\n    return nodeObject;\n  });\n}\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/protectFunc.js\":\n/*!******************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/protectFunc.js ***!\n  \\******************************************************/\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_193823__) {\n\n\"use strict\";\n\n\nvar _interopRequireDefault = __nested_webpack_require_193823__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = protectFunc;\nvar _sendTelemetryData = _interopRequireDefault(__nested_webpack_require_193823__(/*! ./sendTelemetryData */ \"./packages/@logrocket/utils/src/sendTelemetryData.js\"));\nvar _logError = _interopRequireDefault(__nested_webpack_require_193823__(/*! ./logError */ \"./packages/@logrocket/utils/src/logError.js\"));\nfunction protectFunc(f) {\n  var onFail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};\n  return function () {\n    var result;\n    try {\n      result = f.apply(void 0, arguments);\n    } catch (err) {\n      if (typeof window !== 'undefined' && window._lrdebug) {\n        throw err;\n      }\n      var payload = onFail(err);\n      (0, _logError.default)('LogRocket', err);\n      (0, _sendTelemetryData.default)(err, payload);\n    }\n    return result;\n  };\n}\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/querySelectorWithShadowDom.js\":\n/*!*********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/querySelectorWithShadowDom.js ***!\n  \\*********************************************************************/\n/***/ (function(__unused_webpack_module, exports) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = querySelectorWithShadowDom;\nexports.caseInsensitiveQuerySelector = void 0;\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nvar getMatchingChildren = function getMatchingChildren(_ref) {\n  var root = _ref.root,\n    selectorList = _ref.selectorList,\n    directDesc = _ref.directDesc;\n  var selectorParts = selectorList[0].split(/(?=\\.)|(?=#)/);\n\n  // element selector looks like \"type:nth-child(x)\"\n  var elementSelector = selectorParts.shift();\n  var id = '';\n  var classes = [];\n  selectorParts.forEach(function (part) {\n    if (part[0] === '#') {\n      id = part.toLowerCase().substring(1).trim();\n    }\n    if (part[0] === '.') {\n      classes.push(part.toLowerCase().substring(1).trim());\n    }\n  });\n  var matchingElements;\n  if (directDesc) {\n    matchingElements = [root.querySelector(\":scope > \".concat(elementSelector))];\n  } else {\n    matchingElements = root.querySelectorAll(elementSelector);\n  }\n  var matches = [];\n  // check each matched elements for a full match\n  var _iterator = _createForOfIteratorHelper(matchingElements),\n    _step;\n  try {\n    var _loop = function _loop() {\n      var currentMatch = _step.value;\n      if (!currentMatch || id !== currentMatch.id.toLowerCase()) {\n        return \"continue\";\n      }\n      var currentClasses = Array.from(currentMatch.classList.values()).map(function (c) {\n        return c.toLowerCase();\n      }).filter(function (s) {\n        return s !== '' && s[0] !== ':';\n      }); // no pseudo classes or empties\n\n      if (!classes.every(function (v) {\n        return currentClasses.indexOf(v) > -1;\n      })) {\n        return \"continue\";\n      }\n      matches.push(currentMatch);\n    };\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _ret = _loop();\n      if (_ret === \"continue\") continue;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return matches;\n};\n\n// The parser expects the selector to be formatted as an ES mouse click selector:\n\n// div:nth-child(1)#some-id > div:nth-child(1)#id-me.class1.class2 > div:nth-child(3) > ...\n\n// with the given selector format it will return the same result as\n// root.querySelector(selector) without case sensitivity\nvar caseInsensitiveQuerySelector = function caseInsensitiveQuerySelector(root, selector) {\n  if (!selector.length) {\n    return null;\n  }\n\n  // If root is part of a shadow DOM, start from the shadow root. Otherwise,\n  //  root must start at body element to protect against malformed DOMs:\n  var rootElement;\n  if (root.host) {\n    // The presence of root.host indicates a shadow root:\n    rootElement = root;\n  } else {\n    rootElement = root.querySelector('body');\n  }\n\n  // no shadow dom root or body tag\n  if (!rootElement) {\n    return null;\n  }\n\n  // when storing selectors we truncate the leading segments of long selector strings\n  // this makes the first selector segment possibly anywhere in the DOM\n  var queue = [{\n    matches: [rootElement],\n    selectorList: selector.split(' > '),\n    directDesc: false\n  }];\n  while (queue.length) {\n    var _queue$shift = queue.shift(),\n      matches = _queue$shift.matches,\n      selectorList = _queue$shift.selectorList,\n      directDesc = _queue$shift.directDesc;\n    var _iterator2 = _createForOfIteratorHelper(matches),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var matchedElement = _step2.value;\n        var currentMatches = getMatchingChildren({\n          root: matchedElement,\n          selectorList: selectorList,\n          directDesc: directDesc\n        });\n\n        // did I find it?\n        if (currentMatches.length && selectorList.length === 1) {\n          return currentMatches[0];\n        }\n        if (currentMatches.length) {\n          queue.push({\n            matches: currentMatches,\n            selectorList: selectorList.slice(1),\n            directDesc: true // all segments after the first must be direct descendants\n          });\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n  return null;\n};\nexports.caseInsensitiveQuerySelector = caseInsensitiveQuerySelector;\nfunction querySelectorWithShadowDom(element, fullSelector) {\n  if (fullSelector.startsWith('$shadow-root >')) {\n    throw new Error(\"Malformed selector '\".concat(fullSelector, \"': should not start with $shadow-root\"));\n  }\n  if (fullSelector.endsWith('> $shadow-root')) {\n    // Selector ends in an empty shadow root; remove it so we don't perform an invalid query:\n    // eslint-disable-next-line no-param-reassign\n    fullSelector = fullSelector.slice(0, fullSelector.length - '> $shadow-root'.length);\n  }\n  var currentRoot = element;\n  var currentNode;\n  var selectors = fullSelector.split('> $shadow-root >');\n  for (var i = 0; i < selectors.length; i++) {\n    currentNode = caseInsensitiveQuerySelector(currentRoot, selectors[i]);\n\n    // Dive into the shadow!\n    if (currentNode && i < selectors.length - 1) {\n      if (currentNode.shadowRoot) {\n        currentRoot = currentNode.shadowRoot;\n      } else {\n        throw new Error(\"Missing shadowRoot for selector '\".concat(fullSelector, \"' at depth \").concat(i));\n      }\n    }\n  }\n  return {\n    root: currentRoot,\n    node: currentNode\n  };\n}\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/randomInt.js\":\n/*!****************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/randomInt.js ***!\n  \\****************************************************/\n/***/ (function(__unused_webpack_module, exports) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = randomInt;\n// min is inclusive, max is exclusive\nfunction randomInt(min, max) {\n  var minInt = Math.ceil(min);\n  var maxInt = Math.floor(max);\n  return Math.floor(Math.random() * (maxInt - minInt)) + minInt;\n}\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/removeOutdated.js\":\n/*!*********************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/removeOutdated.js ***!\n  \\*********************************************************/\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_203072__) {\n\n\"use strict\";\n\n\nvar _interopRequireDefault = __nested_webpack_require_203072__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = removeOutdated;\nvar _sortedLastIndexBy = _interopRequireDefault(__nested_webpack_require_203072__(/*! lodash/sortedLastIndexBy */ \"./packages/@logrocket/utils/node_modules/lodash/sortedLastIndexBy.js\"));\nvar KEEP = 5000;\nfunction removeOutdated(state, action) {\n  if (state.length === 0) {\n    return state;\n  }\n\n  // Find the first entry which is **before** the given actions time.\n  var index = (0, _sortedLastIndexBy.default)(state, {\n    time: action.time - KEEP\n  }, 'time') - 1;\n  var first = state[index];\n\n  // Keep one entry that is more than KEEP away, and remove the rest of them.\n  if (first && action.time - first.time > KEEP && index > 0) {\n    return state.slice(index);\n  }\n  return state;\n}\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/requireValue.ts\":\n/*!*******************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/requireValue.ts ***!\n  \\*******************************************************/\n/***/ (function(__unused_webpack_module, exports) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.requireValue = void 0;\nvar requireValue = function requireValue(value) {\n  if (typeof value === 'undefined') {\n    throw new Error('Value must not be undefined.');\n  }\n  return value;\n};\nexports.requireValue = requireValue;\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/sanitizeValue.js\":\n/*!********************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/sanitizeValue.js ***!\n  \\********************************************************/\n/***/ (function(__unused_webpack_module, exports) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = sanitizeValue;\nvar _replaceWithLipsum = function _replaceWithLipsum(content) {\n  // eslint-disable-next-line max-len\n  var lipsum = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. ';\n  var repeatLength = Math.ceil(content.length / lipsum.length);\n  var replacementContent = '';\n  while (repeatLength > 0) {\n    replacementContent += lipsum;\n    repeatLength--;\n  }\n  return replacementContent.slice(0, content.length);\n};\nfunction sanitizeValue(valueToClean, taintType) {\n  var value = String(valueToClean);\n  if (String(taintType).toLowerCase() === 'lipsum') {\n    return _replaceWithLipsum(value);\n  }\n  return '';\n}\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/scrollMapHistogramToPercent.js\":\n/*!**********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/scrollMapHistogramToPercent.js ***!\n  \\**********************************************************************/\n/***/ (function(__unused_webpack_module, exports) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = scrollMapHistogramToPercent;\nfunction scrollMapHistogramToPercent(buckets, scrollHeight) {\n  var scrollMap = [];\n  var currentSessionCount = buckets.reduce(function (acc, d) {\n    return acc + d.count;\n  }, 0);\n  var cursor = 0;\n  for (var p = 1; p <= 100; p++) {\n    var containerPosition = scrollHeight * (p * 0.01);\n    if (cursor >= buckets.length) {\n      scrollMap.push(0); // beyond scrolled area has 0 sessions\n    } else {\n      scrollMap.push(currentSessionCount);\n      if (containerPosition > buckets[cursor].maxScroll) {\n        currentSessionCount -= buckets[cursor].count;\n        cursor++;\n      }\n    }\n  }\n  return scrollMap;\n}\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/scrubException.ts\":\n/*!*********************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/scrubException.ts ***!\n  \\*********************************************************/\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_207320__) {\n\n\"use strict\";\n\n\nvar _interopRequireDefault = __nested_webpack_require_207320__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.scrubException = scrubException;\nvar _typeof2 = _interopRequireDefault(__nested_webpack_require_207320__(/*! @babel/runtime/helpers/typeof */ \"./node_modules/@babel/runtime/helpers/typeof.js\"));\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction isScalar(value) {\n  return /boolean|number|string/.test((0, _typeof2.default)(value));\n}\nvar optionalScalars = [\n// Valid values for 'level' are 'fatal', 'error', 'warning', 'info',\n// and 'debug'. Defaults to 'error'.\n'level', 'logger'];\nvar optionalMaps = ['tags', 'extra'];\nfunction scrubException(data, options) {\n  if (options) {\n    var _iterator = _createForOfIteratorHelper(optionalScalars),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var field = _step.value;\n        var value = options[field];\n        if (isScalar(value)) {\n          // eslint-disable-next-line no-param-reassign\n          data[field] = value.toString();\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    var _iterator2 = _createForOfIteratorHelper(optionalMaps),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var _field = _step2.value;\n        var dirty = options[_field] || {};\n        var scrubbed = {};\n        for (var _i = 0, _Object$keys = Object.keys(dirty); _i < _Object$keys.length; _i++) {\n          var key = _Object$keys[_i];\n          var _value = dirty[key];\n          if (isScalar(_value)) {\n            scrubbed[key.toString()] = _value.toString();\n          }\n        }\n\n        // eslint-disable-next-line no-param-reassign\n        data[_field] = scrubbed;\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n}\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/selectorFromNodePath.js\":\n/*!***************************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/selectorFromNodePath.js ***!\n  \\***************************************************************/\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_211239__) {\n\n\"use strict\";\n\n\nvar _interopRequireDefault = __nested_webpack_require_211239__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = selectorFromNodePath;\nvar _toConsumableArray2 = _interopRequireDefault(__nested_webpack_require_211239__(/*! @babel/runtime/helpers/toConsumableArray */ \"./node_modules/@babel/runtime/helpers/toConsumableArray.js\"));\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction selectorFromNodePath() {\n  var nodePath = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var selectors = [];\n  // NodePaths are { nodeName: String, classList: [String], id: String }\n  var _iterator = _createForOfIteratorHelper((0, _toConsumableArray2.default)(nodePath).reverse()),\n    _step;\n  try {\n    var _loop = function _loop() {\n      var path = _step.value;\n      var nodeName = path.nodeName,\n        id = path.id,\n        nthChild = path.nthChild;\n      var classList = path.classList;\n      var selectorParts = [];\n\n      // pseudo classes\n      var pseudoClassList = [];\n      nthChild && pseudoClassList.push(\"nth-child(\".concat(nthChild, \")\"));\n      // ... more as we decide to support them\n\n      if (nodeName) {\n        selectorParts.push(nodeName);\n        pseudoClassList.sort().map(function (pseudoClass) {\n          return selectorParts.push(\":\".concat(pseudoClass));\n        });\n      }\n      if (id) {\n        selectorParts.push(\"#\".concat(id));\n      }\n      if (classList && classList.length) {\n        classList = classList.map(function (value) {\n          return value.toLowerCase();\n        }).sort();\n        selectorParts = [].concat((0, _toConsumableArray2.default)(selectorParts), (0, _toConsumableArray2.default)(classList.map(function (className) {\n          return \".\".concat(className);\n        })));\n      }\n      if (selectorParts.length) {\n        selectors.push(selectorParts.join(' '));\n      }\n    };\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      _loop();\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return selectors.join(' > ');\n}\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/selectorMatches.js\":\n/*!**********************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/selectorMatches.js ***!\n  \\**********************************************************/\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_215320__) {\n\n\"use strict\";\n\n\nvar _interopRequireDefault = __nested_webpack_require_215320__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = selectorMatches;\nvar _toConsumableArray2 = _interopRequireDefault(__nested_webpack_require_215320__(/*! @babel/runtime/helpers/toConsumableArray */ \"./node_modules/@babel/runtime/helpers/toConsumableArray.js\"));\nvar _typeof2 = _interopRequireDefault(__nested_webpack_require_215320__(/*! @babel/runtime/helpers/typeof */ \"./node_modules/@babel/runtime/helpers/typeof.js\"));\nvar _findIndex = _interopRequireDefault(__nested_webpack_require_215320__(/*! ./findIndex */ \"./packages/@logrocket/utils/src/findIndex.js\"));\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n// checks that nodeB fulfills all requirements specified in nodeA\nfunction nodesMatch(nodeA, nodeB) {\n  if (!(nodeA && nodeB)) {\n    return false;\n  }\n  if (nodeA.id && nodeA.id !== nodeB.id) {\n    return false;\n  }\n  if (nodeA.nodeName && nodeA.nodeName !== nodeB.nodeName) {\n    return false;\n  }\n  if (nodeA.classList && (!nodeB.classList || nodeA.classList.map(function (classNameA) {\n    return classNameA.toLowerCase();\n  }).some(function (classNameA) {\n    return nodeB.classList.map(function (classNameB) {\n      return classNameB.toLowerCase();\n    }).indexOf(classNameA) === -1;\n  }))) {\n    return false;\n  }\n  if (nodeA.nthChild) {\n    var parsed = parseInt(nodeA.nthChild, 10);\n    if (isNaN(parsed)) {\n      return Math.abs(nodeB.nthChild % 2) === (nodeA.nthChild === 'odd' ? 1 : 0);\n    }\n    return parsed === nodeB.nthChild;\n  }\n  return true;\n}\n\n// checks that nodePath includes, in order, all nodes specified in parsedSelector\nfunction selectorMatches(nodePath, parsedSelector) {\n  var topDownNodePath = nodePath.slice(0).reverse();\n  var matchIndex;\n  var _iterator = _createForOfIteratorHelper(parsedSelector),\n    _step;\n  try {\n    var _loop = function _loop() {\n      var selectorNode = _step.value;\n      if (selectorNode.directDesc) {\n        if (nodesMatch.apply(void 0, [selectorNode].concat((0, _toConsumableArray2.default)(topDownNodePath.splice(0, 1))))) {\n          return \"continue\";\n        } else {\n          return {\n            v: false\n          };\n        }\n      }\n      matchIndex = (0, _findIndex.default)(topDownNodePath, function (pathNode) {\n        return nodesMatch(selectorNode, pathNode);\n      });\n      if (matchIndex === -1) {\n        return {\n          v: false\n        };\n      }\n      topDownNodePath.splice(0, matchIndex + 1);\n    };\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _ret = _loop();\n      if (_ret === \"continue\") continue;\n      if ((0, _typeof2.default)(_ret) === \"object\") return _ret.v;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return true;\n}\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/sendTelemetryData.js\":\n/*!************************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/sendTelemetryData.js ***!\n  \\************************************************************/\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_220094__) {\n\n\"use strict\";\n\n\nvar _interopRequireDefault = __nested_webpack_require_220094__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.sendTelemetry = sendTelemetry;\nexports[\"default\"] = sendErrorTelemetry;\nvar _defineProperty2 = _interopRequireDefault(__nested_webpack_require_220094__(/*! @babel/runtime/helpers/defineProperty */ \"./node_modules/@babel/runtime/helpers/defineProperty.js\"));\nvar _logError = _interopRequireDefault(__nested_webpack_require_220094__(/*! ./logError */ \"./packages/@logrocket/utils/src/logError.js\"));\nvar _TraceKit = _interopRequireDefault(__nested_webpack_require_220094__(/*! ./TraceKit */ \"./packages/@logrocket/utils/src/TraceKit.js\"));\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n// eslint-disable-next-line no-undef\nvar SCRIPT_VERSION =   true ? \"b0db2bde13abbdaac4ddf7651e7be60eb639ccf7\" : 0;\nfunction _sendToSentry(data) {\n  var XHR = window._lrXMLHttpRequest || XMLHttpRequest;\n  try {\n    var req = new XHR();\n    var message = data.message;\n    var url = 'https://e.logrocket.com/api/3/store/?sentry_version=7&sentry_client=http%2F3.8.0&sentry_key=b64162b4187a4c5caae8a68a7e291793';\n    req.open('POST', url);\n    req.send(JSON.stringify(_objectSpread({\n      message: message,\n      logger: 'javascript',\n      platform: 'javascript',\n      request: {\n        headers: {\n          'User-Agent': typeof navigator !== 'undefined' && navigator.userAgent\n        },\n        url: typeof location !== 'undefined' && location.href\n      },\n      release: SCRIPT_VERSION,\n      environment:   false || 'test'\n    }, data)));\n  } catch (err) {\n    (0, _logError.default)('Failed to send', err);\n  }\n}\nfunction sendTelemetry(message, more) {\n  if (typeof window !== 'undefined' && window._lrdebug) {\n    return void (0, _logError.default)(message);\n  }\n  if (more && more.extra && more.extra.appID && typeof more.extra.appID.indexOf === 'function' && more.extra.appID.indexOf('au2drp/') === 0 && Math.random() >= 0.25) {\n    return;\n  }\n  _sendToSentry(_objectSpread({\n    message: message\n  }, more));\n}\nfunction sendErrorTelemetry(err, payload) {\n  try {\n    var message = err.message;\n    var stringPayload;\n    try {\n      stringPayload = JSON.stringify(payload).slice(0, 1000);\n    } catch (err) {\n      try {\n        stringPayload = \"Could not stringify payload: \".concat(Object.prototype.toString.call(payload));\n      } catch (err) {/* nada */}\n    }\n    var stack;\n    try {\n      stack = _TraceKit.default.computeStackTrace(err).stack.map(function (frame) {\n        return {\n          filename: frame.url,\n          lineno: frame.line,\n          colno: frame.column,\n          function: frame.func || '?'\n        };\n      });\n    } catch (err) {\n      /* nada */\n    }\n    _sendToSentry({\n      message: message,\n      extra: {\n        stringPayload: stringPayload\n      },\n      exception: {\n        values: [{\n          type: err.type,\n          value: message,\n          stacktrace: {\n            frames: stack\n          }\n        }]\n      }\n    });\n  } catch (err) {\n    (0, _logError.default)('Failed to send', err);\n  }\n}\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/setFromArray.js\":\n/*!*******************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/setFromArray.js ***!\n  \\*******************************************************/\n/***/ (function(__unused_webpack_module, exports) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = setFromArray;\nfunction setFromArray(array) {\n  var set = new Set();\n  array.forEach(function (el) {\n    return set.add(el);\n  });\n  return set;\n}\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/setToArray.js\":\n/*!*****************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/setToArray.js ***!\n  \\*****************************************************/\n/***/ (function(__unused_webpack_module, exports) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = setToArray;\nfunction setToArray(set) {\n  var array = [];\n  set.forEach(function (el) {\n    return array.push(el);\n  });\n  return array;\n}\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/shallowArsonify.js\":\n/*!**********************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/shallowArsonify.js ***!\n  \\**********************************************************/\n/***/ (function(__unused_webpack_module, exports) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = shallowArsonify;\nfunction shallowArsonify(value) {\n  var type = {}.toString.call(value);\n  switch (type) {\n    case '[object Undefined]':\n      {\n        return {\n          undefined: {}\n        };\n      }\n    case '[object Null]':\n      {\n        return {\n          null: {}\n        };\n      }\n    case '[object Boolean]':\n      {\n        return {\n          boolean: {\n            bool: value\n          }\n        };\n      }\n    case '[object Number]':\n      {\n        return {\n          number: {\n            double: value\n          }\n        };\n      }\n    case '[object String]':\n      {\n        return {\n          string: {\n            string: value\n          }\n        };\n      }\n    case '[object Object]':\n      {\n        return {\n          object: {\n            map: value\n          }\n        };\n      }\n    case '[object Array]':\n      {\n        return {\n          array: {\n            map: value\n          }\n        };\n      }\n    case '[object Date]':\n      {\n        return {\n          date: {\n            double: value.getTime()\n          }\n        };\n      }\n    case '[object Error]':\n      {\n        return {\n          string: {\n            string: \"\".concat(value.name, \": \").concat(value.message)\n          }\n        };\n      }\n    default:\n      {\n        return {\n          unsupported: {\n            type: type\n          }\n        };\n      }\n  }\n}\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/shallowDearsonify.js\":\n/*!************************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/shallowDearsonify.js ***!\n  \\************************************************************/\n/***/ (function(__unused_webpack_module, exports) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = shallowDearsonify;\n/* eslint-disable consistent-return */\n\nfunction shallowDearsonify(value) {\n  var type = value.type || Object.keys(value)[0];\n  switch (type) {\n    case 'undefined':\n      {\n        return undefined;\n      }\n    case 'null':\n      {\n        return null;\n      }\n    case 'boolean':\n      {\n        return value.boolean.bool;\n      }\n    case 'number':\n      {\n        return value.number.double;\n      }\n    case 'string':\n      {\n        return value.string.string;\n      }\n    case 'object':\n      {\n        return value.object.map;\n      }\n    case 'array':\n      {\n        return Object.keys(value.array.map).reduce(function (array, key) {\n          // eslint-disable-next-line no-param-reassign\n          array[key] = value.array.map[key];\n          return array;\n        }, []);\n      }\n    case 'date':\n      {\n        return new Date(value.date.double);\n      }\n    case 'unsupported':\n      {\n        return value.unsupported.type;\n      }\n    default:\n      {\n        /* istanbul ignore next */\n        throw new TypeError(\"Unexpected value in shallowDearsonify: \".concat(value));\n      }\n  }\n}\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/startsWith.js\":\n/*!*****************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/startsWith.js ***!\n  \\*****************************************************/\n/***/ (function(__unused_webpack_module, exports) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = startsWith;\nfunction startsWith(value, search) {\n  var pos = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  return value && search && value.substring(pos, pos + search.length) === search;\n}\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/types.ts\":\n/*!************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/types.ts ***!\n  \\************************************************/\n/***/ (function(__unused_webpack_module, exports) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/userTraitStrings.ts\":\n/*!***********************************************************!*\\\n  !*** ./packages/@logrocket/utils/src/userTraitStrings.ts ***!\n  \\***********************************************************/\n/***/ (function(__unused_webpack_module, exports) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.parseUserTraitString = exports.encodeUserTraitString = void 0;\n// Character used to separate key/value pairs when concatenated, i.e. \"key:value\":\nvar USER_TRAIT_DELIMITER = ':';\n\n// String used to temporarily escape above value when included in a user-defined string:\nvar delimiterReplace = String.fromCharCode(26);\n\n/** Encode strings to be used as a custom key-value pair, ex. for user traits */\nvar encodeUserTraitString = function encodeUserTraitString() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  return args\n  // Escape instances of delimiter value in user-defined text:\n  .map(function (str) {\n    return str.replace(new RegExp(USER_TRAIT_DELIMITER, 'g'), delimiterReplace);\n  }).join(USER_TRAIT_DELIMITER);\n};\n\n/** Split encoded user trait string into original key & value */\nexports.encodeUserTraitString = encodeUserTraitString;\nvar parseUserTraitString = function parseUserTraitString(string) {\n  var nonEmptyStr = string || USER_TRAIT_DELIMITER; // Ensure at least two strings will be returned\n  return nonEmptyStr.split(USER_TRAIT_DELIMITER)\n  // Restore previously escaped instances of delimiter character:\n  .map(function (str) {\n    return str.replace(new RegExp(delimiterReplace, 'g'), USER_TRAIT_DELIMITER);\n  });\n};\nexports.parseUserTraitString = parseUserTraitString;\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/src/uuid.js\":\n/*!***********************************************!*\\\n  !*** ./packages/@logrocket/utils/src/uuid.js ***!\n  \\***********************************************/\n/***/ (function(__unused_webpack_module, exports) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = uuid;\n// https://gist.github.com/jed/982883\n// eslint-disable-next-line\nfunction uuid(a) {\n  return a ? (a ^ Math.random() * 16 >> a / 4).toString(16) : ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, uuid);\n}\n\n/***/ }),\n\n/***/ \"./packages/logrocket/src/LogRocket.js\":\n/*!*********************************************!*\\\n  !*** ./packages/logrocket/src/LogRocket.js ***!\n  \\*********************************************/\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_232142__) {\n\n\"use strict\";\n\n\nvar _interopRequireDefault = __nested_webpack_require_232142__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = exports.MAX_QUEUE_SIZE = void 0;\nvar _classCallCheck2 = _interopRequireDefault(__nested_webpack_require_232142__(/*! @babel/runtime/helpers/classCallCheck */ \"./node_modules/@babel/runtime/helpers/classCallCheck.js\"));\nvar _createClass2 = _interopRequireDefault(__nested_webpack_require_232142__(/*! @babel/runtime/helpers/createClass */ \"./node_modules/@babel/runtime/helpers/createClass.js\"));\nvar _defineProperty2 = _interopRequireDefault(__nested_webpack_require_232142__(/*! @babel/runtime/helpers/defineProperty */ \"./node_modules/@babel/runtime/helpers/defineProperty.js\"));\nvar _objectWithoutProperties2 = _interopRequireDefault(__nested_webpack_require_232142__(/*! @babel/runtime/helpers/objectWithoutProperties */ \"./node_modules/@babel/runtime/helpers/objectWithoutProperties.js\"));\nvar _network = _interopRequireDefault(__nested_webpack_require_232142__(/*! @logrocket/network */ \"./packages/@logrocket/network/src/index.js\"));\nvar _exceptions = __nested_webpack_require_232142__(/*! @logrocket/exceptions */ \"./packages/@logrocket/exceptions/src/index.js\");\nvar _console = _interopRequireDefault(__nested_webpack_require_232142__(/*! @logrocket/console */ \"./packages/@logrocket/console/src/index.js\"));\nvar _redux = __nested_webpack_require_232142__(/*! @logrocket/redux */ \"./packages/@logrocket/redux/src/index.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nvar MAX_QUEUE_SIZE = 1000;\nexports.MAX_QUEUE_SIZE = MAX_QUEUE_SIZE;\nvar considerIngestServerOption = function considerIngestServerOption() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    ingestServer = _ref.ingestServer,\n    options = (0, _objectWithoutProperties2.default)(_ref, [\"ingestServer\"]);\n  if (ingestServer) {\n    return _objectSpread({\n      serverURL: \"\".concat(ingestServer, \"/i\"),\n      statsURL: \"\".concat(ingestServer, \"/s\")\n    }, options);\n  }\n  return options;\n};\nvar LogRocket = /*#__PURE__*/function () {\n  function LogRocket() {\n    var _this = this;\n    (0, _classCallCheck2.default)(this, LogRocket);\n    this._buffer = [];\n    // TODO: tests for these exposed methods.\n    ['log', 'info', 'warn', 'error', 'debug'].forEach(function (method) {\n      _this[method] = function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        _this.addEvent('lr.core.LogEvent', function () {\n          var consoleOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          if (method === 'error' && consoleOptions.shouldAggregateConsoleErrors) {\n            _exceptions.Capture.captureMessage(_this, args[0], args, {}, true);\n          }\n          return {\n            logLevel: method.toUpperCase(),\n            args: args\n          };\n        }, {\n          shouldCaptureStackTrace: true\n        });\n      };\n    });\n    this._isInitialized = false;\n    this._installed = [];\n\n    // expose a callback to get the session URL from the global context\n    window._lr_surl_cb = this.getSessionURL.bind(this);\n  }\n  (0, _createClass2.default)(LogRocket, [{\n    key: \"addEvent\",\n    value: function addEvent(type, getMessage) {\n      var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var time = Date.now();\n      this._run(function (logger) {\n        logger.addEvent(type, getMessage, _objectSpread(_objectSpread({}, opts), {}, {\n          timeOverride: time\n        }));\n      });\n    }\n  }, {\n    key: \"onLogger\",\n    value: function onLogger(logger) {\n      this._logger = logger;\n      while (this._buffer.length > 0) {\n        var f = this._buffer.shift();\n        f(this._logger);\n      }\n    }\n  }, {\n    key: \"_run\",\n    value: function _run(f) {\n      if (this._isDisabled) {\n        return;\n      }\n      if (this._logger) {\n        f(this._logger);\n      } else {\n        if (this._buffer.length >= MAX_QUEUE_SIZE) {\n          this._isDisabled = true;\n          console.warn('LogRocket: script did not load. Check that you have a valid network connection.');\n          this.uninstall();\n          return;\n        }\n        this._buffer.push(f.bind(this));\n      }\n    }\n  }, {\n    key: \"init\",\n    value: function init(appID) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (!this._isInitialized) {\n        var _opts$shouldAugmentNP = opts.shouldAugmentNPS,\n          shouldAugmentNPS = _opts$shouldAugmentNP === void 0 ? true : _opts$shouldAugmentNP,\n          _opts$shouldParseXHRB = opts.shouldParseXHRBlob,\n          shouldParseXHRBlob = _opts$shouldParseXHRB === void 0 ? false : _opts$shouldParseXHRB,\n          _opts$shouldDetectExc = opts.shouldDetectExceptions,\n          shouldDetectExceptions = _opts$shouldDetectExc === void 0 ? true : _opts$shouldDetectExc;\n        if (shouldDetectExceptions) {\n          this._installed.push((0, _exceptions.registerExceptions)(this));\n        }\n        this._installed.push((0, _network.default)(this, {\n          shouldAugmentNPS: !!shouldAugmentNPS,\n          shouldParseXHRBlob: !!shouldParseXHRBlob\n        }));\n        this._installed.push((0, _console.default)(this));\n        this._isInitialized = true;\n        this._run(function (logger) {\n          logger.init(appID, considerIngestServerOption(opts));\n        });\n      }\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      this._run(function (logger) {\n        logger.start();\n      });\n    }\n  }, {\n    key: \"uninstall\",\n    value: function uninstall() {\n      this._installed.forEach(function (f) {\n        return f();\n      });\n      this._buffer = [];\n      this._run(function (logger) {\n        logger.uninstall();\n      });\n    }\n  }, {\n    key: \"identify\",\n    value: function identify(id, opts) {\n      this._run(function (logger) {\n        logger.identify(id, opts);\n      });\n    }\n  }, {\n    key: \"startNewSession\",\n    value: function startNewSession() {\n      this._run(function (logger) {\n        logger.startNewSession();\n      });\n    }\n  }, {\n    key: \"track\",\n    value: function track(customEventName, eventProperties) {\n      this._run(function (logger) {\n        logger.track(customEventName, eventProperties);\n      });\n    }\n  }, {\n    key: \"getSessionURL\",\n    value: function getSessionURL(cb) {\n      if (typeof cb !== 'function') {\n        throw new Error('LogRocket: must pass callback to getSessionURL()');\n      }\n      this._run(function (logger) {\n        if (logger.getSessionURL) {\n          logger.getSessionURL(cb);\n        } else {\n          cb(logger.recordingURL);\n        }\n      });\n    }\n  }, {\n    key: \"getVersion\",\n    value: function getVersion(cb) {\n      this._run(function (logger) {\n        cb(logger.version);\n      });\n    }\n  }, {\n    key: \"captureMessage\",\n    value: function captureMessage(message) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      _exceptions.Capture.captureMessage(this, message, [message], options);\n    }\n  }, {\n    key: \"captureException\",\n    value: function captureException(exception) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      _exceptions.Capture.captureException(this, exception, options);\n    }\n  }, {\n    key: \"version\",\n    get: function get() {\n      return this._logger && this._logger.version;\n    }\n  }, {\n    key: \"sessionURL\",\n    get: function get() {\n      return this._logger && this._logger.recordingURL;\n    }\n  }, {\n    key: \"recordingURL\",\n    get: function get() {\n      return this._logger && this._logger.recordingURL;\n    }\n  }, {\n    key: \"recordingID\",\n    get: function get() {\n      return this._logger && this._logger.recordingID;\n    }\n  }, {\n    key: \"threadID\",\n    get: function get() {\n      return this._logger && this._logger.threadID;\n    }\n  }, {\n    key: \"tabID\",\n    get: function get() {\n      return this._logger && this._logger.tabID;\n    }\n  }, {\n    key: \"reduxEnhancer\",\n    value: function reduxEnhancer() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return (0, _redux.createEnhancer)(this, options);\n    }\n  }, {\n    key: \"reduxMiddleware\",\n    value: function reduxMiddleware() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return (0, _redux.createMiddleware)(this, options);\n    }\n  }, {\n    key: \"isDisabled\",\n    get: function get() {\n      return !!(this._isDisabled || this._logger && this._logger._isDisabled);\n    }\n  }]);\n  return LogRocket;\n}();\nexports[\"default\"] = LogRocket;\n\n/***/ }),\n\n/***/ \"./packages/logrocket/src/makeLogRocket.js\":\n/*!*************************************************!*\\\n  !*** ./packages/logrocket/src/makeLogRocket.js ***!\n  \\*************************************************/\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_242049__) {\n\n\"use strict\";\n\n\nvar _interopRequireDefault = __nested_webpack_require_242049__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = makeLogRocket;\nvar _LogRocket = _interopRequireDefault(__nested_webpack_require_242049__(/*! ./LogRocket */ \"./packages/logrocket/src/LogRocket.js\"));\nvar REACT_NATIVE_NOTICE = 'LogRocket does not yet support React Native.';\nvar makeNoopPolyfill = function makeNoopPolyfill() {\n  return {\n    init: function init() {},\n    uninstall: function uninstall() {},\n    log: function log() {},\n    info: function info() {},\n    warn: function warn() {},\n    error: function error() {},\n    debug: function debug() {},\n    addEvent: function addEvent() {},\n    identify: function identify() {},\n    start: function start() {},\n    get threadID() {\n      return null;\n    },\n    get recordingID() {\n      return null;\n    },\n    get recordingURL() {\n      return null;\n    },\n    reduxEnhancer: function reduxEnhancer() {\n      return function (store) {\n        return function () {\n          return store.apply(void 0, arguments);\n        };\n      };\n    },\n    reduxMiddleware: function reduxMiddleware() {\n      return function () {\n        return function (next) {\n          return function (action) {\n            return next(action);\n          };\n        };\n      };\n    },\n    track: function track() {},\n    getSessionURL: function getSessionURL() {},\n    getVersion: function getVersion() {},\n    startNewSession: function startNewSession() {},\n    onLogger: function onLogger() {},\n    setClock: function setClock() {},\n    captureMessage: function captureMessage() {},\n    captureException: function captureException() {}\n  };\n};\nfunction makeLogRocket() {\n  var getLogger = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {};\n  if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {\n    throw new Error(REACT_NATIVE_NOTICE);\n  }\n  if (typeof window !== 'undefined') {\n    if (window._disableLogRocket) {\n      return makeNoopPolyfill();\n    }\n    if (window.MutationObserver && window.WeakMap) {\n      // Save window globals that we rely on.\n      window._lrMutationObserver = window.MutationObserver;\n      var instance = new _LogRocket.default();\n      getLogger(instance);\n      return instance;\n    }\n  }\n  return makeNoopPolyfill();\n}\n\n/***/ }),\n\n/***/ \"./packages/logrocket/src/setup.js\":\n/*!*****************************************!*\\\n  !*** ./packages/logrocket/src/setup.js ***!\n  \\*****************************************/\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_244774__) {\n\n\"use strict\";\n\n\nvar _interopRequireDefault = __nested_webpack_require_244774__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = setup;\nvar _objectWithoutProperties2 = _interopRequireDefault(__nested_webpack_require_244774__(/*! @babel/runtime/helpers/objectWithoutProperties */ \"./node_modules/@babel/runtime/helpers/objectWithoutProperties.js\"));\nvar _makeLogRocket = _interopRequireDefault(__nested_webpack_require_244774__(/*! ./makeLogRocket */ \"./packages/logrocket/src/makeLogRocket.js\"));\nvar CDN_SERVER_MAP = {\n  'cdn.logrocket.io': 'https://r.logrocket.io',\n  'cdn.lr-ingest.io': 'https://r.lr-ingest.io',\n  'cdn.lr-in.com': 'https://r.lr-in.com',\n  'cdn.lr-in-prod.com': 'https://r.lr-in-prod.com',\n  'cdn.lr-ingest.com': 'https://r.lr-ingest.com',\n  'cdn.ingest-lr.com': 'https://r.ingest-lr.com',\n  'cdn.lr-intake.com': 'https://r.lr-intake.com',\n  'cdn-staging.logrocket.io': 'https://staging-i.logrocket.io',\n  'cdn-staging.lr-ingest.io': 'https://staging-i.lr-ingest.io',\n  'cdn-staging.lr-in.com': 'https://staging-i.lr-in.com',\n  'cdn-staging.lr-in-prod.com': 'https://staging-i.lr-in-prod.com',\n  'cdn-staging.lr-ingest.com': 'https://staging-i.lr-ingest.com',\n  'cdn-staging.ingest-lr.com': 'https://staging-i.ingest-lr.com',\n  'cdn-staging.lr-intake.com': 'https://staging-i.lr-intake.com'\n};\nfunction setup() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    enterpriseServer = _ref.enterpriseServer,\n    _ref$sdkVersion = _ref.sdkVersion,\n    sdkVersion = _ref$sdkVersion === void 0 ? \"6.0.1\" : _ref$sdkVersion,\n    opts = (0, _objectWithoutProperties2.default)(_ref, [\"enterpriseServer\", \"sdkVersion\"]);\n  var scriptOrigin =   false ? 0 : 'https://cdn.logrocket.io';\n  var scriptIngest;\n  if (sdkVersion === 'script') {\n    try {\n      // eslint-disable-next-line compat/compat\n      var scriptTag = document.currentScript;\n      var matches = scriptTag.src.match(/^(https?:\\/\\/([^\\\\]+))\\/.+$/);\n      var scriptHostname = matches && matches[2];\n      if (scriptHostname && CDN_SERVER_MAP[scriptHostname]) {\n        scriptOrigin = matches && matches[1];\n        scriptIngest = CDN_SERVER_MAP[scriptHostname];\n      }\n    } catch (_) {\n      /* no-op */\n    }\n  } else {\n    // NPM\n    scriptOrigin =   false ? 0 : 'https://cdn.lr-intake.com';\n    scriptIngest =   false ? 0 : 'https://r.lr-intake.com';\n  }\n  var sdkServer = opts.sdkServer || enterpriseServer;\n  var ingestServer = opts.ingestServer || enterpriseServer || scriptIngest;\n  var instance = (0, _makeLogRocket.default)(function () {\n    var script = document.createElement('script');\n    if (ingestServer) {\n      if (typeof window.__SDKCONFIG__ === 'undefined') {\n        window.__SDKCONFIG__ = {};\n      }\n      window.__SDKCONFIG__.serverURL = \"\".concat(ingestServer, \"/i\");\n      window.__SDKCONFIG__.statsURL = \"\".concat(ingestServer, \"/s\");\n    }\n    if (sdkServer) {\n      script.src = \"\".concat(sdkServer, \"/logger.min.js\");\n    } else if (window.__SDKCONFIG__ && window.__SDKCONFIG__.loggerURL) {\n      script.src = window.__SDKCONFIG__.loggerURL;\n    } else if (window._lrAsyncScript) {\n      script.src = window._lrAsyncScript;\n    } else {\n      script.src = \"\".concat(scriptOrigin, \"/logger-1.min.js\");\n    }\n    script.async = true;\n    document.head.appendChild(script);\n    script.onload = function () {\n      // Brave browser: Advertises its user-agent as Chrome ##.##... then\n      // loads logger.min.js, but blocks the execution of the script\n      // causing _LRlogger to be undefined.  Let's make sure its there first.\n      if (typeof window._LRLogger === 'function') {\n        instance.onLogger(new window._LRLogger({\n          sdkVersion: sdkVersion\n        }));\n      } else {\n        console.warn('LogRocket: script execution has been blocked by a product or service.');\n        instance.uninstall();\n      }\n    };\n    script.onerror = function () {\n      console.warn('LogRocket: script could not load. Check that you have a valid network connection.');\n      instance.uninstall();\n    };\n  });\n  return instance;\n}\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_DataView.js\":\n/*!********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_DataView.js ***!\n  \\********************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_249336__) {\n\nvar getNative = __nested_webpack_require_249336__(/*! ./_getNative */ \"./packages/@logrocket/utils/node_modules/lodash/_getNative.js\"),\n    root = __nested_webpack_require_249336__(/*! ./_root */ \"./packages/@logrocket/utils/node_modules/lodash/_root.js\");\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView');\n\nmodule.exports = DataView;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_Hash.js\":\n/*!****************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_Hash.js ***!\n  \\****************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_250065__) {\n\nvar hashClear = __nested_webpack_require_250065__(/*! ./_hashClear */ \"./packages/@logrocket/utils/node_modules/lodash/_hashClear.js\"),\n    hashDelete = __nested_webpack_require_250065__(/*! ./_hashDelete */ \"./packages/@logrocket/utils/node_modules/lodash/_hashDelete.js\"),\n    hashGet = __nested_webpack_require_250065__(/*! ./_hashGet */ \"./packages/@logrocket/utils/node_modules/lodash/_hashGet.js\"),\n    hashHas = __nested_webpack_require_250065__(/*! ./_hashHas */ \"./packages/@logrocket/utils/node_modules/lodash/_hashHas.js\"),\n    hashSet = __nested_webpack_require_250065__(/*! ./_hashSet */ \"./packages/@logrocket/utils/node_modules/lodash/_hashSet.js\");\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\nmodule.exports = Hash;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_ListCache.js\":\n/*!*********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_ListCache.js ***!\n  \\*********************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_251594__) {\n\nvar listCacheClear = __nested_webpack_require_251594__(/*! ./_listCacheClear */ \"./packages/@logrocket/utils/node_modules/lodash/_listCacheClear.js\"),\n    listCacheDelete = __nested_webpack_require_251594__(/*! ./_listCacheDelete */ \"./packages/@logrocket/utils/node_modules/lodash/_listCacheDelete.js\"),\n    listCacheGet = __nested_webpack_require_251594__(/*! ./_listCacheGet */ \"./packages/@logrocket/utils/node_modules/lodash/_listCacheGet.js\"),\n    listCacheHas = __nested_webpack_require_251594__(/*! ./_listCacheHas */ \"./packages/@logrocket/utils/node_modules/lodash/_listCacheHas.js\"),\n    listCacheSet = __nested_webpack_require_251594__(/*! ./_listCacheSet */ \"./packages/@logrocket/utils/node_modules/lodash/_listCacheSet.js\");\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\nmodule.exports = ListCache;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_Map.js\":\n/*!***************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_Map.js ***!\n  \\***************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_253246__) {\n\nvar getNative = __nested_webpack_require_253246__(/*! ./_getNative */ \"./packages/@logrocket/utils/node_modules/lodash/_getNative.js\"),\n    root = __nested_webpack_require_253246__(/*! ./_root */ \"./packages/@logrocket/utils/node_modules/lodash/_root.js\");\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map');\n\nmodule.exports = Map;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_MapCache.js\":\n/*!********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_MapCache.js ***!\n  \\********************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_253976__) {\n\nvar mapCacheClear = __nested_webpack_require_253976__(/*! ./_mapCacheClear */ \"./packages/@logrocket/utils/node_modules/lodash/_mapCacheClear.js\"),\n    mapCacheDelete = __nested_webpack_require_253976__(/*! ./_mapCacheDelete */ \"./packages/@logrocket/utils/node_modules/lodash/_mapCacheDelete.js\"),\n    mapCacheGet = __nested_webpack_require_253976__(/*! ./_mapCacheGet */ \"./packages/@logrocket/utils/node_modules/lodash/_mapCacheGet.js\"),\n    mapCacheHas = __nested_webpack_require_253976__(/*! ./_mapCacheHas */ \"./packages/@logrocket/utils/node_modules/lodash/_mapCacheHas.js\"),\n    mapCacheSet = __nested_webpack_require_253976__(/*! ./_mapCacheSet */ \"./packages/@logrocket/utils/node_modules/lodash/_mapCacheSet.js\");\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\nmodule.exports = MapCache;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_Promise.js\":\n/*!*******************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_Promise.js ***!\n  \\*******************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_255639__) {\n\nvar getNative = __nested_webpack_require_255639__(/*! ./_getNative */ \"./packages/@logrocket/utils/node_modules/lodash/_getNative.js\"),\n    root = __nested_webpack_require_255639__(/*! ./_root */ \"./packages/@logrocket/utils/node_modules/lodash/_root.js\");\n\n/* Built-in method references that are verified to be native. */\nvar Promise = getNative(root, 'Promise');\n\nmodule.exports = Promise;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_Set.js\":\n/*!***************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_Set.js ***!\n  \\***************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_256361__) {\n\nvar getNative = __nested_webpack_require_256361__(/*! ./_getNative */ \"./packages/@logrocket/utils/node_modules/lodash/_getNative.js\"),\n    root = __nested_webpack_require_256361__(/*! ./_root */ \"./packages/@logrocket/utils/node_modules/lodash/_root.js\");\n\n/* Built-in method references that are verified to be native. */\nvar Set = getNative(root, 'Set');\n\nmodule.exports = Set;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_SetCache.js\":\n/*!********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_SetCache.js ***!\n  \\********************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_257091__) {\n\nvar MapCache = __nested_webpack_require_257091__(/*! ./_MapCache */ \"./packages/@logrocket/utils/node_modules/lodash/_MapCache.js\"),\n    setCacheAdd = __nested_webpack_require_257091__(/*! ./_setCacheAdd */ \"./packages/@logrocket/utils/node_modules/lodash/_setCacheAdd.js\"),\n    setCacheHas = __nested_webpack_require_257091__(/*! ./_setCacheHas */ \"./packages/@logrocket/utils/node_modules/lodash/_setCacheHas.js\");\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\nmodule.exports = SetCache;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_Stack.js\":\n/*!*****************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_Stack.js ***!\n  \\*****************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_258335__) {\n\nvar ListCache = __nested_webpack_require_258335__(/*! ./_ListCache */ \"./packages/@logrocket/utils/node_modules/lodash/_ListCache.js\"),\n    stackClear = __nested_webpack_require_258335__(/*! ./_stackClear */ \"./packages/@logrocket/utils/node_modules/lodash/_stackClear.js\"),\n    stackDelete = __nested_webpack_require_258335__(/*! ./_stackDelete */ \"./packages/@logrocket/utils/node_modules/lodash/_stackDelete.js\"),\n    stackGet = __nested_webpack_require_258335__(/*! ./_stackGet */ \"./packages/@logrocket/utils/node_modules/lodash/_stackGet.js\"),\n    stackHas = __nested_webpack_require_258335__(/*! ./_stackHas */ \"./packages/@logrocket/utils/node_modules/lodash/_stackHas.js\"),\n    stackSet = __nested_webpack_require_258335__(/*! ./_stackSet */ \"./packages/@logrocket/utils/node_modules/lodash/_stackSet.js\");\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\nmodule.exports = Stack;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_Symbol.js\":\n/*!******************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_Symbol.js ***!\n  \\******************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_259925__) {\n\nvar root = __nested_webpack_require_259925__(/*! ./_root */ \"./packages/@logrocket/utils/node_modules/lodash/_root.js\");\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nmodule.exports = Symbol;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_Uint8Array.js\":\n/*!**********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_Uint8Array.js ***!\n  \\**********************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_260505__) {\n\nvar root = __nested_webpack_require_260505__(/*! ./_root */ \"./packages/@logrocket/utils/node_modules/lodash/_root.js\");\n\n/** Built-in value references. */\nvar Uint8Array = root.Uint8Array;\n\nmodule.exports = Uint8Array;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_WeakMap.js\":\n/*!*******************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_WeakMap.js ***!\n  \\*******************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_261085__) {\n\nvar getNative = __nested_webpack_require_261085__(/*! ./_getNative */ \"./packages/@logrocket/utils/node_modules/lodash/_getNative.js\"),\n    root = __nested_webpack_require_261085__(/*! ./_root */ \"./packages/@logrocket/utils/node_modules/lodash/_root.js\");\n\n/* Built-in method references that are verified to be native. */\nvar WeakMap = getNative(root, 'WeakMap');\n\nmodule.exports = WeakMap;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_arrayFilter.js\":\n/*!***********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_arrayFilter.js ***!\n  \\***********************************************************************/\n/***/ (function(module) {\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = arrayFilter;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_arrayLikeKeys.js\":\n/*!*************************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_arrayLikeKeys.js ***!\n  \\*************************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_262822__) {\n\nvar baseTimes = __nested_webpack_require_262822__(/*! ./_baseTimes */ \"./packages/@logrocket/utils/node_modules/lodash/_baseTimes.js\"),\n    isArguments = __nested_webpack_require_262822__(/*! ./isArguments */ \"./packages/@logrocket/utils/node_modules/lodash/isArguments.js\"),\n    isArray = __nested_webpack_require_262822__(/*! ./isArray */ \"./packages/@logrocket/utils/node_modules/lodash/isArray.js\"),\n    isBuffer = __nested_webpack_require_262822__(/*! ./isBuffer */ \"./packages/@logrocket/utils/node_modules/lodash/isBuffer.js\"),\n    isIndex = __nested_webpack_require_262822__(/*! ./_isIndex */ \"./packages/@logrocket/utils/node_modules/lodash/_isIndex.js\"),\n    isTypedArray = __nested_webpack_require_262822__(/*! ./isTypedArray */ \"./packages/@logrocket/utils/node_modules/lodash/isTypedArray.js\");\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = arrayLikeKeys;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_arrayMap.js\":\n/*!********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_arrayMap.js ***!\n  \\********************************************************************/\n/***/ (function(module) {\n\n/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\nmodule.exports = arrayMap;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_arrayPush.js\":\n/*!*********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_arrayPush.js ***!\n  \\*********************************************************************/\n/***/ (function(module) {\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\nmodule.exports = arrayPush;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_arraySome.js\":\n/*!*********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_arraySome.js ***!\n  \\*********************************************************************/\n/***/ (function(module) {\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nmodule.exports = arraySome;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_assocIndexOf.js\":\n/*!************************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_assocIndexOf.js ***!\n  \\************************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_268064__) {\n\nvar eq = __nested_webpack_require_268064__(/*! ./eq */ \"./packages/@logrocket/utils/node_modules/lodash/eq.js\");\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = assocIndexOf;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_baseGet.js\":\n/*!*******************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_baseGet.js ***!\n  \\*******************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_268998__) {\n\nvar castPath = __nested_webpack_require_268998__(/*! ./_castPath */ \"./packages/@logrocket/utils/node_modules/lodash/_castPath.js\"),\n    toKey = __nested_webpack_require_268998__(/*! ./_toKey */ \"./packages/@logrocket/utils/node_modules/lodash/_toKey.js\");\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = castPath(path, object);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\nmodule.exports = baseGet;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_baseGetAllKeys.js\":\n/*!**************************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_baseGetAllKeys.js ***!\n  \\**************************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_270173__) {\n\nvar arrayPush = __nested_webpack_require_270173__(/*! ./_arrayPush */ \"./packages/@logrocket/utils/node_modules/lodash/_arrayPush.js\"),\n    isArray = __nested_webpack_require_270173__(/*! ./isArray */ \"./packages/@logrocket/utils/node_modules/lodash/isArray.js\");\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\nmodule.exports = baseGetAllKeys;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_baseGetTag.js\":\n/*!**********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_baseGetTag.js ***!\n  \\**********************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_271457__) {\n\nvar Symbol = __nested_webpack_require_271457__(/*! ./_Symbol */ \"./packages/@logrocket/utils/node_modules/lodash/_Symbol.js\"),\n    getRawTag = __nested_webpack_require_271457__(/*! ./_getRawTag */ \"./packages/@logrocket/utils/node_modules/lodash/_getRawTag.js\"),\n    objectToString = __nested_webpack_require_271457__(/*! ./_objectToString */ \"./packages/@logrocket/utils/node_modules/lodash/_objectToString.js\");\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nmodule.exports = baseGetTag;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_baseHasIn.js\":\n/*!*********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_baseHasIn.js ***!\n  \\*********************************************************************/\n/***/ (function(module) {\n\n/**\n * The base implementation of `_.hasIn` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */\nfunction baseHasIn(object, key) {\n  return object != null && key in Object(object);\n}\n\nmodule.exports = baseHasIn;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_baseIsArguments.js\":\n/*!***************************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_baseIsArguments.js ***!\n  \\***************************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_273609__) {\n\nvar baseGetTag = __nested_webpack_require_273609__(/*! ./_baseGetTag */ \"./packages/@logrocket/utils/node_modules/lodash/_baseGetTag.js\"),\n    isObjectLike = __nested_webpack_require_273609__(/*! ./isObjectLike */ \"./packages/@logrocket/utils/node_modules/lodash/isObjectLike.js\");\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\nmodule.exports = baseIsArguments;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_baseIsEqual.js\":\n/*!***********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_baseIsEqual.js ***!\n  \\***********************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_274652__) {\n\nvar baseIsEqualDeep = __nested_webpack_require_274652__(/*! ./_baseIsEqualDeep */ \"./packages/@logrocket/utils/node_modules/lodash/_baseIsEqualDeep.js\"),\n    isObjectLike = __nested_webpack_require_274652__(/*! ./isObjectLike */ \"./packages/@logrocket/utils/node_modules/lodash/isObjectLike.js\");\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\nmodule.exports = baseIsEqual;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_baseIsEqualDeep.js\":\n/*!***************************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_baseIsEqualDeep.js ***!\n  \\***************************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_276247__) {\n\nvar Stack = __nested_webpack_require_276247__(/*! ./_Stack */ \"./packages/@logrocket/utils/node_modules/lodash/_Stack.js\"),\n    equalArrays = __nested_webpack_require_276247__(/*! ./_equalArrays */ \"./packages/@logrocket/utils/node_modules/lodash/_equalArrays.js\"),\n    equalByTag = __nested_webpack_require_276247__(/*! ./_equalByTag */ \"./packages/@logrocket/utils/node_modules/lodash/_equalByTag.js\"),\n    equalObjects = __nested_webpack_require_276247__(/*! ./_equalObjects */ \"./packages/@logrocket/utils/node_modules/lodash/_equalObjects.js\"),\n    getTag = __nested_webpack_require_276247__(/*! ./_getTag */ \"./packages/@logrocket/utils/node_modules/lodash/_getTag.js\"),\n    isArray = __nested_webpack_require_276247__(/*! ./isArray */ \"./packages/@logrocket/utils/node_modules/lodash/isArray.js\"),\n    isBuffer = __nested_webpack_require_276247__(/*! ./isBuffer */ \"./packages/@logrocket/utils/node_modules/lodash/isBuffer.js\"),\n    isTypedArray = __nested_webpack_require_276247__(/*! ./isTypedArray */ \"./packages/@logrocket/utils/node_modules/lodash/isTypedArray.js\");\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\nmodule.exports = baseIsEqualDeep;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_baseIsMatch.js\":\n/*!***********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_baseIsMatch.js ***!\n  \\***********************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_280291__) {\n\nvar Stack = __nested_webpack_require_280291__(/*! ./_Stack */ \"./packages/@logrocket/utils/node_modules/lodash/_Stack.js\"),\n    baseIsEqual = __nested_webpack_require_280291__(/*! ./_baseIsEqual */ \"./packages/@logrocket/utils/node_modules/lodash/_baseIsEqual.js\");\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * The base implementation of `_.isMatch` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to inspect.\n * @param {Object} source The object of property values to match.\n * @param {Array} matchData The property names, values, and compare flags to match.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n */\nfunction baseIsMatch(object, source, matchData, customizer) {\n  var index = matchData.length,\n      length = index,\n      noCustomizer = !customizer;\n\n  if (object == null) {\n    return !length;\n  }\n  object = Object(object);\n  while (index--) {\n    var data = matchData[index];\n    if ((noCustomizer && data[2])\n          ? data[1] !== object[data[0]]\n          : !(data[0] in object)\n        ) {\n      return false;\n    }\n  }\n  while (++index < length) {\n    data = matchData[index];\n    var key = data[0],\n        objValue = object[key],\n        srcValue = data[1];\n\n    if (noCustomizer && data[2]) {\n      if (objValue === undefined && !(key in object)) {\n        return false;\n      }\n    } else {\n      var stack = new Stack;\n      if (customizer) {\n        var result = customizer(objValue, srcValue, key, object, source, stack);\n      }\n      if (!(result === undefined\n            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)\n            : result\n          )) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nmodule.exports = baseIsMatch;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_baseIsNative.js\":\n/*!************************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_baseIsNative.js ***!\n  \\************************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_282610__) {\n\nvar isFunction = __nested_webpack_require_282610__(/*! ./isFunction */ \"./packages/@logrocket/utils/node_modules/lodash/isFunction.js\"),\n    isMasked = __nested_webpack_require_282610__(/*! ./_isMasked */ \"./packages/@logrocket/utils/node_modules/lodash/_isMasked.js\"),\n    isObject = __nested_webpack_require_282610__(/*! ./isObject */ \"./packages/@logrocket/utils/node_modules/lodash/isObject.js\"),\n    toSource = __nested_webpack_require_282610__(/*! ./_toSource */ \"./packages/@logrocket/utils/node_modules/lodash/_toSource.js\");\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\nmodule.exports = baseIsNative;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_baseIsTypedArray.js\":\n/*!****************************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_baseIsTypedArray.js ***!\n  \\****************************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_284757__) {\n\nvar baseGetTag = __nested_webpack_require_284757__(/*! ./_baseGetTag */ \"./packages/@logrocket/utils/node_modules/lodash/_baseGetTag.js\"),\n    isLength = __nested_webpack_require_284757__(/*! ./isLength */ \"./packages/@logrocket/utils/node_modules/lodash/isLength.js\"),\n    isObjectLike = __nested_webpack_require_284757__(/*! ./isObjectLike */ \"./packages/@logrocket/utils/node_modules/lodash/isObjectLike.js\");\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\nmodule.exports = baseIsTypedArray;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_baseIteratee.js\":\n/*!************************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_baseIteratee.js ***!\n  \\************************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_287617__) {\n\nvar baseMatches = __nested_webpack_require_287617__(/*! ./_baseMatches */ \"./packages/@logrocket/utils/node_modules/lodash/_baseMatches.js\"),\n    baseMatchesProperty = __nested_webpack_require_287617__(/*! ./_baseMatchesProperty */ \"./packages/@logrocket/utils/node_modules/lodash/_baseMatchesProperty.js\"),\n    identity = __nested_webpack_require_287617__(/*! ./identity */ \"./packages/@logrocket/utils/node_modules/lodash/identity.js\"),\n    isArray = __nested_webpack_require_287617__(/*! ./isArray */ \"./packages/@logrocket/utils/node_modules/lodash/isArray.js\"),\n    property = __nested_webpack_require_287617__(/*! ./property */ \"./packages/@logrocket/utils/node_modules/lodash/property.js\");\n\n/**\n * The base implementation of `_.iteratee`.\n *\n * @private\n * @param {*} [value=_.identity] The value to convert to an iteratee.\n * @returns {Function} Returns the iteratee.\n */\nfunction baseIteratee(value) {\n  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n  if (typeof value == 'function') {\n    return value;\n  }\n  if (value == null) {\n    return identity;\n  }\n  if (typeof value == 'object') {\n    return isArray(value)\n      ? baseMatchesProperty(value[0], value[1])\n      : baseMatches(value);\n  }\n  return property(value);\n}\n\nmodule.exports = baseIteratee;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_baseKeys.js\":\n/*!********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_baseKeys.js ***!\n  \\********************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_289300__) {\n\nvar isPrototype = __nested_webpack_require_289300__(/*! ./_isPrototype */ \"./packages/@logrocket/utils/node_modules/lodash/_isPrototype.js\"),\n    nativeKeys = __nested_webpack_require_289300__(/*! ./_nativeKeys */ \"./packages/@logrocket/utils/node_modules/lodash/_nativeKeys.js\");\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseKeys;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_baseMatches.js\":\n/*!***********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_baseMatches.js ***!\n  \\***********************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_290631__) {\n\nvar baseIsMatch = __nested_webpack_require_290631__(/*! ./_baseIsMatch */ \"./packages/@logrocket/utils/node_modules/lodash/_baseIsMatch.js\"),\n    getMatchData = __nested_webpack_require_290631__(/*! ./_getMatchData */ \"./packages/@logrocket/utils/node_modules/lodash/_getMatchData.js\"),\n    matchesStrictComparable = __nested_webpack_require_290631__(/*! ./_matchesStrictComparable */ \"./packages/@logrocket/utils/node_modules/lodash/_matchesStrictComparable.js\");\n\n/**\n * The base implementation of `_.matches` which doesn't clone `source`.\n *\n * @private\n * @param {Object} source The object of property values to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatches(source) {\n  var matchData = getMatchData(source);\n  if (matchData.length == 1 && matchData[0][2]) {\n    return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n  }\n  return function(object) {\n    return object === source || baseIsMatch(object, source, matchData);\n  };\n}\n\nmodule.exports = baseMatches;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_baseMatchesProperty.js\":\n/*!*******************************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_baseMatchesProperty.js ***!\n  \\*******************************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_292025__) {\n\nvar baseIsEqual = __nested_webpack_require_292025__(/*! ./_baseIsEqual */ \"./packages/@logrocket/utils/node_modules/lodash/_baseIsEqual.js\"),\n    get = __nested_webpack_require_292025__(/*! ./get */ \"./packages/@logrocket/utils/node_modules/lodash/get.js\"),\n    hasIn = __nested_webpack_require_292025__(/*! ./hasIn */ \"./packages/@logrocket/utils/node_modules/lodash/hasIn.js\"),\n    isKey = __nested_webpack_require_292025__(/*! ./_isKey */ \"./packages/@logrocket/utils/node_modules/lodash/_isKey.js\"),\n    isStrictComparable = __nested_webpack_require_292025__(/*! ./_isStrictComparable */ \"./packages/@logrocket/utils/node_modules/lodash/_isStrictComparable.js\"),\n    matchesStrictComparable = __nested_webpack_require_292025__(/*! ./_matchesStrictComparable */ \"./packages/@logrocket/utils/node_modules/lodash/_matchesStrictComparable.js\"),\n    toKey = __nested_webpack_require_292025__(/*! ./_toKey */ \"./packages/@logrocket/utils/node_modules/lodash/_toKey.js\");\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n *\n * @private\n * @param {string} path The path of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatchesProperty(path, srcValue) {\n  if (isKey(path) && isStrictComparable(srcValue)) {\n    return matchesStrictComparable(toKey(path), srcValue);\n  }\n  return function(object) {\n    var objValue = get(object, path);\n    return (objValue === undefined && objValue === srcValue)\n      ? hasIn(object, path)\n      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n  };\n}\n\nmodule.exports = baseMatchesProperty;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_baseProperty.js\":\n/*!************************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_baseProperty.js ***!\n  \\************************************************************************/\n/***/ (function(module) {\n\n/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\nmodule.exports = baseProperty;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_basePropertyDeep.js\":\n/*!****************************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_basePropertyDeep.js ***!\n  \\****************************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_294843__) {\n\nvar baseGet = __nested_webpack_require_294843__(/*! ./_baseGet */ \"./packages/@logrocket/utils/node_modules/lodash/_baseGet.js\");\n\n/**\n * A specialized version of `baseProperty` which supports deep paths.\n *\n * @private\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyDeep(path) {\n  return function(object) {\n    return baseGet(object, path);\n  };\n}\n\nmodule.exports = basePropertyDeep;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_baseSortedIndexBy.js\":\n/*!*****************************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_baseSortedIndexBy.js ***!\n  \\*****************************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_295727__) {\n\nvar isSymbol = __nested_webpack_require_295727__(/*! ./isSymbol */ \"./packages/@logrocket/utils/node_modules/lodash/isSymbol.js\");\n\n/** Used as references for the maximum length and index of an array. */\nvar MAX_ARRAY_LENGTH = 4294967295,\n    MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeFloor = Math.floor,\n    nativeMin = Math.min;\n\n/**\n * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`\n * which invokes `iteratee` for `value` and each element of `array` to compute\n * their sort ranking. The iteratee is invoked with one argument; (value).\n *\n * @private\n * @param {Array} array The sorted array to inspect.\n * @param {*} value The value to evaluate.\n * @param {Function} iteratee The iteratee invoked per element.\n * @param {boolean} [retHighest] Specify returning the highest qualified index.\n * @returns {number} Returns the index at which `value` should be inserted\n *  into `array`.\n */\nfunction baseSortedIndexBy(array, value, iteratee, retHighest) {\n  var low = 0,\n      high = array == null ? 0 : array.length;\n  if (high === 0) {\n    return 0;\n  }\n\n  value = iteratee(value);\n  var valIsNaN = value !== value,\n      valIsNull = value === null,\n      valIsSymbol = isSymbol(value),\n      valIsUndefined = value === undefined;\n\n  while (low < high) {\n    var mid = nativeFloor((low + high) / 2),\n        computed = iteratee(array[mid]),\n        othIsDefined = computed !== undefined,\n        othIsNull = computed === null,\n        othIsReflexive = computed === computed,\n        othIsSymbol = isSymbol(computed);\n\n    if (valIsNaN) {\n      var setLow = retHighest || othIsReflexive;\n    } else if (valIsUndefined) {\n      setLow = othIsReflexive && (retHighest || othIsDefined);\n    } else if (valIsNull) {\n      setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);\n    } else if (valIsSymbol) {\n      setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);\n    } else if (othIsNull || othIsSymbol) {\n      setLow = false;\n    } else {\n      setLow = retHighest ? (computed <= value) : (computed < value);\n    }\n    if (setLow) {\n      low = mid + 1;\n    } else {\n      high = mid;\n    }\n  }\n  return nativeMin(high, MAX_ARRAY_INDEX);\n}\n\nmodule.exports = baseSortedIndexBy;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_baseTimes.js\":\n/*!*********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_baseTimes.js ***!\n  \\*********************************************************************/\n/***/ (function(module) {\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\nmodule.exports = baseTimes;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_baseToString.js\":\n/*!************************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_baseToString.js ***!\n  \\************************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_299298__) {\n\nvar Symbol = __nested_webpack_require_299298__(/*! ./_Symbol */ \"./packages/@logrocket/utils/node_modules/lodash/_Symbol.js\"),\n    arrayMap = __nested_webpack_require_299298__(/*! ./_arrayMap */ \"./packages/@logrocket/utils/node_modules/lodash/_arrayMap.js\"),\n    isArray = __nested_webpack_require_299298__(/*! ./isArray */ \"./packages/@logrocket/utils/node_modules/lodash/isArray.js\"),\n    isSymbol = __nested_webpack_require_299298__(/*! ./isSymbol */ \"./packages/@logrocket/utils/node_modules/lodash/isSymbol.js\");\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = baseToString;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_baseUnary.js\":\n/*!*********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_baseUnary.js ***!\n  \\*********************************************************************/\n/***/ (function(module) {\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\nmodule.exports = baseUnary;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_cacheHas.js\":\n/*!********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_cacheHas.js ***!\n  \\********************************************************************/\n/***/ (function(module) {\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\nmodule.exports = cacheHas;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_castPath.js\":\n/*!********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_castPath.js ***!\n  \\********************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_302480__) {\n\nvar isArray = __nested_webpack_require_302480__(/*! ./isArray */ \"./packages/@logrocket/utils/node_modules/lodash/isArray.js\"),\n    isKey = __nested_webpack_require_302480__(/*! ./_isKey */ \"./packages/@logrocket/utils/node_modules/lodash/_isKey.js\"),\n    stringToPath = __nested_webpack_require_302480__(/*! ./_stringToPath */ \"./packages/@logrocket/utils/node_modules/lodash/_stringToPath.js\"),\n    toString = __nested_webpack_require_302480__(/*! ./toString */ \"./packages/@logrocket/utils/node_modules/lodash/toString.js\");\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {Object} [object] The object to query keys on.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value, object) {\n  if (isArray(value)) {\n    return value;\n  }\n  return isKey(value, object) ? [value] : stringToPath(toString(value));\n}\n\nmodule.exports = castPath;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_coreJsData.js\":\n/*!**********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_coreJsData.js ***!\n  \\**********************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_303753__) {\n\nvar root = __nested_webpack_require_303753__(/*! ./_root */ \"./packages/@logrocket/utils/node_modules/lodash/_root.js\");\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\nmodule.exports = coreJsData;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_equalArrays.js\":\n/*!***********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_equalArrays.js ***!\n  \\***********************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_304376__) {\n\nvar SetCache = __nested_webpack_require_304376__(/*! ./_SetCache */ \"./packages/@logrocket/utils/node_modules/lodash/_SetCache.js\"),\n    arraySome = __nested_webpack_require_304376__(/*! ./_arraySome */ \"./packages/@logrocket/utils/node_modules/lodash/_arraySome.js\"),\n    cacheHas = __nested_webpack_require_304376__(/*! ./_cacheHas */ \"./packages/@logrocket/utils/node_modules/lodash/_cacheHas.js\");\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Check that cyclic values are equal.\n  var arrStacked = stack.get(array);\n  var othStacked = stack.get(other);\n  if (arrStacked && othStacked) {\n    return arrStacked == other && othStacked == array;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\nmodule.exports = equalArrays;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_equalByTag.js\":\n/*!**********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_equalByTag.js ***!\n  \\**********************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_307665__) {\n\nvar Symbol = __nested_webpack_require_307665__(/*! ./_Symbol */ \"./packages/@logrocket/utils/node_modules/lodash/_Symbol.js\"),\n    Uint8Array = __nested_webpack_require_307665__(/*! ./_Uint8Array */ \"./packages/@logrocket/utils/node_modules/lodash/_Uint8Array.js\"),\n    eq = __nested_webpack_require_307665__(/*! ./eq */ \"./packages/@logrocket/utils/node_modules/lodash/eq.js\"),\n    equalArrays = __nested_webpack_require_307665__(/*! ./_equalArrays */ \"./packages/@logrocket/utils/node_modules/lodash/_equalArrays.js\"),\n    mapToArray = __nested_webpack_require_307665__(/*! ./_mapToArray */ \"./packages/@logrocket/utils/node_modules/lodash/_mapToArray.js\"),\n    setToArray = __nested_webpack_require_307665__(/*! ./_setToArray */ \"./packages/@logrocket/utils/node_modules/lodash/_setToArray.js\");\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]';\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\nmodule.exports = equalByTag;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_equalObjects.js\":\n/*!************************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_equalObjects.js ***!\n  \\************************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_312285__) {\n\nvar getAllKeys = __nested_webpack_require_312285__(/*! ./_getAllKeys */ \"./packages/@logrocket/utils/node_modules/lodash/_getAllKeys.js\");\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Check that cyclic values are equal.\n  var objStacked = stack.get(object);\n  var othStacked = stack.get(other);\n  if (objStacked && othStacked) {\n    return objStacked == other && othStacked == object;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\nmodule.exports = equalObjects;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_freeGlobal.js\":\n/*!**********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_freeGlobal.js ***!\n  \\**********************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_315724__) {\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof __nested_webpack_require_315724__.g == 'object' && __nested_webpack_require_315724__.g && __nested_webpack_require_315724__.g.Object === Object && __nested_webpack_require_315724__.g;\n\nmodule.exports = freeGlobal;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_getAllKeys.js\":\n/*!**********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_getAllKeys.js ***!\n  \\**********************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_316343__) {\n\nvar baseGetAllKeys = __nested_webpack_require_316343__(/*! ./_baseGetAllKeys */ \"./packages/@logrocket/utils/node_modules/lodash/_baseGetAllKeys.js\"),\n    getSymbols = __nested_webpack_require_316343__(/*! ./_getSymbols */ \"./packages/@logrocket/utils/node_modules/lodash/_getSymbols.js\"),\n    keys = __nested_webpack_require_316343__(/*! ./keys */ \"./packages/@logrocket/utils/node_modules/lodash/keys.js\");\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\nmodule.exports = getAllKeys;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_getMapData.js\":\n/*!**********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_getMapData.js ***!\n  \\**********************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_317427__) {\n\nvar isKeyable = __nested_webpack_require_317427__(/*! ./_isKeyable */ \"./packages/@logrocket/utils/node_modules/lodash/_isKeyable.js\");\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\nmodule.exports = getMapData;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_getMatchData.js\":\n/*!************************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_getMatchData.js ***!\n  \\************************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_318302__) {\n\nvar isStrictComparable = __nested_webpack_require_318302__(/*! ./_isStrictComparable */ \"./packages/@logrocket/utils/node_modules/lodash/_isStrictComparable.js\"),\n    keys = __nested_webpack_require_318302__(/*! ./keys */ \"./packages/@logrocket/utils/node_modules/lodash/keys.js\");\n\n/**\n * Gets the property names, values, and compare flags of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the match data of `object`.\n */\nfunction getMatchData(object) {\n  var result = keys(object),\n      length = result.length;\n\n  while (length--) {\n    var key = result[length],\n        value = object[key];\n\n    result[length] = [key, value, isStrictComparable(value)];\n  }\n  return result;\n}\n\nmodule.exports = getMatchData;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_getNative.js\":\n/*!*********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_getNative.js ***!\n  \\*********************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_319422__) {\n\nvar baseIsNative = __nested_webpack_require_319422__(/*! ./_baseIsNative */ \"./packages/@logrocket/utils/node_modules/lodash/_baseIsNative.js\"),\n    getValue = __nested_webpack_require_319422__(/*! ./_getValue */ \"./packages/@logrocket/utils/node_modules/lodash/_getValue.js\");\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\nmodule.exports = getNative;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_getRawTag.js\":\n/*!*********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_getRawTag.js ***!\n  \\*********************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_320451__) {\n\nvar Symbol = __nested_webpack_require_320451__(/*! ./_Symbol */ \"./packages/@logrocket/utils/node_modules/lodash/_Symbol.js\");\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nmodule.exports = getRawTag;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_getSymbols.js\":\n/*!**********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_getSymbols.js ***!\n  \\**********************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_322054__) {\n\nvar arrayFilter = __nested_webpack_require_322054__(/*! ./_arrayFilter */ \"./packages/@logrocket/utils/node_modules/lodash/_arrayFilter.js\"),\n    stubArray = __nested_webpack_require_322054__(/*! ./stubArray */ \"./packages/@logrocket/utils/node_modules/lodash/stubArray.js\");\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols;\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\nmodule.exports = getSymbols;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_getTag.js\":\n/*!******************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_getTag.js ***!\n  \\******************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_323473__) {\n\nvar DataView = __nested_webpack_require_323473__(/*! ./_DataView */ \"./packages/@logrocket/utils/node_modules/lodash/_DataView.js\"),\n    Map = __nested_webpack_require_323473__(/*! ./_Map */ \"./packages/@logrocket/utils/node_modules/lodash/_Map.js\"),\n    Promise = __nested_webpack_require_323473__(/*! ./_Promise */ \"./packages/@logrocket/utils/node_modules/lodash/_Promise.js\"),\n    Set = __nested_webpack_require_323473__(/*! ./_Set */ \"./packages/@logrocket/utils/node_modules/lodash/_Set.js\"),\n    WeakMap = __nested_webpack_require_323473__(/*! ./_WeakMap */ \"./packages/@logrocket/utils/node_modules/lodash/_WeakMap.js\"),\n    baseGetTag = __nested_webpack_require_323473__(/*! ./_baseGetTag */ \"./packages/@logrocket/utils/node_modules/lodash/_baseGetTag.js\"),\n    toSource = __nested_webpack_require_323473__(/*! ./_toSource */ \"./packages/@logrocket/utils/node_modules/lodash/_toSource.js\");\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    setTag = '[object Set]',\n    weakMapTag = '[object WeakMap]';\n\nvar dataViewTag = '[object DataView]';\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\nmodule.exports = getTag;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_getValue.js\":\n/*!********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_getValue.js ***!\n  \\********************************************************************/\n/***/ (function(module) {\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\nmodule.exports = getValue;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_hasPath.js\":\n/*!*******************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_hasPath.js ***!\n  \\*******************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_326891__) {\n\nvar castPath = __nested_webpack_require_326891__(/*! ./_castPath */ \"./packages/@logrocket/utils/node_modules/lodash/_castPath.js\"),\n    isArguments = __nested_webpack_require_326891__(/*! ./isArguments */ \"./packages/@logrocket/utils/node_modules/lodash/isArguments.js\"),\n    isArray = __nested_webpack_require_326891__(/*! ./isArray */ \"./packages/@logrocket/utils/node_modules/lodash/isArray.js\"),\n    isIndex = __nested_webpack_require_326891__(/*! ./_isIndex */ \"./packages/@logrocket/utils/node_modules/lodash/_isIndex.js\"),\n    isLength = __nested_webpack_require_326891__(/*! ./isLength */ \"./packages/@logrocket/utils/node_modules/lodash/isLength.js\"),\n    toKey = __nested_webpack_require_326891__(/*! ./_toKey */ \"./packages/@logrocket/utils/node_modules/lodash/_toKey.js\");\n\n/**\n * Checks if `path` exists on `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @param {Function} hasFunc The function to check properties.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n */\nfunction hasPath(object, path, hasFunc) {\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      result = false;\n\n  while (++index < length) {\n    var key = toKey(path[index]);\n    if (!(result = object != null && hasFunc(object, key))) {\n      break;\n    }\n    object = object[key];\n  }\n  if (result || ++index != length) {\n    return result;\n  }\n  length = object == null ? 0 : object.length;\n  return !!length && isLength(length) && isIndex(key, length) &&\n    (isArray(object) || isArguments(object));\n}\n\nmodule.exports = hasPath;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_hashClear.js\":\n/*!*********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_hashClear.js ***!\n  \\*********************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_328833__) {\n\nvar nativeCreate = __nested_webpack_require_328833__(/*! ./_nativeCreate */ \"./packages/@logrocket/utils/node_modules/lodash/_nativeCreate.js\");\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\nmodule.exports = hashClear;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_hashDelete.js\":\n/*!**********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_hashDelete.js ***!\n  \\**********************************************************************/\n/***/ (function(module) {\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nmodule.exports = hashDelete;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_hashGet.js\":\n/*!*******************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_hashGet.js ***!\n  \\*******************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_330356__) {\n\nvar nativeCreate = __nested_webpack_require_330356__(/*! ./_nativeCreate */ \"./packages/@logrocket/utils/node_modules/lodash/_nativeCreate.js\");\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\nmodule.exports = hashGet;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_hashHas.js\":\n/*!*******************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_hashHas.js ***!\n  \\*******************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_331586__) {\n\nvar nativeCreate = __nested_webpack_require_331586__(/*! ./_nativeCreate */ \"./packages/@logrocket/utils/node_modules/lodash/_nativeCreate.js\");\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\nmodule.exports = hashHas;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_hashSet.js\":\n/*!*******************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_hashSet.js ***!\n  \\*******************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_332670__) {\n\nvar nativeCreate = __nested_webpack_require_332670__(/*! ./_nativeCreate */ \"./packages/@logrocket/utils/node_modules/lodash/_nativeCreate.js\");\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\nmodule.exports = hashSet;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_isIndex.js\":\n/*!*******************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_isIndex.js ***!\n  \\*******************************************************************/\n/***/ (function(module) {\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\nmodule.exports = isIndex;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_isKey.js\":\n/*!*****************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_isKey.js ***!\n  \\*****************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_334804__) {\n\nvar isArray = __nested_webpack_require_334804__(/*! ./isArray */ \"./packages/@logrocket/utils/node_modules/lodash/isArray.js\"),\n    isSymbol = __nested_webpack_require_334804__(/*! ./isSymbol */ \"./packages/@logrocket/utils/node_modules/lodash/isSymbol.js\");\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/;\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\nmodule.exports = isKey;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_isKeyable.js\":\n/*!*********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_isKeyable.js ***!\n  \\*********************************************************************/\n/***/ (function(module) {\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\nmodule.exports = isKeyable;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_isMasked.js\":\n/*!********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_isMasked.js ***!\n  \\********************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_336984__) {\n\nvar coreJsData = __nested_webpack_require_336984__(/*! ./_coreJsData */ \"./packages/@logrocket/utils/node_modules/lodash/_coreJsData.js\");\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\nmodule.exports = isMasked;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_isPrototype.js\":\n/*!***********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_isPrototype.js ***!\n  \\***********************************************************************/\n/***/ (function(module) {\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\nmodule.exports = isPrototype;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_isStrictComparable.js\":\n/*!******************************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_isStrictComparable.js ***!\n  \\******************************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_338871__) {\n\nvar isObject = __nested_webpack_require_338871__(/*! ./isObject */ \"./packages/@logrocket/utils/node_modules/lodash/isObject.js\");\n\n/**\n * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` if suitable for strict\n *  equality comparisons, else `false`.\n */\nfunction isStrictComparable(value) {\n  return value === value && !isObject(value);\n}\n\nmodule.exports = isStrictComparable;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_listCacheClear.js\":\n/*!**************************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_listCacheClear.js ***!\n  \\**************************************************************************/\n/***/ (function(module) {\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\nmodule.exports = listCacheClear;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_listCacheDelete.js\":\n/*!***************************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_listCacheDelete.js ***!\n  \\***************************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_340343__) {\n\nvar assocIndexOf = __nested_webpack_require_340343__(/*! ./_assocIndexOf */ \"./packages/@logrocket/utils/node_modules/lodash/_assocIndexOf.js\");\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype;\n\n/** Built-in value references. */\nvar splice = arrayProto.splice;\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\nmodule.exports = listCacheDelete;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_listCacheGet.js\":\n/*!************************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_listCacheGet.js ***!\n  \\************************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_341596__) {\n\nvar assocIndexOf = __nested_webpack_require_341596__(/*! ./_assocIndexOf */ \"./packages/@logrocket/utils/node_modules/lodash/_assocIndexOf.js\");\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\nmodule.exports = listCacheGet;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_listCacheHas.js\":\n/*!************************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_listCacheHas.js ***!\n  \\************************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_342494__) {\n\nvar assocIndexOf = __nested_webpack_require_342494__(/*! ./_assocIndexOf */ \"./packages/@logrocket/utils/node_modules/lodash/_assocIndexOf.js\");\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\nmodule.exports = listCacheHas;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_listCacheSet.js\":\n/*!************************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_listCacheSet.js ***!\n  \\************************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_343375__) {\n\nvar assocIndexOf = __nested_webpack_require_343375__(/*! ./_assocIndexOf */ \"./packages/@logrocket/utils/node_modules/lodash/_assocIndexOf.js\");\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\nmodule.exports = listCacheSet;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_mapCacheClear.js\":\n/*!*************************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_mapCacheClear.js ***!\n  \\*************************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_344410__) {\n\nvar Hash = __nested_webpack_require_344410__(/*! ./_Hash */ \"./packages/@logrocket/utils/node_modules/lodash/_Hash.js\"),\n    ListCache = __nested_webpack_require_344410__(/*! ./_ListCache */ \"./packages/@logrocket/utils/node_modules/lodash/_ListCache.js\"),\n    Map = __nested_webpack_require_344410__(/*! ./_Map */ \"./packages/@logrocket/utils/node_modules/lodash/_Map.js\");\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\nmodule.exports = mapCacheClear;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_mapCacheDelete.js\":\n/*!**************************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_mapCacheDelete.js ***!\n  \\**************************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_345437__) {\n\nvar getMapData = __nested_webpack_require_345437__(/*! ./_getMapData */ \"./packages/@logrocket/utils/node_modules/lodash/_getMapData.js\");\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nmodule.exports = mapCacheDelete;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_mapCacheGet.js\":\n/*!***********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_mapCacheGet.js ***!\n  \\***********************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_346359__) {\n\nvar getMapData = __nested_webpack_require_346359__(/*! ./_getMapData */ \"./packages/@logrocket/utils/node_modules/lodash/_getMapData.js\");\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\nmodule.exports = mapCacheGet;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_mapCacheHas.js\":\n/*!***********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_mapCacheHas.js ***!\n  \\***********************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_347161__) {\n\nvar getMapData = __nested_webpack_require_347161__(/*! ./_getMapData */ \"./packages/@logrocket/utils/node_modules/lodash/_getMapData.js\");\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\nmodule.exports = mapCacheHas;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_mapCacheSet.js\":\n/*!***********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_mapCacheSet.js ***!\n  \\***********************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_348015__) {\n\nvar getMapData = __nested_webpack_require_348015__(/*! ./_getMapData */ \"./packages/@logrocket/utils/node_modules/lodash/_getMapData.js\");\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\nmodule.exports = mapCacheSet;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_mapToArray.js\":\n/*!**********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_mapToArray.js ***!\n  \\**********************************************************************/\n/***/ (function(module) {\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\nmodule.exports = mapToArray;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_matchesStrictComparable.js\":\n/*!***********************************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_matchesStrictComparable.js ***!\n  \\***********************************************************************************/\n/***/ (function(module) {\n\n/**\n * A specialized version of `matchesProperty` for source values suitable\n * for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction matchesStrictComparable(key, srcValue) {\n  return function(object) {\n    if (object == null) {\n      return false;\n    }\n    return object[key] === srcValue &&\n      (srcValue !== undefined || (key in Object(object)));\n  };\n}\n\nmodule.exports = matchesStrictComparable;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_memoizeCapped.js\":\n/*!*************************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_memoizeCapped.js ***!\n  \\*************************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_350651__) {\n\nvar memoize = __nested_webpack_require_350651__(/*! ./memoize */ \"./packages/@logrocket/utils/node_modules/lodash/memoize.js\");\n\n/** Used as the maximum memoize cache size. */\nvar MAX_MEMOIZE_SIZE = 500;\n\n/**\n * A specialized version of `_.memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */\nfunction memoizeCapped(func) {\n  var result = memoize(func, function(key) {\n    if (cache.size === MAX_MEMOIZE_SIZE) {\n      cache.clear();\n    }\n    return key;\n  });\n\n  var cache = result.cache;\n  return result;\n}\n\nmodule.exports = memoizeCapped;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_nativeCreate.js\":\n/*!************************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_nativeCreate.js ***!\n  \\************************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_351756__) {\n\nvar getNative = __nested_webpack_require_351756__(/*! ./_getNative */ \"./packages/@logrocket/utils/node_modules/lodash/_getNative.js\");\n\n/* Built-in method references that are verified to be native. */\nvar nativeCreate = getNative(Object, 'create');\n\nmodule.exports = nativeCreate;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_nativeKeys.js\":\n/*!**********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_nativeKeys.js ***!\n  \\**********************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_352410__) {\n\nvar overArg = __nested_webpack_require_352410__(/*! ./_overArg */ \"./packages/@logrocket/utils/node_modules/lodash/_overArg.js\");\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\nmodule.exports = nativeKeys;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_nodeUtil.js\":\n/*!********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_nodeUtil.js ***!\n  \\********************************************************************/\n/***/ (function(module, exports, __nested_webpack_require_353054__) {\n\n/* module decorator */ module = __nested_webpack_require_353054__.nmd(module);\nvar freeGlobal = __nested_webpack_require_353054__(/*! ./_freeGlobal */ \"./packages/@logrocket/utils/node_modules/lodash/_freeGlobal.js\");\n\n/** Detect free variable `exports`. */\nvar freeExports =   true && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && \"object\" == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    // Use `util.types` for Node.js 10+.\n    var types = freeModule && freeModule.require && freeModule.require('util').types;\n\n    if (types) {\n      return types;\n    }\n\n    // Legacy `process.binding('util')` for Node.js < 10.\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\nmodule.exports = nodeUtil;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_objectToString.js\":\n/*!**************************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_objectToString.js ***!\n  \\**************************************************************************/\n/***/ (function(module) {\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_overArg.js\":\n/*!*******************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_overArg.js ***!\n  \\*******************************************************************/\n/***/ (function(module) {\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\nmodule.exports = overArg;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_root.js\":\n/*!****************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_root.js ***!\n  \\****************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_356161__) {\n\nvar freeGlobal = __nested_webpack_require_356161__(/*! ./_freeGlobal */ \"./packages/@logrocket/utils/node_modules/lodash/_freeGlobal.js\");\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nmodule.exports = root;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_setCacheAdd.js\":\n/*!***********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_setCacheAdd.js ***!\n  \\***********************************************************************/\n/***/ (function(module) {\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\nmodule.exports = setCacheAdd;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_setCacheHas.js\":\n/*!***********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_setCacheHas.js ***!\n  \\***********************************************************************/\n/***/ (function(module) {\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\nmodule.exports = setCacheHas;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_setToArray.js\":\n/*!**********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_setToArray.js ***!\n  \\**********************************************************************/\n/***/ (function(module) {\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\nmodule.exports = setToArray;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_stackClear.js\":\n/*!**********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_stackClear.js ***!\n  \\**********************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_359039__) {\n\nvar ListCache = __nested_webpack_require_359039__(/*! ./_ListCache */ \"./packages/@logrocket/utils/node_modules/lodash/_ListCache.js\");\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\nmodule.exports = stackClear;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_stackDelete.js\":\n/*!***********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_stackDelete.js ***!\n  \\***********************************************************************/\n/***/ (function(module) {\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\nmodule.exports = stackDelete;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_stackGet.js\":\n/*!********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_stackGet.js ***!\n  \\********************************************************************/\n/***/ (function(module) {\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\nmodule.exports = stackGet;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_stackHas.js\":\n/*!********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_stackHas.js ***!\n  \\********************************************************************/\n/***/ (function(module) {\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\nmodule.exports = stackHas;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_stackSet.js\":\n/*!********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_stackSet.js ***!\n  \\********************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_361756__) {\n\nvar ListCache = __nested_webpack_require_361756__(/*! ./_ListCache */ \"./packages/@logrocket/utils/node_modules/lodash/_ListCache.js\"),\n    Map = __nested_webpack_require_361756__(/*! ./_Map */ \"./packages/@logrocket/utils/node_modules/lodash/_Map.js\"),\n    MapCache = __nested_webpack_require_361756__(/*! ./_MapCache */ \"./packages/@logrocket/utils/node_modules/lodash/_MapCache.js\");\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\nmodule.exports = stackSet;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_stringToPath.js\":\n/*!************************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_stringToPath.js ***!\n  \\************************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_363239__) {\n\nvar memoizeCapped = __nested_webpack_require_363239__(/*! ./_memoizeCapped */ \"./packages/@logrocket/utils/node_modules/lodash/_memoizeCapped.js\");\n\n/** Used to match property names within property paths. */\nvar rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoizeCapped(function(string) {\n  var result = [];\n  if (string.charCodeAt(0) === 46 /* . */) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, subString) {\n    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\nmodule.exports = stringToPath;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_toKey.js\":\n/*!*****************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_toKey.js ***!\n  \\*****************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_364530__) {\n\nvar isSymbol = __nested_webpack_require_364530__(/*! ./isSymbol */ \"./packages/@logrocket/utils/node_modules/lodash/isSymbol.js\");\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = toKey;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/_toSource.js\":\n/*!********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/_toSource.js ***!\n  \\********************************************************************/\n/***/ (function(module) {\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\nmodule.exports = toSource;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/eq.js\":\n/*!*************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/eq.js ***!\n  \\*************************************************************/\n/***/ (function(module) {\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\nmodule.exports = eq;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/get.js\":\n/*!**************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/get.js ***!\n  \\**************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_367475__) {\n\nvar baseGet = __nested_webpack_require_367475__(/*! ./_baseGet */ \"./packages/@logrocket/utils/node_modules/lodash/_baseGet.js\");\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\nmodule.exports = get;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/hasIn.js\":\n/*!****************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/hasIn.js ***!\n  \\****************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_368800__) {\n\nvar baseHasIn = __nested_webpack_require_368800__(/*! ./_baseHasIn */ \"./packages/@logrocket/utils/node_modules/lodash/_baseHasIn.js\"),\n    hasPath = __nested_webpack_require_368800__(/*! ./_hasPath */ \"./packages/@logrocket/utils/node_modules/lodash/_hasPath.js\");\n\n/**\n * Checks if `path` is a direct or inherited property of `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.hasIn(object, 'a');\n * // => true\n *\n * _.hasIn(object, 'a.b');\n * // => true\n *\n * _.hasIn(object, ['a', 'b']);\n * // => true\n *\n * _.hasIn(object, 'b');\n * // => false\n */\nfunction hasIn(object, path) {\n  return object != null && hasPath(object, path, baseHasIn);\n}\n\nmodule.exports = hasIn;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/identity.js\":\n/*!*******************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/identity.js ***!\n  \\*******************************************************************/\n/***/ (function(module) {\n\n/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/isArguments.js\":\n/*!**********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/isArguments.js ***!\n  \\**********************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_370796__) {\n\nvar baseIsArguments = __nested_webpack_require_370796__(/*! ./_baseIsArguments */ \"./packages/@logrocket/utils/node_modules/lodash/_baseIsArguments.js\"),\n    isObjectLike = __nested_webpack_require_370796__(/*! ./isObjectLike */ \"./packages/@logrocket/utils/node_modules/lodash/isObjectLike.js\");\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\nmodule.exports = isArguments;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/isArray.js\":\n/*!******************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/isArray.js ***!\n  \\******************************************************************/\n/***/ (function(module) {\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nmodule.exports = isArray;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/isArrayLike.js\":\n/*!**********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/isArrayLike.js ***!\n  \\**********************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_373189__) {\n\nvar isFunction = __nested_webpack_require_373189__(/*! ./isFunction */ \"./packages/@logrocket/utils/node_modules/lodash/isFunction.js\"),\n    isLength = __nested_webpack_require_373189__(/*! ./isLength */ \"./packages/@logrocket/utils/node_modules/lodash/isLength.js\");\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\nmodule.exports = isArrayLike;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/isBuffer.js\":\n/*!*******************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/isBuffer.js ***!\n  \\*******************************************************************/\n/***/ (function(module, exports, __nested_webpack_require_374536__) {\n\n/* module decorator */ module = __nested_webpack_require_374536__.nmd(module);\nvar root = __nested_webpack_require_374536__(/*! ./_root */ \"./packages/@logrocket/utils/node_modules/lodash/_root.js\"),\n    stubFalse = __nested_webpack_require_374536__(/*! ./stubFalse */ \"./packages/@logrocket/utils/node_modules/lodash/stubFalse.js\");\n\n/** Detect free variable `exports`. */\nvar freeExports =   true && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && \"object\" == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\nmodule.exports = isBuffer;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/isFunction.js\":\n/*!*********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/isFunction.js ***!\n  \\*********************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_376227__) {\n\nvar baseGetTag = __nested_webpack_require_376227__(/*! ./_baseGetTag */ \"./packages/@logrocket/utils/node_modules/lodash/_baseGetTag.js\"),\n    isObject = __nested_webpack_require_376227__(/*! ./isObject */ \"./packages/@logrocket/utils/node_modules/lodash/isObject.js\");\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\nmodule.exports = isFunction;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/isLength.js\":\n/*!*******************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/isLength.js ***!\n  \\*******************************************************************/\n/***/ (function(module) {\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\nmodule.exports = isLength;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/isObject.js\":\n/*!*******************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/isObject.js ***!\n  \\*******************************************************************/\n/***/ (function(module) {\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/isObjectLike.js\":\n/*!***********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/isObjectLike.js ***!\n  \\***********************************************************************/\n/***/ (function(module) {\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/isSymbol.js\":\n/*!*******************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/isSymbol.js ***!\n  \\*******************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_380901__) {\n\nvar baseGetTag = __nested_webpack_require_380901__(/*! ./_baseGetTag */ \"./packages/@logrocket/utils/node_modules/lodash/_baseGetTag.js\"),\n    isObjectLike = __nested_webpack_require_380901__(/*! ./isObjectLike */ \"./packages/@logrocket/utils/node_modules/lodash/isObjectLike.js\");\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nmodule.exports = isSymbol;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/isTypedArray.js\":\n/*!***********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/isTypedArray.js ***!\n  \\***********************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_382138__) {\n\nvar baseIsTypedArray = __nested_webpack_require_382138__(/*! ./_baseIsTypedArray */ \"./packages/@logrocket/utils/node_modules/lodash/_baseIsTypedArray.js\"),\n    baseUnary = __nested_webpack_require_382138__(/*! ./_baseUnary */ \"./packages/@logrocket/utils/node_modules/lodash/_baseUnary.js\"),\n    nodeUtil = __nested_webpack_require_382138__(/*! ./_nodeUtil */ \"./packages/@logrocket/utils/node_modules/lodash/_nodeUtil.js\");\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\nmodule.exports = isTypedArray;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/keys.js\":\n/*!***************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/keys.js ***!\n  \\***************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_383440__) {\n\nvar arrayLikeKeys = __nested_webpack_require_383440__(/*! ./_arrayLikeKeys */ \"./packages/@logrocket/utils/node_modules/lodash/_arrayLikeKeys.js\"),\n    baseKeys = __nested_webpack_require_383440__(/*! ./_baseKeys */ \"./packages/@logrocket/utils/node_modules/lodash/_baseKeys.js\"),\n    isArrayLike = __nested_webpack_require_383440__(/*! ./isArrayLike */ \"./packages/@logrocket/utils/node_modules/lodash/isArrayLike.js\");\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\nmodule.exports = keys;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/memoize.js\":\n/*!******************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/memoize.js ***!\n  \\******************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_384941__) {\n\nvar MapCache = __nested_webpack_require_384941__(/*! ./_MapCache */ \"./packages/@logrocket/utils/node_modules/lodash/_MapCache.js\");\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result) || cache;\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Expose `MapCache`.\nmemoize.Cache = MapCache;\n\nmodule.exports = memoize;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/property.js\":\n/*!*******************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/property.js ***!\n  \\*******************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_387619__) {\n\nvar baseProperty = __nested_webpack_require_387619__(/*! ./_baseProperty */ \"./packages/@logrocket/utils/node_modules/lodash/_baseProperty.js\"),\n    basePropertyDeep = __nested_webpack_require_387619__(/*! ./_basePropertyDeep */ \"./packages/@logrocket/utils/node_modules/lodash/_basePropertyDeep.js\"),\n    isKey = __nested_webpack_require_387619__(/*! ./_isKey */ \"./packages/@logrocket/utils/node_modules/lodash/_isKey.js\"),\n    toKey = __nested_webpack_require_387619__(/*! ./_toKey */ \"./packages/@logrocket/utils/node_modules/lodash/_toKey.js\");\n\n/**\n * Creates a function that returns the value at `path` of a given object.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n * @example\n *\n * var objects = [\n *   { 'a': { 'b': 2 } },\n *   { 'a': { 'b': 1 } }\n * ];\n *\n * _.map(objects, _.property('a.b'));\n * // => [2, 1]\n *\n * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n * // => [1, 2]\n */\nfunction property(path) {\n  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n}\n\nmodule.exports = property;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/sortedLastIndexBy.js\":\n/*!****************************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/sortedLastIndexBy.js ***!\n  \\****************************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_389148__) {\n\nvar baseIteratee = __nested_webpack_require_389148__(/*! ./_baseIteratee */ \"./packages/@logrocket/utils/node_modules/lodash/_baseIteratee.js\"),\n    baseSortedIndexBy = __nested_webpack_require_389148__(/*! ./_baseSortedIndexBy */ \"./packages/@logrocket/utils/node_modules/lodash/_baseSortedIndexBy.js\");\n\n/**\n * This method is like `_.sortedLastIndex` except that it accepts `iteratee`\n * which is invoked for `value` and each element of `array` to compute their\n * sort ranking. The iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The sorted array to inspect.\n * @param {*} value The value to evaluate.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {number} Returns the index at which `value` should be inserted\n *  into `array`.\n * @example\n *\n * var objects = [{ 'x': 4 }, { 'x': 5 }];\n *\n * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n * // => 1\n *\n * // The `_.property` iteratee shorthand.\n * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');\n * // => 1\n */\nfunction sortedLastIndexBy(array, value, iteratee) {\n  return baseSortedIndexBy(array, value, baseIteratee(iteratee, 2), true);\n}\n\nmodule.exports = sortedLastIndexBy;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/stubArray.js\":\n/*!********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/stubArray.js ***!\n  \\********************************************************************/\n/***/ (function(module) {\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\nmodule.exports = stubArray;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/stubFalse.js\":\n/*!********************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/stubFalse.js ***!\n  \\********************************************************************/\n/***/ (function(module) {\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = stubFalse;\n\n\n/***/ }),\n\n/***/ \"./packages/@logrocket/utils/node_modules/lodash/toString.js\":\n/*!*******************************************************************!*\\\n  !*** ./packages/@logrocket/utils/node_modules/lodash/toString.js ***!\n  \\*******************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_392113__) {\n\nvar baseToString = __nested_webpack_require_392113__(/*! ./_baseToString */ \"./packages/@logrocket/utils/node_modules/lodash/_baseToString.js\");\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\nmodule.exports = toString;\n\n\n/***/ }),\n\n/***/ \"./node_modules/@babel/runtime/helpers/arrayLikeToArray.js\":\n/*!*****************************************************************!*\\\n  !*** ./node_modules/@babel/runtime/helpers/arrayLikeToArray.js ***!\n  \\*****************************************************************/\n/***/ (function(module) {\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nmodule.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n\n/***/ }),\n\n/***/ \"./node_modules/@babel/runtime/helpers/arrayWithHoles.js\":\n/*!***************************************************************!*\\\n  !*** ./node_modules/@babel/runtime/helpers/arrayWithHoles.js ***!\n  \\***************************************************************/\n/***/ (function(module) {\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nmodule.exports = _arrayWithHoles, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n\n/***/ }),\n\n/***/ \"./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js\":\n/*!******************************************************************!*\\\n  !*** ./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js ***!\n  \\******************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_394259__) {\n\nvar arrayLikeToArray = __nested_webpack_require_394259__(/*! ./arrayLikeToArray.js */ \"./node_modules/@babel/runtime/helpers/arrayLikeToArray.js\");\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}\nmodule.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n\n/***/ }),\n\n/***/ \"./node_modules/@babel/runtime/helpers/classCallCheck.js\":\n/*!***************************************************************!*\\\n  !*** ./node_modules/@babel/runtime/helpers/classCallCheck.js ***!\n  \\***************************************************************/\n/***/ (function(module) {\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nmodule.exports = _classCallCheck, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n\n/***/ }),\n\n/***/ \"./node_modules/@babel/runtime/helpers/createClass.js\":\n/*!************************************************************!*\\\n  !*** ./node_modules/@babel/runtime/helpers/createClass.js ***!\n  \\************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_395530__) {\n\nvar toPropertyKey = __nested_webpack_require_395530__(/*! ./toPropertyKey.js */ \"./node_modules/@babel/runtime/helpers/toPropertyKey.js\");\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nmodule.exports = _createClass, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n\n/***/ }),\n\n/***/ \"./node_modules/@babel/runtime/helpers/defineProperty.js\":\n/*!***************************************************************!*\\\n  !*** ./node_modules/@babel/runtime/helpers/defineProperty.js ***!\n  \\***************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_396778__) {\n\nvar toPropertyKey = __nested_webpack_require_396778__(/*! ./toPropertyKey.js */ \"./node_modules/@babel/runtime/helpers/toPropertyKey.js\");\nfunction _defineProperty(obj, key, value) {\n  key = toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nmodule.exports = _defineProperty, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n\n/***/ }),\n\n/***/ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\":\n/*!**********************************************************************!*\\\n  !*** ./node_modules/@babel/runtime/helpers/interopRequireDefault.js ***!\n  \\**********************************************************************/\n/***/ (function(module) {\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nmodule.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n\n/***/ }),\n\n/***/ \"./node_modules/@babel/runtime/helpers/iterableToArray.js\":\n/*!****************************************************************!*\\\n  !*** ./node_modules/@babel/runtime/helpers/iterableToArray.js ***!\n  \\****************************************************************/\n/***/ (function(module) {\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nmodule.exports = _iterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n\n/***/ }),\n\n/***/ \"./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js\":\n/*!*********************************************************************!*\\\n  !*** ./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js ***!\n  \\*********************************************************************/\n/***/ (function(module) {\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (null != _i) {\n    var _s,\n      _e,\n      _x,\n      _r,\n      _arr = [],\n      _n = !0,\n      _d = !1;\n    try {\n      if (_x = (_i = _i.call(arr)).next, 0 === i) {\n        if (Object(_i) !== _i) return;\n        _n = !1;\n      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n    } catch (err) {\n      _d = !0, _e = err;\n    } finally {\n      try {\n        if (!_n && null != _i[\"return\"] && (_r = _i[\"return\"](), Object(_r) !== _r)) return;\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n}\nmodule.exports = _iterableToArrayLimit, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n\n/***/ }),\n\n/***/ \"./node_modules/@babel/runtime/helpers/nonIterableRest.js\":\n/*!****************************************************************!*\\\n  !*** ./node_modules/@babel/runtime/helpers/nonIterableRest.js ***!\n  \\****************************************************************/\n/***/ (function(module) {\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nmodule.exports = _nonIterableRest, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n\n/***/ }),\n\n/***/ \"./node_modules/@babel/runtime/helpers/nonIterableSpread.js\":\n/*!******************************************************************!*\\\n  !*** ./node_modules/@babel/runtime/helpers/nonIterableSpread.js ***!\n  \\******************************************************************/\n/***/ (function(module) {\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nmodule.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n\n/***/ }),\n\n/***/ \"./node_modules/@babel/runtime/helpers/objectWithoutProperties.js\":\n/*!************************************************************************!*\\\n  !*** ./node_modules/@babel/runtime/helpers/objectWithoutProperties.js ***!\n  \\************************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_401275__) {\n\nvar objectWithoutPropertiesLoose = __nested_webpack_require_401275__(/*! ./objectWithoutPropertiesLoose.js */ \"./node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js\");\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nmodule.exports = _objectWithoutProperties, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n\n/***/ }),\n\n/***/ \"./node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js\":\n/*!*****************************************************************************!*\\\n  !*** ./node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js ***!\n  \\*****************************************************************************/\n/***/ (function(module) {\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nmodule.exports = _objectWithoutPropertiesLoose, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n\n/***/ }),\n\n/***/ \"./node_modules/@babel/runtime/helpers/slicedToArray.js\":\n/*!**************************************************************!*\\\n  !*** ./node_modules/@babel/runtime/helpers/slicedToArray.js ***!\n  \\**************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_403285__) {\n\nvar arrayWithHoles = __nested_webpack_require_403285__(/*! ./arrayWithHoles.js */ \"./node_modules/@babel/runtime/helpers/arrayWithHoles.js\");\nvar iterableToArrayLimit = __nested_webpack_require_403285__(/*! ./iterableToArrayLimit.js */ \"./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js\");\nvar unsupportedIterableToArray = __nested_webpack_require_403285__(/*! ./unsupportedIterableToArray.js */ \"./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js\");\nvar nonIterableRest = __nested_webpack_require_403285__(/*! ./nonIterableRest.js */ \"./node_modules/@babel/runtime/helpers/nonIterableRest.js\");\nfunction _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}\nmodule.exports = _slicedToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n\n/***/ }),\n\n/***/ \"./node_modules/@babel/runtime/helpers/toConsumableArray.js\":\n/*!******************************************************************!*\\\n  !*** ./node_modules/@babel/runtime/helpers/toConsumableArray.js ***!\n  \\******************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_404491__) {\n\nvar arrayWithoutHoles = __nested_webpack_require_404491__(/*! ./arrayWithoutHoles.js */ \"./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js\");\nvar iterableToArray = __nested_webpack_require_404491__(/*! ./iterableToArray.js */ \"./node_modules/@babel/runtime/helpers/iterableToArray.js\");\nvar unsupportedIterableToArray = __nested_webpack_require_404491__(/*! ./unsupportedIterableToArray.js */ \"./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js\");\nvar nonIterableSpread = __nested_webpack_require_404491__(/*! ./nonIterableSpread.js */ \"./node_modules/@babel/runtime/helpers/nonIterableSpread.js\");\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\nmodule.exports = _toConsumableArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n\n/***/ }),\n\n/***/ \"./node_modules/@babel/runtime/helpers/toPrimitive.js\":\n/*!************************************************************!*\\\n  !*** ./node_modules/@babel/runtime/helpers/toPrimitive.js ***!\n  \\************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_405672__) {\n\nvar _typeof = (__nested_webpack_require_405672__(/*! ./typeof.js */ \"./node_modules/@babel/runtime/helpers/typeof.js\")[\"default\"]);\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nmodule.exports = _toPrimitive, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n\n/***/ }),\n\n/***/ \"./node_modules/@babel/runtime/helpers/toPropertyKey.js\":\n/*!**************************************************************!*\\\n  !*** ./node_modules/@babel/runtime/helpers/toPropertyKey.js ***!\n  \\**************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_406656__) {\n\nvar _typeof = (__nested_webpack_require_406656__(/*! ./typeof.js */ \"./node_modules/@babel/runtime/helpers/typeof.js\")[\"default\"]);\nvar toPrimitive = __nested_webpack_require_406656__(/*! ./toPrimitive.js */ \"./node_modules/@babel/runtime/helpers/toPrimitive.js\");\nfunction _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nmodule.exports = _toPropertyKey, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n\n/***/ }),\n\n/***/ \"./node_modules/@babel/runtime/helpers/typeof.js\":\n/*!*******************************************************!*\\\n  !*** ./node_modules/@babel/runtime/helpers/typeof.js ***!\n  \\*******************************************************/\n/***/ (function(module) {\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return (module.exports = _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports), _typeof(obj);\n}\nmodule.exports = _typeof, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n\n/***/ }),\n\n/***/ \"./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js\":\n/*!***************************************************************************!*\\\n  !*** ./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js ***!\n  \\***************************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_408371__) {\n\nvar arrayLikeToArray = __nested_webpack_require_408371__(/*! ./arrayLikeToArray.js */ \"./node_modules/@babel/runtime/helpers/arrayLikeToArray.js\");\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\nmodule.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n\n/***/ })\n\n/******/ \t});\n/************************************************************************/\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __nested_webpack_require_409310__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tvar cachedModule = __webpack_module_cache__[moduleId];\n/******/ \t\tif (cachedModule !== undefined) {\n/******/ \t\t\treturn cachedModule.exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\t__webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_409310__);\n/******/ \t\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/global */\n/******/ \t!function() {\n/******/ \t\t__nested_webpack_require_409310__.g = (function() {\n/******/ \t\t\tif (typeof globalThis === 'object') return globalThis;\n/******/ \t\t\ttry {\n/******/ \t\t\t\treturn this || new Function('return this')();\n/******/ \t\t\t} catch (e) {\n/******/ \t\t\t\tif (typeof window === 'object') return window;\n/******/ \t\t\t}\n/******/ \t\t})();\n/******/ \t}();\n/******/ \t\n/******/ \t/* webpack/runtime/node module decorator */\n/******/ \t!function() {\n/******/ \t\t__nested_webpack_require_409310__.nmd = function(module) {\n/******/ \t\t\tmodule.paths = [];\n/******/ \t\t\tif (!module.children) module.children = [];\n/******/ \t\t\treturn module;\n/******/ \t\t};\n/******/ \t}();\n/******/ \t\n/************************************************************************/\nvar __nested_webpack_exports__ = {};\n// This entry need to be wrapped in an IIFE because it need to be in strict mode.\n!function() {\n\"use strict\";\nvar exports = __nested_webpack_exports__;\n/*!**********************************************!*\\\n  !*** ./packages/logrocket/src/module-npm.js ***!\n  \\**********************************************/\n\n\nvar _interopRequireDefault = __nested_webpack_require_409310__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar _setup = _interopRequireDefault(__nested_webpack_require_409310__(/*! ./setup */ \"./packages/logrocket/src/setup.js\"));\nvar instance = (0, _setup.default)();\nvar _default = instance;\nexports[\"default\"] = _default;\n}();\n__nested_webpack_exports__ = __nested_webpack_exports__[\"default\"];\n/******/ \treturn __nested_webpack_exports__;\n/******/ })()\n;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/logrocket/dist/build.umd.js\n");

/***/ })

};
;